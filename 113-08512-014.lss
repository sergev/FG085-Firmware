
113-08512-014.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00003fc2  00004076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fc2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000328  00800124  00800124  0000409a  2**0
                  ALLOC
  3 .eeprom       00000041  00810000  00810000  0000409a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000002f4  00000000  00000000  000040dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000036  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00004406  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000dc9  00000000  00000000  000044c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004306  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b1f  00000000  00000000  00009595  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000033b7  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000880  00000000  00000000  0000d46c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001026  00000000  00000000  0000dcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001ad5  00000000  00000000  0000ed12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 03 	jmp	0x724	; 0x724 <__ctors_end>
       4:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
       8:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
       c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      10:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      14:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      18:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      1c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_7>
      20:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      24:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      28:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      2c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      30:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      34:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      38:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      3c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      40:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      44:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      48:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__vector_18>
      4c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      50:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      54:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      58:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      5c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      60:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>
      64:	0c 94 af 03 	jmp	0x75e	; 0x75e <__bad_interrupt>

00000068 <Device>:
      68:	46 47 30 38 35 20 20 6d 69 6e 69 44 44 53 00        FG085  miniDDS.

00000077 <FWver>:
      77:	4d 61 69 6e 3a 20 30 38 35 31 32 2d 30 31 34 00     Main: 08512-014.

00000087 <DDSver>:
      87:	44 44 53 3a 20 30 38 35 30 32 2d 00                 DDS: 08502-.

00000093 <MfgID>:
      93:	4a 59 45 20 54 65 63 68 20 28 63 29 32 30 31 33     JYE Tech (c)2013
      a3:	00 00                                               ..

000000a5 <Web>:
      a5:	77 77 77 2e 6a 79 65 74 65 63 68 2e 63 6f 6d 20     www.jyetech.com 
      b5:	00                                                  .

000000b6 <CRLF>:
      b6:	0d 0a 00 00                                         ....

000000ba <Decor>:
      ba:	53 69 67 6e 61 6c 20 47 65 6e 65 72 61 74 6f 72     Signal Generator
      ca:	00                                                  .

000000cb <KScanCodeTab>:
      cb:	fb fb 0a 30 f7 df 01 31 fb df 02 32 fd df 03 33     ...0...1...2...3
      db:	f7 ef 04 34 fb ef 05 35 fd ef 06 36 f7 f7 07 37     ...4...5...6...7
      eb:	fb f7 08 38 fd f7 09 39 fd fb 0c 2e f7 fb 0b 2b     ...8...9.......+
      fb:	fe fb 10 4b fe f7 0f 48 fe ef 0e 57 fe df 0d 45     ...K...H...W...E
     10b:	fe fd 11 4d fd fd 12 46 f7 fd 14 4f fb fd 13 41     ...M...F...O...A
     11b:	f7 fe 15 58 f6 de 18 00 00 00 00 00 00 00 00 00     ...X............
     12b:	00 00 00 00                                         ....

0000012f <enc_table>:
     12f:	00 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000013f <KS_CW_Tab>:
     13f:	12 00 f6 0a 14 00 ce 0a 13 00 e2 0a 0e 00 1c 19     ................
     14f:	16 00 11 17 17 00 18 16 15 00 6f 15 18 07 3d 1b     ..........o...=.
     15f:	11 05 98 0a 0a 06 17 0a 01 06 17 0a 02 06 17 0a     ................
     16f:	03 06 17 0a 04 06 17 0a 05 06 17 0a 06 06 17 0a     ................
     17f:	07 06 17 0a 08 06 17 0a 09 06 17 0a 0f 0b e5 0b     ................
     18f:	10 0b e5 0b 0c 0c 1b 0e 00 00 a4 08                 ............

0000019b <KS_Sweep_Tab>:
     19b:	12 01 61 18 13 01 19 18 14 01 93 19 01 01 2d 18     ..a...........-.
     1ab:	02 01 2d 18 03 01 2d 18 04 01 2d 18 0e 01 1c 19     ..-...-...-.....
     1bb:	16 01 11 17 17 01 18 16 15 01 6f 15 11 05 98 0a     ..........o.....
     1cb:	0b 01 58 15 00 01 a4 08                             ..X.....

000001d3 <KS_ServoPos_Tab>:
     1d3:	12 02 a3 11 13 02 7d 19 16 02 11 17 17 02 18 16     ......}.........
     1e3:	15 04 ca 19 11 05 98 0a 00 02 a4 08 00 00 00 00     ................
     1f3:	00 00 00 00 00 00 00 00                             ........

000001fb <KS_ServoRun_Tab>:
     1fb:	0e 03 6f 19 15 04 ca 19 11 05 98 0a 00 03 a4 08     ..o.............

0000020b <KS_ServoParam_Tab>:
     20b:	12 06 be 19 16 04 11 17 17 04 18 16 0e 04 d1 19     ................
     21b:	0d 02 8a 08 15 02 8a 08 00 04 a4 08                 ............

00000227 <KS_ModeSel_Tab>:
     227:	11 05 a9 19 16 05 11 17 17 05 18 16 0d 05 97 08     ................
     237:	00 05 a4 08                                         ....

0000023b <KS_DigitInput_Tab>:
     23b:	12 06 8a 18 0a 06 ec 09 01 06 ec 09 02 06 ec 09     ................
     24b:	03 06 ec 09 04 06 ec 09 05 06 ec 09 06 06 ec 09     ................
     25b:	07 06 ec 09 08 06 ec 09 09 06 ec 09 0c 06 ec 09     ................
     26b:	0b 06 e0 09 0d 06 43 19 0f 06 ce 08 10 06 ce 08     ......C.........
     27b:	00 06 a4 08                                         ....

0000027f <KS_DiagLCD_Tab>:
     27f:	0d 08 35 1b 00 07 a4 08                             ..5.....

00000287 <KS_DiagKey_Tab>:
     287:	0a 08 ea 19 01 08 ea 19 02 08 ea 19 03 08 ea 19     ................
     297:	04 08 ea 19 05 08 ea 19 06 08 ea 19 07 08 ea 19     ................
     2a7:	08 08 ea 19 09 08 ea 19 0c 08 ea 19 0b 08 ea 19     ................
     2b7:	0d 08 ea 19 0e 08 ea 19 0f 08 ea 19 10 08 ea 19     ................
     2c7:	11 08 ea 19 12 08 ea 19 14 08 ea 19 13 08 ea 19     ................
     2d7:	15 08 ea 19 16 08 ea 19 17 08 ea 19 18 09 75 1a     ..............u.
     2e7:	00 08 a4 08                                         ....

000002eb <KS_DiagEEPROM_Tab>:
     2eb:	0d 0a 13 1b 00 09 a4 08                             ........

000002f3 <KS_DiagDDS_Tab>:
     2f3:	0d 07 3d 1b 0a 0a 13 1b 01 0a 13 1b 02 0a 13 1b     ..=.............
     303:	03 0a 13 1b 04 0a 13 1b 05 0a 13 1b 06 0a 13 1b     ................
     313:	09 0a 13 1b 00 0a a4 08                             ........

0000031b <KS_ShowStep_Tab>:
     31b:	0d 00 99 14 0f 0b e5 0b 10 0b e5 0b 00 0b a4 08     ................

0000032b <KS_ShowDuty_Tab>:
     32b:	0d 00 99 14 0c 0c 90 0e 00 0c a4 08                 ............

00000337 <CmdIndex>:
     337:	3f 01 9b 01 d3 01 fb 01 0b 02 27 02 3b 02 7f 02     ?.........'.;...
     347:	87 02 eb 02 f3 02 1b 03 2b 03                       ........+.

00000351 <InitFuncTab>:
     351:	99 14 a8 18 ee 18 c1 18                             ........

00000359 <WaveName>:
     359:	53 49 4e 45 00 00 20 53 51 52 00 00 20 54 52 49     SINE.. SQR.. TRI
     369:	00 00 52 4d 50 2b 00 00 52 4d 50 2d 00 00 53 54     ..RMP+..RMP-..ST
     379:	52 2b 00 00 53 54 52 2d 00 00 55 53 45 52 00 00     R+..STR-..USER..

00000389 <Unit_Symbols>:
     389:	48 7a 00 00 00 4b 48 7a 00 00 53 65 63 00 00 6d     Hz...KHz..Sec..m
     399:	53 00 00 00 56 20 20 00 00 6d 56 20 20 00 75 53     S...V  ..mV  .uS
     3a9:	65 63 00 44 65 67 00 00                             ec.Deg..

000003b1 <ModePrompt>:
     3b1:	53 65 6c 65 63 74 20 4d 6f 64 65 00                 Select Mode.

000003bd <ModeNames>:
     3bd:	43 57 00 00 00 00 00 00 00 00 53 77 65 65 70 00     CW........Sweep.
     3cd:	00 00 00 00 53 65 72 76 6f 20 50 6f 73 00 53 65     ....Servo Pos.Se
     3dd:	72 76 6f 20 52 75 6e 00                             rvo Run.

000003e5 <ModeIndex>:
     3e5:	31 2f 34 00 00 32 2f 34 00 00 33 2f 34 00 00 34     1/4..2/4..3/4..4
     3f5:	2f 34 00 00                                         /4..

000003f9 <SweepParams>:
     3f9:	53 74 61 72 74 3a 00 53 74 6f 70 3a 00 00 54 69     Start:.Stop:..Ti
     409:	6d 65 3a 00 00 54 73 74 65 70 3a 00 41 6d 70 3a     me:..Tstep:.Amp:
     419:	00 00 00 4f 66 73 3a 00 00 00                       ...Ofs:...

00000423 <SweepParamUnit>:
     423:	48 7a 00 48 7a 00 6d 53 00 6d 53 00                 Hz.Hz.mS.mS.

0000042f <TswTitle>:
     42f:	54 73 77 20 53 74 65 70 3a 00                       Tsw Step:.

00000439 <ServoPos>:
     439:	53 65 72 76 6f 20 20 20 20 20 20 20 20 50 6f 73     Servo        Pos
     449:	00                                                  .

0000044a <ServoPW>:
     44a:	50 57 3a 00                                         PW:.

0000044e <ServoAmp>:
     44e:	41 4d 50 3a 00                                      AMP:.

00000453 <ServoRun>:
     453:	53 65 72 76 6f 20 20 20 20 20 20 20 20 52 75 6e     Servo        Run
     463:	00                                                  .

00000464 <ServoRunState>:
     464:	52 65 61 64 79 00 00 00 52 75 6e 6e 69 6e 67 00     Ready...Running.
     474:	48 6f 6c 64 00 00 00 00                             Hold....

0000047c <SetFreqPeriodStep>:
     47c:	53 65 74 20 46 2f 54 20 73 74 65 70 00 00 00        Set F/T step...

0000048b <FreqStep>:
     48b:	46 20 73 74 65 70 20 73 69 7a 65 3a 00 00 00        F step size:...

0000049a <TimeStep>:
     49a:	54 20 73 74 65 70 20 73 69 7a 65 3a 00 00 00        T step size:...

000004a9 <Duty>:
     4a9:	44 75 74 79 20 28 25 29 00 00                       Duty (%)..

000004b3 <ServoParamDefaultRestore>:
     4b3:	5b 57 46 5d 20 74 6f 20 72 65 73 74 6f 72 65 00     [WF] to restore.
     4c3:	00                                                  .

000004c4 <ServoParamNames>:
     4c4:	53 56 2e 50 57 6d 69 6e 00 00 00 00 53 56 2e 50     SV.PWmin....SV.P
     4d4:	57 6d 61 78 00 00 00 00 53 56 2e 50 57 6d 69 64     Wmax....SV.PWmid
     4e4:	00 00 00 00 53 56 2e 50 57 69 6e 63 00 00 00 00     ....SV.PWinc....
     4f4:	53 56 2e 52 75 6e 53 74 65 70 00 00 53 56 2e 52     SV.RunStep..SV.R
     504:	75 6e 52 61 74 65 00 00 53 56 2e 43 79 63 6c 65     unRate..SV.Cycle
     514:	00 00 00 00 53 56 2e 41 4d 50 6d 61 78 00 00 00     ....SV.AMPmax...
     524:	53 56 2e 44 65 66 61 75 6c 74 00 00                 SV.Default..

00000530 <ServoParamIndex>:
     530:	31 2f 39 00 00 32 2f 39 00 00 33 2f 39 00 00 34     1/9..2/9..3/9..4
     540:	2f 39 00 00 35 2f 39 00 00 36 2f 39 00 00 37 2f     /9..5/9..6/9..7/
     550:	39 00 00 38 2f 39 00 00 39 2f 39 00 00              9..8/9..9/9..

0000055d <ServoParamUnits>:
     55d:	75 53 65 63 00 00 00 75 53 65 63 00 00 00 75 53     uSec...uSec...uS
     56d:	65 63 00 00 00 75 53 65 63 00 00 00 75 53 65 63     ec...uSec...uSec
     57d:	00 00 00 53 2f 53 74 65 70 00 75 53 65 63 00 00     ...S/Step.uSec..
     58d:	00 56 00 00 00 00 00 00 00 00 00 00 00 00 00        .V.............

0000059c <FocusLocTab>:
     59c:	00 10 19                                            ...

0000059f <miniDDS_ROM>:
     59f:	00 e8 03 00 00 00 00 88 13 00 00 4c 1d 00 00 01     ...........L....
     5af:	01 00 00 00 00 00 00 00 dc 05 88 13 e8 03 d0 07     ................
     5bf:	dc 05 64 00 64 00 64 00 20 4e 88 13 e8 03 00 00     ..d.d.d. N......
     5cf:	a0 86 01 00 88 13 00 00 01 00 00 00 20 32           ............ 2

000005dd <DummyString1>:
     5dd:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

000005ed <DummyString2>:
     5ed:	5b 45 53 43 5d 20 74 6f 20 65 78 69 74 00 00 00     [ESC] to exit...

000005fd <DummyString3>:
     5fd:	41 55 54 4f 00                                      AUTO.

00000602 <EepromCheck>:
     602:	44 44 53 20 45 45 50 52 4f 4d 20 54 65 73 74 00     DDS EEPROM Test.

00000612 <Good>:
     612:	47 6f 6f 64 00                                      Good.

00000617 <Failed>:
     617:	46 61 69 6c 65 64 00                                Failed.

0000061e <TestSignal>:
     61e:	31 4b 48 7a 20 20 20 20 20 35 56 20 20 20 30 56     1KHz     5V   0V
     62e:	00 31 4b 48 7a 20 20 20 20 31 30 56 20 20 20 30     .1KHz    10V   0
     63e:	56 00 31 4b 48 7a 20 20 20 20 31 30 56 20 20 20     V.1KHz    10V   
     64e:	35 56 00 31 4b 48 7a 20 20 20 20 31 30 56 20 20     5V.1KHz    10V  
     65e:	2d 35 56 00 31 30 4b 48 7a 20 20 20 20 35 56 20     -5V.10KHz    5V 
     66e:	20 20 30 56 00 31 30 30 4b 48 7a 20 20 20 35 56       0V.100KHz   5V
     67e:	20 20 20 30 56 00 32 30 30 4b 48 7a 20 20 20 35        0V.200KHz   5
     68e:	56 20 20 20 30 56 00                                V   0V.

00000695 <TestSignalParam>:
     695:	e8 03 00 00 88 13 00 00 88 13 00 00 e8 03 00 00     ................
     6a5:	10 27 00 00 88 13 00 00 e8 03 00 00 10 27 00 00     .'...........'..
     6b5:	10 27 00 00 e8 03 00 00 10 27 00 00 00 00 00 00     .'.......'......
     6c5:	10 27 00 00 88 13 00 00 88 13 00 00 a0 86 01 00     .'..............
     6d5:	88 13 00 00 88 13 00 00 40 0d 03 00 88 13 00 00     ........@.......
     6e5:	88 13 00 00                                         ....

000006e9 <MfgID_coded>:
     6e9:	b5 a6 ba df ab 9a 9c 97 00                          .........

000006f2 <Web_coded>:
     6f2:	88 88 88 d1 95 86 9a 8b 9a 9c 97 d1 9c 90 92 00     ................

00000702 <MfgID_coded1>:
     702:	45 56 4a 2f 5b 6a 6c 67 2f 27 6c 26 3d 3f 3e 3d     EVJ/[jlg/'l&=?>=
     712:	00                                                  .

00000713 <Web_coded1>:
     713:	78 78 78 21 65 76 6a 7b 6a 6c 67 21 6c 60 62 00     xxx!evj{jlg!l`b.
     723:	00                                                  .

00000724 <__ctors_end>:
     724:	11 24       	eor	r1, r1
     726:	1f be       	out	0x3f, r1	; 63
     728:	cf ef       	ldi	r28, 0xFF	; 255
     72a:	d4 e0       	ldi	r29, 0x04	; 4
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	cd bf       	out	0x3d, r28	; 61

00000730 <__do_copy_data>:
     730:	11 e0       	ldi	r17, 0x01	; 1
     732:	a0 e0       	ldi	r26, 0x00	; 0
     734:	b1 e0       	ldi	r27, 0x01	; 1
     736:	e2 ec       	ldi	r30, 0xC2	; 194
     738:	ff e3       	ldi	r31, 0x3F	; 63
     73a:	02 c0       	rjmp	.+4      	; 0x740 <.do_copy_data_start>

0000073c <.do_copy_data_loop>:
     73c:	05 90       	lpm	r0, Z+
     73e:	0d 92       	st	X+, r0

00000740 <.do_copy_data_start>:
     740:	a4 32       	cpi	r26, 0x24	; 36
     742:	b1 07       	cpc	r27, r17
     744:	d9 f7       	brne	.-10     	; 0x73c <.do_copy_data_loop>

00000746 <__do_clear_bss>:
     746:	14 e0       	ldi	r17, 0x04	; 4
     748:	a4 e2       	ldi	r26, 0x24	; 36
     74a:	b1 e0       	ldi	r27, 0x01	; 1
     74c:	01 c0       	rjmp	.+2      	; 0x750 <.do_clear_bss_start>

0000074e <.do_clear_bss_loop>:
     74e:	1d 92       	st	X+, r1

00000750 <.do_clear_bss_start>:
     750:	ac 34       	cpi	r26, 0x4C	; 76
     752:	b1 07       	cpc	r27, r17
     754:	e1 f7       	brne	.-8      	; 0x74e <.do_clear_bss_loop>
     756:	0e 94 b1 03 	call	0x762	; 0x762 <main>
     75a:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <_exit>

0000075e <__bad_interrupt>:
     75e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000762 <main>:
PROGMEM	U8	Web[17] = {"www.jyetech.com "};
PROGMEM	U8	CRLF[4] = {"\r\n"};
PROGMEM	U8	Decor[17] = {"Signal Generator"};	

int	main (void)
{
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
 U8	tmp;
 U8 	*ptmp;
 
 Port_Init();
     76a:	0e 94 be 04 	call	0x97c	; 0x97c <Port_Init>

 // -- Initialize misc registers
 Misc_Init();
     76e:	0e 94 b6 04 	call	0x96c	; 0x96c <Misc_Init>

 LCD_Init();
     772:	0e 94 2d 07 	call	0xe5a	; 0xe5a <LCD_Init>
 
 // Display device
 FillDisp(0, 32, ' ');
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	60 e2       	ldi	r22, 0x20	; 32
     77a:	40 e2       	ldi	r20, 0x20	; 32
     77c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <FillDisp>
 PutStr_ROM(0, (U8 *)Device);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	68 e6       	ldi	r22, 0x68	; 104
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 PutStr_ROM(16, (U8 *)Decor);
     78a:	80 e1       	ldi	r24, 0x10	; 16
     78c:	6a eb       	ldi	r22, 0xBA	; 186
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 UpdateLCD('0');
     794:	80 e3       	ldi	r24, 0x30	; 48
     796:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>
 DelayDisp('u');
     79a:	85 e7       	ldi	r24, 0x75	; 117
     79c:	0e 94 23 08 	call	0x1046	; 0x1046 <DelayDisp>
 
 // -- Initialize Uart 0
// Uart0_Init();
 CommInit();
     7a0:	0e 94 b3 1b 	call	0x3766	; 0x3766 <CommInit>
 uputs_ROM((U8*)CRLF);
     7a4:	86 eb       	ldi	r24, 0xB6	; 182
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)Device);
     7ac:	88 e6       	ldi	r24, 0x68	; 104
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)CRLF);
     7b4:	86 eb       	ldi	r24, 0xB6	; 182
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)FWver);
     7bc:	87 e7       	ldi	r24, 0x77	; 119
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)CRLF);
     7c4:	86 eb       	ldi	r24, 0xB6	; 182
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)MfgID);
     7cc:	83 e9       	ldi	r24, 0x93	; 147
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)CRLF);
     7d4:	86 eb       	ldi	r24, 0xB6	; 182
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 uputs_ROM((U8*)Web);
     7dc:	85 ea       	ldi	r24, 0xA5	; 165
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 0b 05 	call	0xa16	; 0xa16 <uputs_ROM>
 
 Timer0_Init();
     7e4:	0e 94 2c 05 	call	0xa58	; 0xa58 <Timer0_Init>
// Timer1_Init();
 Timer2_Init();
     7e8:	0e 94 3a 05 	call	0xa74	; 0xa74 <Timer2_Init>
// Comp_Init();

// ExtIntr_Init();

 // Display Logo
 ClearDisp();
     7ec:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <ClearDisp>
 ptmp = (U8 *)DispBuf;
 *(ptmp + 32) = 0;
     7f0:	10 92 20 01 	sts	0x0120, r1
 *(ptmp + 33) = 0;
     7f4:	10 92 21 01 	sts	0x0121, r1
 *(ptmp + 34) = 0;
     7f8:	10 92 22 01 	sts	0x0122, r1
 tmp = EE_Read(EE_VendorID);
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
 if(tmp == 0xC2) {						// 0xC2 == ~0x3D ('=')
     804:	82 3c       	cpi	r24, 0xC2	; 194
     806:	91 f4       	brne	.+36     	; 0x82c <main+0xca>
     808:	c1 e8       	ldi	r28, 0x81	; 129
     80a:	d0 e0       	ldi	r29, 0x00	; 0
 	// Read vendor ID from EEPROM
	tmp = 0;
 	while(tmp < 32) {
		*ptmp++ = ~(EE_Read(EE_VendorID + 1 + tmp));
     80c:	ce 01       	movw	r24, r28
     80e:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
     812:	fe 01       	movw	r30, r28
     814:	e1 58       	subi	r30, 0x81	; 129
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 95       	com	r24
     81a:	80 83       	st	Z, r24
     81c:	21 96       	adiw	r28, 0x01	; 1
 *(ptmp + 34) = 0;
 tmp = EE_Read(EE_VendorID);
 if(tmp == 0xC2) {						// 0xC2 == ~0x3D ('=')
 	// Read vendor ID from EEPROM
	tmp = 0;
 	while(tmp < 32) {
     81e:	c1 3a       	cpi	r28, 0xA1	; 161
     820:	d1 05       	cpc	r29, r1
     822:	a1 f7       	brne	.-24     	; 0x80c <main+0xaa>
		*ptmp++ = ~(EE_Read(EE_VendorID + 1 + tmp));
		tmp++;
 		}
	*ptmp = 'l';
     824:	8c e6       	ldi	r24, 0x6C	; 108
     826:	80 93 20 01 	sts	0x0120, r24
     82a:	0a c0       	rjmp	.+20     	; 0x840 <main+0xde>
 	}
 else {
	// Display manufacturer ID
	PutStr_ROM_coded1(0, (U8 *)MfgID_coded1);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	62 e0       	ldi	r22, 0x02	; 2
     830:	77 e0       	ldi	r23, 0x07	; 7
     832:	0e 94 0e 1c 	call	0x381c	; 0x381c <PutStr_ROM_coded1>
//	PutStr_ROM(0, (U8 *)MfgID);
	PutStr_ROM_coded1(16, (U8 *)Web_coded1);
     836:	80 e1       	ldi	r24, 0x10	; 16
     838:	63 e1       	ldi	r22, 0x13	; 19
     83a:	77 e0       	ldi	r23, 0x07	; 7
     83c:	0e 94 0e 1c 	call	0x381c	; 0x381c <PutStr_ROM_coded1>
//	PutStr_ROM(16, (U8 *)Web);
 	}
 DispBuf[33] = UpdateLCD(DispBuf[32]);	// This set DispBuf[33] to 'z' if DispBuf[32] == 'l'
     840:	80 91 20 01 	lds	r24, 0x0120
     844:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>
     848:	80 93 21 01 	sts	0x0121, r24
 DispBuf[34] = DelayDisp(DispBuf[32]);		// This should set DispBuf[34] to 0
     84c:	80 91 20 01 	lds	r24, 0x0120
     850:	0e 94 23 08 	call	0x1046	; 0x1046 <DelayDisp>
     854:	80 93 22 01 	sts	0x0122, r24
 	}
 EE_Write(EE_UserWaveform + 255, 0x80);
*/

 // Display firmware versions
 ClearDisp();
     858:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <ClearDisp>
 PutStr_ROM(0, (U8 *)FWver);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	67 e7       	ldi	r22, 0x77	; 119
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 PutStr_ROM(16, (U8 *)DDSver);
     866:	80 e1       	ldi	r24, 0x10	; 16
     868:	67 e8       	ldi	r22, 0x87	; 135
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 // Send command to fetch DDS core version
 Strbuf[0] = KS_FetchDDSver;
     870:	8d e0       	ldi	r24, 0x0D	; 13
     872:	80 93 33 01 	sts	0x0133, r24
 SendBuf((U8*)Strbuf);
     876:	83 e3       	ldi	r24, 0x33	; 51
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>
 
 // Receive result (3 bytes)
 tmp = 0; 
 GTimer = 40000;
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	9c e9       	ldi	r25, 0x9C	; 156
     882:	90 93 31 01 	sts	0x0131, r25
     886:	80 93 30 01 	sts	0x0130, r24
     88a:	cb e1       	ldi	r28, 0x1B	; 27
     88c:	d0 e0       	ldi	r29, 0x00	; 0
	if(!BitTest8(COMM_RXD_Port, (1 << COMM_RXD_Bit))) {
		// Detected low at RXD Pin
		DispBuf[27 + tmp] = RecvByte();
//		u0putc(DispBuf[27 + tmp]);
		tmp++;
		GTimer = 40000;
     88e:	00 e4       	ldi	r16, 0x40	; 64
     890:	1c e9       	ldi	r17, 0x9C	; 156
     892:	10 c0       	rjmp	.+32     	; 0x8b4 <main+0x152>
 
 // Receive result (3 bytes)
 tmp = 0; 
 GTimer = 40000;
 while(GTimer) {
	if(!BitTest8(COMM_RXD_Port, (1 << COMM_RXD_Bit))) {
     894:	4a 99       	sbic	0x09, 2	; 9
     896:	0e c0       	rjmp	.+28     	; 0x8b4 <main+0x152>
		// Detected low at RXD Pin
		DispBuf[27 + tmp] = RecvByte();
     898:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <RecvByte>
     89c:	fe 01       	movw	r30, r28
     89e:	e0 50       	subi	r30, 0x00	; 0
     8a0:	ff 4f       	sbci	r31, 0xFF	; 255
     8a2:	80 83       	st	Z, r24
//		u0putc(DispBuf[27 + tmp]);
		tmp++;
		GTimer = 40000;
     8a4:	10 93 31 01 	sts	0x0131, r17
     8a8:	00 93 30 01 	sts	0x0130, r16
     8ac:	21 96       	adiw	r28, 0x01	; 1
		if(tmp > 2) {
     8ae:	ce 31       	cpi	r28, 0x1E	; 30
     8b0:	d1 05       	cpc	r29, r1
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <main+0x15e>
 SendBuf((U8*)Strbuf);
 
 // Receive result (3 bytes)
 tmp = 0; 
 GTimer = 40000;
 while(GTimer) {
     8b4:	80 91 30 01 	lds	r24, 0x0130
     8b8:	90 91 31 01 	lds	r25, 0x0131
     8bc:	89 2b       	or	r24, r25
     8be:	51 f7       	brne	.-44     	; 0x894 <main+0x132>
			}
		}
 	}
 
 // Display result
 UpdateLCD('A');
     8c0:	81 e4       	ldi	r24, 0x41	; 65
     8c2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>
 DelayDisp('w');
     8c6:	87 e7       	ldi	r24, 0x77	; 119
     8c8:	0e 94 23 08 	call	0x1046	; 0x1046 <DelayDisp>

 if((DispBuf[32] == 'l') && (DispBuf[33] == 'z') && (DispBuf[34] == 'm')) {
     8cc:	80 91 20 01 	lds	r24, 0x0120
     8d0:	8c 36       	cpi	r24, 0x6C	; 108
     8d2:	51 f4       	brne	.+20     	; 0x8e8 <main+0x186>
     8d4:	80 91 21 01 	lds	r24, 0x0121
     8d8:	8a 37       	cpi	r24, 0x7A	; 122
     8da:	31 f4       	brne	.+12     	; 0x8e8 <main+0x186>
     8dc:	80 91 22 01 	lds	r24, 0x0122
     8e0:	8d 36       	cpi	r24, 0x6D	; 109
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <main+0x186>
 	// Disable EE_counter
 	DispBuf[34] = 0;
     8e4:	10 92 22 01 	sts	0x0122, r1
 	Delay(200);
 	}
 */
 
 // Start application
 AppInit();
     8e8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <AppInit>
 
 sei();
     8ec:	78 94       	sei
			CurrFocus++;
			if(CurrFocus >= TestSignalMax) {
				CurrFocus = 0;
				}
			OutputTestSignal();
			GTimer = TestSignalDuration;
     8ee:	c0 e5       	ldi	r28, 0x50	; 80
     8f0:	d3 ec       	ldi	r29, 0xC3	; 195
 AppInit();
 
 sei();

 while(1) {	
 	if(BitTest8(KFlags, (1<<KScanRdy))) {
     8f2:	80 91 48 01 	lds	r24, 0x0148
     8f6:	86 ff       	sbrs	r24, 6
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <main+0x1a6>
//		BitSet8(PIND, (1<<PIND2));
		KeyScan();
     8fa:	0e 94 b8 05 	call	0xb70	; 0xb70 <KeyScan>
		BitClr8(KFlags, (1<<KScanRdy));
     8fe:	80 91 48 01 	lds	r24, 0x0148
     902:	8f 7b       	andi	r24, 0xBF	; 191
     904:	80 93 48 01 	sts	0x0148, r24
 		}

	// -- Key command processing
	if(KeyCode) {
     908:	80 91 29 01 	lds	r24, 0x0129
     90c:	88 23       	and	r24, r24
     90e:	11 f0       	breq	.+4      	; 0x914 <main+0x1b2>
		DoCmdProcessing();
     910:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DoCmdProcessing>
		}

	// Update test SIGNAL
	if((SysState.CurrState == KS_DiagDDS) && (CurrMode == 0)) {
     914:	80 91 5e 01 	lds	r24, 0x015E
     918:	8a 30       	cpi	r24, 0x0A	; 10
     91a:	c9 f4       	brne	.+50     	; 0x94e <main+0x1ec>
     91c:	80 91 ba 01 	lds	r24, 0x01BA
     920:	88 23       	and	r24, r24
     922:	a9 f4       	brne	.+42     	; 0x94e <main+0x1ec>
		if(GTimer == 0) {
     924:	80 91 30 01 	lds	r24, 0x0130
     928:	90 91 31 01 	lds	r25, 0x0131
     92c:	89 2b       	or	r24, r25
     92e:	79 f4       	brne	.+30     	; 0x94e <main+0x1ec>
			CurrFocus++;
     930:	80 91 b9 01 	lds	r24, 0x01B9
     934:	8f 5f       	subi	r24, 0xFF	; 255
     936:	80 93 b9 01 	sts	0x01B9, r24
			if(CurrFocus >= TestSignalMax) {
     93a:	87 30       	cpi	r24, 0x07	; 7
     93c:	10 f0       	brcs	.+4      	; 0x942 <main+0x1e0>
				CurrFocus = 0;
     93e:	10 92 b9 01 	sts	0x01B9, r1
				}
			OutputTestSignal();
     942:	0e 94 a9 1a 	call	0x3552	; 0x3552 <OutputTestSignal>
			GTimer = TestSignalDuration;
     946:	d0 93 31 01 	sts	0x0131, r29
     94a:	c0 93 30 01 	sts	0x0130, r28
			}
		}

	CommRx();
     94e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <CommRx>
	
	// Update LCD
	if(BitTest8(Flags, (1 << Flags_DispUpdate))) {
     952:	80 91 4d 01 	lds	r24, 0x014D
     956:	87 ff       	sbrs	r24, 7
     958:	cc cf       	rjmp	.-104    	; 0x8f2 <main+0x190>
		BitClr8(Flags, (1 << Flags_DispUpdate));
     95a:	80 91 4d 01 	lds	r24, 0x014D
     95e:	8f 77       	andi	r24, 0x7F	; 127
     960:	80 93 4d 01 	sts	0x014D, r24
		UpdateLCD(',');
     964:	8c e2       	ldi	r24, 0x2C	; 44
     966:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>
     96a:	c3 cf       	rjmp	.-122    	; 0x8f2 <main+0x190>

0000096c <Misc_Init>:
// MCU Control Register - MCUCR
//	PUD:	1 = Disable port pull-up globally, 0 = enable port pull-up. [MCUCR.4 = 0]
//	IVSEL:	
//	IVCE:	
//
 MCUCR = (0<<PUD)|(0<<IVSEL)|(0<<IVCE);		
     96c:	15 be       	out	0x35, r1	; 53
//					0101 = 1/32
//					0110 = 1/64
//					0111 = 1/128
//					1000 = 1/256
//					1001-1111 = Reserved
 CLKPR = (1<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);
     96e:	e1 e6       	ldi	r30, 0x61	; 97
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 e8       	ldi	r24, 0x80	; 128
     974:	80 83       	st	Z, r24
 CLKPR = (0<<CLKPCE)|(0<<CLKPS3)|(0<<CLKPS2)|(0<<CLKPS1)|(0<<CLKPS0);
     976:	10 82       	st	Z, r1

 // TSM: 			Timer/Counter Synchronization Mode
 // PSRASY:		Prescaler Reset Timer/Counter2
 // PSRSYNC: 	Prescaler Reset
 GTCCR = (0<<TSM)|(0<<PSRASY)|(0<<PSRSYNC);
     978:	13 bc       	out	0x23, r1	; 35
}
     97a:	08 95       	ret

0000097c <Port_Init>:
 // PB4: 	Output, LCD DB6
 // PB3: 	Output, LCD DB5
 // PB2:	Output, LCD DB4
 // PB1: 	Output, LCD RS	
 // PB0:	Output, LCD EN
 PORTB = 
     97c:	8e ef       	ldi	r24, 0xFE	; 254
     97e:	85 b9       	out	0x05, r24	; 5
 	(1<<PB7)|(1<<PB6)|(1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(0<<PB0);
 DDRB = 
     980:	8f e3       	ldi	r24, 0x3F	; 63
     982:	84 b9       	out	0x04, r24	; 4
 // PC4:	Input, KeyIn ROW4
 // PC3:	Input, KeyIn ROW3
 // PC2:	Input, KeyIn ROW2
 // PC1:	Input, KeyIn ROW1
 // PC0:	Input, KeyIn ROW0
 PORTC = 
     984:	8f e1       	ldi	r24, 0x1F	; 31
     986:	88 b9       	out	0x08, r24	; 8
 	(0<<PC6)|(0<<PC5)|(1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);
 DDRC = 
     988:	80 e2       	ldi	r24, 0x20	; 32
     98a:	87 b9       	out	0x07, r24	; 7
 // PD4: 	Output, KeyDrive COL0
 // PD3: 	Output, serial connectiong to DDS MCU
 // PD2:  Output, DDS communication
 // PD1:	
 // PD0:
 PORTD = (1<<PD7)|(1<<PD6)|(1<<PD5)|(1<<PD4)
     98c:	8d ef       	ldi	r24, 0xFD	; 253
     98e:	8b b9       	out	0x0b, r24	; 11
 		|(1<<PD3)|(1<<PD2)|(0<<PD1)|(1<<PD0);
 DDRD = 
     990:	8c ef       	ldi	r24, 0xFC	; 252
     992:	8a b9       	out	0x0a, r24	; 10
 	  (1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)
 	|(1<<DDD3)|(1<<DDD2)|(0<<DDD1)|(0<<DDD0);

}
     994:	08 95       	ret

00000996 <ExtIntr_Init>:
 //					00 = The low level of INT1/INT0 generates an interrupt request.
 //					01 = Any logical change on INT1/INT0 generates an interrupt request.
 //					10 = The falling edge of INT1/INT0 generates an interrupt request.
 //					11 = The rising edge of INT1/INT0 generates an interrupt request.
 //
 EICRA = (0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00);
     996:	10 92 69 00 	sts	0x0069, r1

 // EIMSK - External Interrupt Mask Register
 //	INT1: 	External Interrupt Request 1 Enable, 1 = enable
 //	INT0: 	External Interrupt Request 0 Enable, 1 = enable
 //
 EIMSK = (0<<INT1)|(0<<INT0);
     99a:	1d ba       	out	0x1d, r1	; 29

 // EIFR - External Interrupt Flag
 //	INTF1: 	External Interrupt Flag 1
 //	INTF0: 	External Interrupt Flag 0
 EIFR = (1<<INTF1)|(1<<INTF0);
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	8c bb       	out	0x1c, r24	; 28
 // PCICR - Pin Change Interrupt Control Register
 //	PCIE2: 	Pin Change Interrupt Enable 2, 1 = enable PCINT[23:16] interrupt
 //	PCIE1: 	Pin Change Interrupt Enable 1, 1 = enable PCINT[14:8] interrupt
 //	PCIE0:	 Pin Change Interrupt Enable 0, 1 = enable PCINT[7:0] interrupt
 //
 PCICR = (0<<PCIE2)|(0<<PCIE1)|(0<<PCIE0);
     9a0:	10 92 68 00 	sts	0x0068, r1

 // PCIFR - Pin Change Interrupt Flag Register
 //	PCIF2: 	Pin Change Interrupt Flag 2
 //	PCIF1: 	Pin Change Interrupt Flag 1
 //	PCIF0: 	Pin Change Interrupt Flag 0
 PCIFR = (1<<PCIF2)|(1<<PCIF1)|(1<<PCIF0);
     9a4:	87 e0       	ldi	r24, 0x07	; 7
     9a6:	8b bb       	out	0x1b, r24	; 27

 // PCMSK2 - Pin Change Mask Register 2 
 PCMSK2 = (0<<PCINT23)|(0<<PCINT22)|(0<<PCINT21)|(0<<PCINT20)
     9a8:	10 92 6d 00 	sts	0x006D, r1
 		|(0<<PCINT19)|(0<<PCINT18)|(0<<PCINT17)|(0<<PCINT16);

 // PCMSK1 - Pin Change Mask Register 1 
 PCMSK1 = (0<<PCINT14)|(0<<PCINT13)|(0<<PCINT12)|(0<<PCINT11)
     9ac:	10 92 6c 00 	sts	0x006C, r1
 		|(0<<PCINT10)|(0<<PCINT9)|(0<<PCINT8);

 // PCMSK0 - Pin Change Mask Register 0 
 PCMSK0 = (0<<PCINT7)|(0<<PCINT6)|(0<<PCINT5)|(0<<PCINT4)
     9b0:	10 92 6b 00 	sts	0x006B, r1
 		|(0<<PCINT3)|(0<<PCINT2)|(0<<PCINT1)|(0<<PCINT0);
 
}
     9b4:	08 95       	ret

000009b6 <Uart0_Init>:
 //	UPE0:	1 = USART Parity Error [UCSR0A.2]
 //	U2X0:	1 = Double USART transmission speed (for asynchronous only) [UCSR0A.1 = 0]
 //	MPCM0:	1 = Multiprocessor Communication Mode [UCSR0A.0 = 0]
 //
 // UCSR0A defaults are all bits zero.
 UCSR0A = (0<<TXC0)|(0<<U2X0)|(0<<MPCM0);
     9b6:	10 92 c0 00 	sts	0x00C0, r1
 //
 // UCSR0B defaults are all bits zero.

 // -- Enable receiver
 // -- Enable transmitter
 UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)
     9ba:	88 e1       	ldi	r24, 0x18	; 24
     9bc:	80 93 c1 00 	sts	0x00C1, r24
 //				110 = Reserved
 //				111 = 9-bit
 //	UCPOL0:	Clock pority, for synchronous mode only [UCSR0C.0] (See datasheet)
 //
 // -- Select 8N1 format
 UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)
     9c0:	86 e0       	ldi	r24, 0x06	; 6
     9c2:	80 93 c2 00 	sts	0x00C2, r24
 		  |(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);

// Setup baudrate
 UBRR0H = (((F_CPU / 16) / Uart0_Baud) - 1) >> 8;
     9c6:	10 92 c5 00 	sts	0x00C5, r1
 UBRR0L = (((F_CPU / 16) / Uart0_Baud) - 1) & 0x00FF;
     9ca:	8f e1       	ldi	r24, 0x1F	; 31
     9cc:	80 93 c4 00 	sts	0x00C4, r24
 
}
     9d0:	08 95       	ret

000009d2 <u0putc>:
//-----------------------------------------------------------------------------
// Output one byte to Uart 0 - polling method
//-----------------------------------------------------------------------------
//
void	u0putc(U8 ch)
{
     9d2:	98 2f       	mov	r25, r24
 while(!BitTest8(UCSR0A, (1<<UDRE0))) {
     9d4:	80 91 c0 00 	lds	r24, 0x00C0
     9d8:	85 ff       	sbrs	r24, 5
     9da:	fc cf       	rjmp	.-8      	; 0x9d4 <u0putc+0x2>
 	}
 UDR0 = ch;
     9dc:	90 93 c6 00 	sts	0x00C6, r25
}
     9e0:	08 95       	ret

000009e2 <u0getc>:
// Receive one byte from Uart 0 - polling method
//-----------------------------------------------------------------------------
//
U8	u0getc(void)
{
 while(!BitTest8(UCSR0A, (1<<RXC0))) {
     9e2:	80 91 c0 00 	lds	r24, 0x00C0
     9e6:	87 ff       	sbrs	r24, 7
     9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <u0getc>
 	}
 return (UDR0);
     9ea:	80 91 c6 00 	lds	r24, 0x00C6
}
     9ee:	08 95       	ret

000009f0 <u0rcheck>:
//	Return 1 if received data ready, otherwise return 0.
//-----------------------------------------------------------------------------
//
U8	u0rcheck(void)
{
 if(BitTest8(UCSR0A, (1<<RXC0))) {
     9f0:	80 91 c0 00 	lds	r24, 0x00C0
 	return 1;
 	}
 return 0;
}
     9f4:	88 1f       	adc	r24, r24
     9f6:	88 27       	eor	r24, r24
     9f8:	88 1f       	adc	r24, r24
     9fa:	08 95       	ret

000009fc <uputs>:
//-----------------------------------------------------------------------------
// Output zero terminated string to Uart 0 - polling method
//-----------------------------------------------------------------------------
//
void	uputs(U8 *s)
{
     9fc:	fc 01       	movw	r30, r24
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <uputs+0x12>
// Output one byte to Uart 0 - polling method
//-----------------------------------------------------------------------------
//
void	u0putc(U8 ch)
{
 while(!BitTest8(UCSR0A, (1<<UDRE0))) {
     a00:	80 91 c0 00 	lds	r24, 0x00C0
     a04:	85 ff       	sbrs	r24, 5
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <uputs+0x4>
 	}
 UDR0 = ch;
     a08:	90 93 c6 00 	sts	0x00C6, r25
//
void	uputs(U8 *s)
{
 while(*s != 0) {
 	u0putc(*s);
	s++;
     a0c:	31 96       	adiw	r30, 0x01	; 1
// Output zero terminated string to Uart 0 - polling method
//-----------------------------------------------------------------------------
//
void	uputs(U8 *s)
{
 while(*s != 0) {
     a0e:	90 81       	ld	r25, Z
     a10:	99 23       	and	r25, r25
     a12:	b1 f7       	brne	.-20     	; 0xa00 <uputs+0x4>
 	u0putc(*s);
	s++;
 	}
}
     a14:	08 95       	ret

00000a16 <uputs_ROM>:

// Outptu a ROM string
void	uputs_ROM(U8 *s)
{
     a16:	fc 01       	movw	r30, r24
     a18:	07 c0       	rjmp	.+14     	; 0xa28 <uputs_ROM+0x12>
// Output one byte to Uart 0 - polling method
//-----------------------------------------------------------------------------
//
void	u0putc(U8 ch)
{
 while(!BitTest8(UCSR0A, (1<<UDRE0))) {
     a1a:	80 91 c0 00 	lds	r24, 0x00C0
     a1e:	85 ff       	sbrs	r24, 5
     a20:	fc cf       	rjmp	.-8      	; 0xa1a <uputs_ROM+0x4>
 	}
 UDR0 = ch;
     a22:	90 93 c6 00 	sts	0x00C6, r25
{
 U8	tmp;

 while((tmp = pgm_read_byte(s))) {
 	u0putc(tmp);
	s++;
     a26:	31 96       	adiw	r30, 0x01	; 1
// Outptu a ROM string
void	uputs_ROM(U8 *s)
{
 U8	tmp;

 while((tmp = pgm_read_byte(s))) {
     a28:	94 91       	lpm	r25, Z+
     a2a:	99 23       	and	r25, r25
     a2c:	b1 f7       	brne	.-20     	; 0xa1a <uputs_ROM+0x4>
 	u0putc(tmp);
	s++;
//	tmp = pgm_read_byte(s);
 	}
}
     a2e:	08 95       	ret

00000a30 <Comp_Init>:
 //					00 - Comparator Interrupt on Output Toggle.
 //					01 - Reserved
 //					10 - Comparator Interrupt on Falling Output Edge.
 //					11 - Comparator Interrupt on Rising Output Edge.
 //
 ACSR = (0<<ACD)|(0<<ACBG)|(0<<ACI)
     a30:	87 e0       	ldi	r24, 0x07	; 7
     a32:	80 bf       	out	0x30, r24	; 48
 		|(0<<ACIE)|(1<<ACIC)|(1<<ACIS1)|(1<<ACIS0);

 // AIN1D, AIN0D:	AIN1, AIN0 Digital Input Disable
 //
 // -- Disable AIN0 digital input
 DIDR1 = (0<<AIN1D)|(1<<AIN0D);
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 7f 00 	sts	0x007F, r24
}
     a3a:	08 95       	ret

00000a3c <ADC_Init>:
 //					1000 - 1101 = Reserved
 //					1110 = 1.1V (internal reference)
 //					1111 = 0V (GND)
 //
 // -- Select channel ADC7
 ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR)
     a3c:	85 e4       	ldi	r24, 0x45	; 69
     a3e:	80 93 7c 00 	sts	0x007C, r24
 //				110 = 1/64
 //				111 = 1/128
 // 
 // -- Enable ADC
 // -- Set ADC clock to 1/32 of F_CPU, about 8000000/32 = 250KHz
 ADCSRA = (0<<ADEN)|(0<<ADSC)|(0<<ADATE)|(1<<ADIF)
     a42:	85 e1       	ldi	r24, 0x15	; 21
     a44:	80 93 7a 00 	sts	0x007A, r24
 //				100 = Timer/Counter 0 overflow
 //				101 = Timer/Counter 1 compare match B
 //				110 = Timer/Counter 1 overflow
 //				111 = Timer/Counter 1 capture event
 
 ADCSRB= (1<<ACME)|(0<<ADTS2)|(0<<ADTS1)|(0<<ADTS0);
     a48:	80 e4       	ldi	r24, 0x40	; 64
     a4a:	80 93 7b 00 	sts	0x007B, r24

 // ADC[5:0]D: 	Digital Input Disable [ADC[5:0]D = 000000]
 DIDR0 = (1<<ADC5D)|(1<<ADC4D)|(0<<ADC3D)|(0<<ADC2D)
     a4e:	80 e3       	ldi	r24, 0x30	; 48
     a50:	80 93 7e 00 	sts	0x007E, r24
 		|(0<<ADC1D)|(0<<ADC0D);
 
}
     a54:	08 95       	ret

00000a56 <VREF_Init>:
//-----------------------------------------------------------------------------
//
void	VREF_Init(void)
{

}
     a56:	08 95       	ret

00000a58 <Timer0_Init>:
 //				7		111			Fast PWM		OCRA	TOP				TOP
 //				(MAX = 0xFF, BOTTOM = 0x00)
 //
 // -- Set Timer0 to fast PWM mode
 // -- Output at OC0A
 TCCR0A = (1<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)
     a58:	83 e8       	ldi	r24, 0x83	; 131
     a5a:	84 bd       	out	0x24, r24	; 36
 //					101 = clkio/1024 (From prescaler)
 //					110 = External clock source on T0 pin. Clock on falling edge
 //					111 = External clock source on T0 pin. Clock on rising edge
 //
 // -- No pre-scaler
 TCCR0B = (0<<FOC0A)|(0<<FOC0B)|(0<<WGM02)|(0<<CS02)|(0<<CS01)|(1<<CS00);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	85 bd       	out	0x25, r24	; 37

 TCNT0 = 0x00;
     a60:	16 bc       	out	0x26, r1	; 38
 OCR0A = 0xC0;  // Initial setting
     a62:	80 ec       	ldi	r24, 0xC0	; 192
     a64:	87 bd       	out	0x27, r24	; 39
 OCR0B = 0xff;
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	88 bd       	out	0x28, r24	; 40

 // OCIE0B: 	Timer/Counter0 Output Compare Match B Interrupt Enable
 // OCIE0A: 	Timer/Counter0 Output Compare Match A Interrupt Enable
 // TOIE0: 	Timer/Counter0 Overflow Interrupt Enable
 //
 TIMSK0 = (0<<OCIE0B)|(0<<OCIE0A)|(0<<TOIE0);
     a6a:	10 92 6e 00 	sts	0x006E, r1

 // OCF0B: 	Timer/Counter 0 Output Compare B Match Flag
 // OCF0A: 	Timer/Counter 0 Output Compare A Match Flag
 // TOV0: 	Timer/Counter0 Overflow Flag
 TIFR0 = (1<<OCF0B)|(1<<OCF0A)|(1<<TOV0);
     a6e:	87 e0       	ldi	r24, 0x07	; 7
     a70:	85 bb       	out	0x15, r24	; 21

}
     a72:	08 95       	ret

00000a74 <Timer2_Init>:
 //				6		110			Reserved		-		-				-
 //				7		111			Fast PWM		OCRA	TOP				TOP
 //				(MAX = 0xFF, BOTTOM = 0x00)
 //
 // -- Set Timer2 to CTC mode
 TCCR2A = (0<<COM2A1)|(0<<COM2A0)|(0<<COM2B1)|(0<<COM2B0)
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	90 93 b0 00 	sts	0x00B0, r25
 //					101 = clkT2s/128 (From prescaler)
 //					110 = clkT2s/256 (From prescaler)
 //					111 = clkT2s/1024 (From prescaler)
 //
 // -- 1/64 prescaler. 3.2 us period @ 20MHz system clock
 TCCR2B = (0<<FOC2A)|(0<<FOC2B)|(0<<WGM22)|(1<<CS22)|(0<<CS21)|(0<<CS20);
     a7a:	84 e0       	ldi	r24, 0x04	; 4
     a7c:	80 93 b1 00 	sts	0x00B1, r24

 TCNT2 = 0x00;
     a80:	10 92 b2 00 	sts	0x00B2, r1
 OCR2A = 32;  // about 100us interval for keypad scanning
     a84:	80 e2       	ldi	r24, 0x20	; 32
     a86:	80 93 b3 00 	sts	0x00B3, r24
 OCR2B = 0x60;
     a8a:	80 e6       	ldi	r24, 0x60	; 96
     a8c:	80 93 b4 00 	sts	0x00B4, r24
 // OCIE2B: 	Timer/Counter2 Output Compare Match B Interrupt Enable
 // OCIE2A: 	Timer/Counter2 Output Compare Match A Interrupt Enable
 // TOIE2: 	Timer/Counter2 Overflow Interrupt Enable
 //
 // -- Enable OC2A interrupt
 TIMSK2 = (0<<OCIE2B)|(1<<OCIE2A)|(0<<TOIE2);
     a90:	90 93 70 00 	sts	0x0070, r25

 // OCF2B: 	Timer/Counter 2 Output Compare B Match Flag
 // OCF2A: 	Timer/Counter 2 Output Compare A Match Flag
 // TOV2: 	Timer/Counter 2 Overflow Flag
 TIFR2 = (1<<OCF2B)|(1<<OCF2A)|(1<<TOV2);
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	87 bb       	out	0x17, r24	; 23

 // EXCLK: 	Enable External Clock Input, 1 = enable external clock in Asynchronous Mode
 // AS2: 		Asynchronous Timer/Counter2, 0 - T2 clocked with clkio, 1 = ext. clock (TOSC1)
 ASSR = (0<<EXCLK)|(0<<AS2);
     a98:	10 92 b6 00 	sts	0x00B6, r1
 
}
     a9c:	08 95       	ret

00000a9e <__vector_7>:
//-----------------------------------------------------------------------------
// Interrupt Service Routines
//-----------------------------------------------------------------------------
// Timer0 overflow ISR
SIGNAL(SIG_OUTPUT_COMPARE2A)
{
     a9e:	1f 92       	push	r1
     aa0:	0f 92       	push	r0
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	0f 92       	push	r0
     aa6:	11 24       	eor	r1, r1
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25

 BitSet8(KFlags, (1<<KScanRdy));
     aac:	80 91 48 01 	lds	r24, 0x0148
     ab0:	80 64       	ori	r24, 0x40	; 64
     ab2:	80 93 48 01 	sts	0x0148, r24

 if(GTimer > 0) {
     ab6:	80 91 30 01 	lds	r24, 0x0130
     aba:	90 91 31 01 	lds	r25, 0x0131
     abe:	89 2b       	or	r24, r25
     ac0:	49 f0       	breq	.+18     	; 0xad4 <__vector_7+0x36>
 	GTimer--;
     ac2:	80 91 30 01 	lds	r24, 0x0130
     ac6:	90 91 31 01 	lds	r25, 0x0131
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	90 93 31 01 	sts	0x0131, r25
     ad0:	80 93 30 01 	sts	0x0130, r24
 	}
}
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <ClrDispBuf>:
 	}
 return tmp0;
}

void	ClrDispBuf(void)
{
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
 U8 	tmp0;

 tmp0 = 0;
 while(tmp0 < 32) {
 	DispBuf[tmp0] = ' ';
     ae6:	20 e2       	ldi	r18, 0x20	; 32
     ae8:	fc 01       	movw	r30, r24
     aea:	e0 50       	subi	r30, 0x00	; 0
     aec:	ff 4f       	sbci	r31, 0xFF	; 255
     aee:	20 83       	st	Z, r18
     af0:	01 96       	adiw	r24, 0x01	; 1
void	ClrDispBuf(void)
{
 U8 	tmp0;

 tmp0 = 0;
 while(tmp0 < 32) {
     af2:	80 32       	cpi	r24, 0x20	; 32
     af4:	91 05       	cpc	r25, r1
     af6:	c1 f7       	brne	.-16     	; 0xae8 <ClrDispBuf+0x6>
 	DispBuf[tmp0] = ' ';
	tmp0++;
 	}
}
     af8:	08 95       	ret

00000afa <UpdateOfs>:
*/

void UpdateOfs(U32 new_ofs)
{

 OCR0A = 0xFF - (new_ofs * 255)/OFSmax;
     afa:	2f ef       	ldi	r18, 0xFF	; 255
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
     b06:	20 e1       	ldi	r18, 0x10	; 16
     b08:	37 e2       	ldi	r19, 0x27	; 39
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
     b12:	20 95       	com	r18
     b14:	27 bd       	out	0x27, r18	; 39
  
}
     b16:	08 95       	ret

00000b18 <EE_Read>:
// EEPROM operations
//
U8 EE_Read(U16 uiAddress)
{
 /* Wait for completion of previous write */
 while(EECR & (1<<EEPE));
     b18:	f9 99       	sbic	0x1f, 1	; 31
     b1a:	fe cf       	rjmp	.-4      	; 0xb18 <EE_Read>

 /* Set up address register */
 EEARL= uiAddress;
     b1c:	81 bd       	out	0x21, r24	; 33
 EEARH = uiAddress>>8;
     b1e:	92 bd       	out	0x22, r25	; 34

 /* Start eeprom read by writing EERE */
 EECR |= (1<<EERE);
     b20:	f8 9a       	sbi	0x1f, 0	; 31
 /* Return data from Data Register */
 return EEDR;
     b22:	80 b5       	in	r24, 0x20	; 32
}
     b24:	08 95       	ret

00000b26 <EE_Write>:

void EE_Write(U16 uiAddress, U8 ucData)
{
 /* Wait for completion of previous write */
 while(EECR & (1<<EEPE));
     b26:	f9 99       	sbic	0x1f, 1	; 31
     b28:	fe cf       	rjmp	.-4      	; 0xb26 <EE_Write>

 /* Set up address and Data Registers */
 EEARL= uiAddress;
     b2a:	81 bd       	out	0x21, r24	; 33
 EEARH = uiAddress>>8;
     b2c:	92 bd       	out	0x22, r25	; 34
 EEDR = ucData;
     b2e:	60 bd       	out	0x20, r22	; 32

 cli();
     b30:	f8 94       	cli
 
 /* Write logical one to EEMPE */
 EECR |= (1<<EEMPE);
     b32:	fa 9a       	sbi	0x1f, 2	; 31
 /* Start eeprom write by setting EEPE */
 EECR |= (1<<EEPE);
     b34:	f9 9a       	sbi	0x1f, 1	; 31

 sei();
     b36:	78 94       	sei
}
     b38:	08 95       	ret

00000b3a <KeyConvert>:
	}

 }

void	KeyConvert(KeyScanCode *KSCTab, U16 KSCode)
{
     b3a:	dc 01       	movw	r26, r24
     b3c:	40 e0       	ldi	r20, 0x00	; 0
 U8	tmp0;
 U16 tmp1;
 
 tmp0 = 0;
 while(tmp0 < KC_Max) {
 	tmp1 = pgm_read_word((U16 *)(KSCTab + 0));
     b3e:	fd 01       	movw	r30, r26
     b40:	85 91       	lpm	r24, Z+
     b42:	94 91       	lpm	r25, Z+
	if(tmp1 == KSCode) {
     b44:	86 17       	cp	r24, r22
     b46:	97 07       	cpc	r25, r23
     b48:	69 f4       	brne	.+26     	; 0xb64 <KeyConvert+0x2a>
		// -- Match found
		KeyCode = pgm_read_byte((U8 *)KSCTab + 2);
     b4a:	12 96       	adiw	r26, 0x02	; 2
     b4c:	fd 01       	movw	r30, r26
     b4e:	84 91       	lpm	r24, Z+
     b50:	80 93 29 01 	sts	0x0129, r24
		KeyCodeBuf = KeyCode;
     b54:	80 93 2b 01 	sts	0x012B, r24
		KeyParam = pgm_read_byte((U8 *)KSCTab + 3);
     b58:	11 96       	adiw	r26, 0x01	; 1
     b5a:	fd 01       	movw	r30, r26
     b5c:	84 91       	lpm	r24, Z+
     b5e:	80 93 26 01 	sts	0x0126, r24
     b62:	08 95       	ret
		return;
		}
	else {
		// -- Proceed to next entry
		KSCTab = (KeyScanCode *)((U8 *)KSCTab + 4);
		tmp0++;
     b64:	4f 5f       	subi	r20, 0xFF	; 255
{
 U8	tmp0;
 U16 tmp1;
 
 tmp0 = 0;
 while(tmp0 < KC_Max) {
     b66:	49 31       	cpi	r20, 0x19	; 25
     b68:	11 f0       	breq	.+4      	; 0xb6e <KeyConvert+0x34>
		KeyParam = pgm_read_byte((U8 *)KSCTab + 3);
		return;
		}
	else {
		// -- Proceed to next entry
		KSCTab = (KeyScanCode *)((U8 *)KSCTab + 4);
     b6a:	14 96       	adiw	r26, 0x04	; 4
     b6c:	e8 cf       	rjmp	.-48     	; 0xb3e <KeyConvert+0x4>
     b6e:	08 95       	ret

00000b70 <KeyScan>:
 sei();
}


void KeyScan(void)
{
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
 U8	tmp0, tmp1;
 
 // Scan
 tmp0 = 0xDF;
 KScanBuf = NoKey;
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	90 93 25 01 	sts	0x0125, r25
     b82:	80 93 24 01 	sts	0x0124, r24
     b86:	8f ed       	ldi	r24, 0xDF	; 223
     b88:	f8 2e       	mov	r15, r24
     b8a:	00 e0       	ldi	r16, 0x00	; 0
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	23 c0       	rjmp	.+70     	; 0xbd6 <KeyScan+0x66>
 while(BitTest8(tmp0, 0x01)) {
	KeyDrive_Port = (tmp0 & KeyDrive_Bits) | (KeyDrive_Port & (~KeyDrive_Bits));
     b90:	85 b1       	in	r24, 0x05	; 5
     b92:	9f 2d       	mov	r25, r15
     b94:	9e 73       	andi	r25, 0x3E	; 62
     b96:	81 7c       	andi	r24, 0xC1	; 193
     b98:	98 2b       	or	r25, r24
     b9a:	95 b9       	out	0x05, r25	; 5
	Delay(20);
     b9c:	84 e1       	ldi	r24, 0x14	; 20
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
	// Read keypad input
	tmp1 = (KeyIn_Port & KeyIn_Bits);
     ba4:	86 b1       	in	r24, 0x06	; 6
     ba6:	8f 70       	andi	r24, 0x0F	; 15
	if(tmp1 != KeyIn_Bits) {
     ba8:	8f 30       	cpi	r24, 0x0F	; 15
     baa:	81 f0       	breq	.+32     	; 0xbcc <KeyScan+0x5c>
		KScanBuf &= (((U16)tmp0  << 8) |(((U16)tmp1 | (~KeyIn_Bits)) & 0x00FF));
     bac:	20 91 24 01 	lds	r18, 0x0124
     bb0:	30 91 25 01 	lds	r19, 0x0125
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	80 6f       	ori	r24, 0xF0	; 240
     bb8:	df 2d       	mov	r29, r15
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	8c 2b       	or	r24, r28
     bbe:	9d 2b       	or	r25, r29
     bc0:	82 23       	and	r24, r18
     bc2:	93 23       	and	r25, r19
     bc4:	90 93 25 01 	sts	0x0125, r25
     bc8:	80 93 24 01 	sts	0x0124, r24
		}
	tmp0 >>= 1;
     bcc:	f6 94       	lsr	r15
	tmp0 |= 0x80;
     bce:	20 e8       	ldi	r18, 0x80	; 128
     bd0:	f2 2a       	or	r15, r18
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 U8	tmp0, tmp1;
 
 // Scan
 tmp0 = 0xDF;
 KScanBuf = NoKey;
 while(BitTest8(tmp0, 0x01)) {
     bd6:	05 30       	cpi	r16, 0x05	; 5
     bd8:	11 05       	cpc	r17, r1
     bda:	d1 f6       	brne	.-76     	; 0xb90 <KeyScan+0x20>
		KScanBuf &= (((U16)tmp0  << 8) |(((U16)tmp1 | (~KeyIn_Bits)) & 0x00FF));
		}
	tmp0 >>= 1;
	tmp0 |= 0x80;
 	}
 KeyDrive_Port |= KeyDrive_Bits;
     bdc:	85 b1       	in	r24, 0x05	; 5
     bde:	8e 63       	ori	r24, 0x3E	; 62
     be0:	85 b9       	out	0x05, r24	; 5

 // Read SW22
 KeyDrive_Port1 = (KeyDrive_Port1 & (~KeyDrive_Bits1));
     be2:	5b 98       	cbi	0x0b, 3	; 11
 Delay(20);
     be4:	84 e1       	ldi	r24, 0x14	; 20
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
 tmp1 = (KeyIn_Port & KeyIn_Bits);
     bec:	16 b1       	in	r17, 0x06	; 6
     bee:	1f 70       	andi	r17, 0x0F	; 15
 if(tmp1 != KeyIn_Bits) {
     bf0:	1f 30       	cpi	r17, 0x0F	; 15
     bf2:	71 f0       	breq	.+28     	; 0xc10 <KeyScan+0xa0>
	KScanBuf &= ((0xFE00) |(((U16)tmp1 | (~KeyIn_Bits)) & 0x00FF));
     bf4:	20 91 24 01 	lds	r18, 0x0124
     bf8:	30 91 25 01 	lds	r19, 0x0125
     bfc:	81 2f       	mov	r24, r17
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	80 6f       	ori	r24, 0xF0	; 240
     c02:	9e 6f       	ori	r25, 0xFE	; 254
     c04:	82 23       	and	r24, r18
     c06:	93 23       	and	r25, r19
     c08:	90 93 25 01 	sts	0x0125, r25
     c0c:	80 93 24 01 	sts	0x0124, r24
	}
 KeyDrive_Port1 |= KeyDrive_Bits1;
     c10:	5b 9a       	sbi	0x0b, 3	; 11
 
 // -- Debouncing
 if((KScanBuf == NoKey) || (KScanBuf != KScan)) {
     c12:	80 91 24 01 	lds	r24, 0x0124
     c16:	90 91 25 01 	lds	r25, 0x0125
     c1a:	8f 5f       	subi	r24, 0xFF	; 255
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	59 f0       	breq	.+22     	; 0xc36 <KeyScan+0xc6>
     c20:	60 91 24 01 	lds	r22, 0x0124
     c24:	70 91 25 01 	lds	r23, 0x0125
     c28:	80 91 2d 01 	lds	r24, 0x012D
     c2c:	90 91 2e 01 	lds	r25, 0x012E
     c30:	68 17       	cp	r22, r24
     c32:	79 07       	cpc	r23, r25
     c34:	81 f0       	breq	.+32     	; 0xc56 <KeyScan+0xe6>
 	KScan = KScanBuf;
     c36:	80 91 24 01 	lds	r24, 0x0124
     c3a:	90 91 25 01 	lds	r25, 0x0125
     c3e:	90 93 2e 01 	sts	0x012E, r25
     c42:	80 93 2d 01 	sts	0x012D, r24
	KCount = 0;
     c46:	10 92 49 01 	sts	0x0149, r1
	KHCount = 0;
     c4a:	10 92 47 01 	sts	0x0147, r1
	KTimeChk = KH_val;
     c4e:	82 e3       	ldi	r24, 0x32	; 50
     c50:	80 93 28 01 	sts	0x0128, r24
     c54:	1c c0       	rjmp	.+56     	; 0xc8e <KeyScan+0x11e>
 	}
 else {
	KCount++;
     c56:	80 91 49 01 	lds	r24, 0x0149
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
     c5c:	80 93 49 01 	sts	0x0149, r24
	if(KCount > KD_val) {
     c60:	85 31       	cpi	r24, 0x15	; 21
     c62:	78 f0       	brcs	.+30     	; 0xc82 <KeyScan+0x112>
		if(KCount == 255) {
     c64:	8f 3f       	cpi	r24, 0xFF	; 255
     c66:	99 f4       	brne	.+38     	; 0xc8e <KeyScan+0x11e>
			KCount = KD_val;
     c68:	84 e1       	ldi	r24, 0x14	; 20
     c6a:	80 93 49 01 	sts	0x0149, r24
			if(++KHCount == KTimeChk) {
     c6e:	80 91 47 01 	lds	r24, 0x0147
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	80 93 47 01 	sts	0x0147, r24
     c78:	90 91 28 01 	lds	r25, 0x0128
     c7c:	89 17       	cp	r24, r25
     c7e:	39 f4       	brne	.+14     	; 0xc8e <KeyScan+0x11e>
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <KeyScan+0x116>
				// Change KTimeChk for key repeat
//				KTimeChk += KR_Time;
				}
			}
		}
	else if(KCount == KD_val) {
     c82:	84 31       	cpi	r24, 0x14	; 20
     c84:	21 f4       	brne	.+8      	; 0xc8e <KeyScan+0x11e>
		KeyConvert((KeyScanCode *)KScanCodeTab, KScan);
     c86:	8b ec       	ldi	r24, 0xCB	; 203
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <KeyConvert>
		}
	}

 // Process encoder
 tmp1 >>= 1;
     c8e:	16 95       	lsr	r17
 tmp1 &= 0x03;
 enc_state <<= 2;
     c90:	80 91 4a 01 	lds	r24, 0x014A
     c94:	88 0f       	add	r24, r24
     c96:	88 0f       	add	r24, r24
     c98:	80 93 4a 01 	sts	0x014A, r24
 enc_state |= tmp1;
     c9c:	80 91 4a 01 	lds	r24, 0x014A
     ca0:	13 70       	andi	r17, 0x03	; 3
     ca2:	18 2b       	or	r17, r24
     ca4:	10 93 4a 01 	sts	0x014A, r17
 enc_cnt = pgm_read_byte((U8 *)enc_table + (enc_state & 0x0F));
     ca8:	e0 91 4a 01 	lds	r30, 0x014A
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	ef 70       	andi	r30, 0x0F	; 15
     cb0:	f0 70       	andi	r31, 0x00	; 0
     cb2:	e1 5d       	subi	r30, 0xD1	; 209
     cb4:	fe 4f       	sbci	r31, 0xFE	; 254
     cb6:	e4 91       	lpm	r30, Z+
     cb8:	e0 93 2a 01 	sts	0x012A, r30
 if(enc_cnt == 1) {
     cbc:	80 91 2a 01 	lds	r24, 0x012A
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	29 f4       	brne	.+10     	; 0xcce <KeyScan+0x15e>
//	BitSet8(KFlags, (1<<Enc_CCW));
	KeyCode = KC_CCW;
     cc4:	87 e1       	ldi	r24, 0x17	; 23
     cc6:	80 93 29 01 	sts	0x0129, r24
	KeyParam = 0;
     cca:	10 92 26 01 	sts	0x0126, r1
	}
 if(enc_cnt == 0xFF) {
     cce:	80 91 2a 01 	lds	r24, 0x012A
     cd2:	8f 3f       	cpi	r24, 0xFF	; 255
     cd4:	31 f4       	brne	.+12     	; 0xce2 <KeyScan+0x172>
//	BitSet8(KFlags, (1<<Enc_CW));
	KeyCode = KC_CW;
     cd6:	86 e1       	ldi	r24, 0x16	; 22
     cd8:	80 93 29 01 	sts	0x0129, r24
	KeyParam = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 26 01 	sts	0x0126, r24
	}

 }
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	08 95       	ret

00000cee <SetDigitalPot>:
	tmp0++;
 	}
}

void	SetDigitalPot(U8 WiperPos)
{
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	08 2f       	mov	r16, r24
 U8	tmp;
 
 // Down moving wiper to 0 position
 BitClr8(DPOT_CS_Port, (1 << DPOT_CS_Bit));
     cf4:	5c 98       	cbi	0x0b, 4	; 11
 Delay(2);
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
 BitClr8(DPOT_UD_Port, (1 << DPOT_UD_Bit));
     cfe:	5f 98       	cbi	0x0b, 7	; 11
 Delay(2);
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
     d08:	14 e6       	ldi	r17, 0x64	; 100
 
 tmp = 100;
 while(tmp) {
 	BitClr8(DPOT_INC_Port, (1 << DPOT_INC_Bit));
     d0a:	5d 98       	cbi	0x0b, 5	; 11
 	Delay(2);
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
 	BitSet8(DPOT_INC_Port, (1 << DPOT_INC_Bit));
     d14:	5d 9a       	sbi	0x0b, 5	; 11
 	Delay(2);
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
	tmp--;
     d1e:	11 50       	subi	r17, 0x01	; 1
 Delay(2);
 BitClr8(DPOT_UD_Port, (1 << DPOT_UD_Bit));
 Delay(2);
 
 tmp = 100;
 while(tmp) {
     d20:	a1 f7       	brne	.-24     	; 0xd0a <SetDigitalPot+0x1c>
 	Delay(2);
	tmp--;
 	}

 // Up moving wiper to desired position
 BitSet8(DPOT_UD_Port, (1 << DPOT_UD_Bit));
     d22:	5f 9a       	sbi	0x0b, 7	; 11
 Delay(2);
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <SetDigitalPot+0x56>
 while(WiperPos) {
 	BitClr8(DPOT_INC_Port, (1 << DPOT_INC_Bit));
     d2e:	5d 98       	cbi	0x0b, 5	; 11
 	Delay(2);
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
  	BitSet8(DPOT_INC_Port, (1 << DPOT_INC_Bit));
     d38:	5d 9a       	sbi	0x0b, 5	; 11
	Delay(2);
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
	WiperPos--;
     d42:	01 50       	subi	r16, 0x01	; 1
 	}

 // Up moving wiper to desired position
 BitSet8(DPOT_UD_Port, (1 << DPOT_UD_Bit));
 Delay(2);
 while(WiperPos) {
     d44:	00 23       	and	r16, r16
     d46:	99 f7       	brne	.-26     	; 0xd2e <SetDigitalPot+0x40>
// Delay(2);

 // -- v014 end

 // Keep CS HIGH
 BitSet8(DPOT_CS_Port, (1 << DPOT_CS_Bit));
     d48:	5c 9a       	sbi	0x0b, 4	; 11
 Delay(2);
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>

 // Keep INC normally HIGH
 BitSet8(DPOT_INC_Port, (1 << DPOT_INC_Bit));
     d52:	5d 9a       	sbi	0x0b, 5	; 11

}
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <SendBuf>:
	
 	}
}

void	SendBuf(U8 *buf)
{
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
 U8 tmp;

 // Set handshake pin to output
 BitSet8(COMM_HS_Port_Dir, (1 << COMM_HS_Bit));
     d62:	52 9a       	sbi	0x0a, 2	; 10
 
 BitClr8(COMM_HS_Port, (1 << COMM_HS_Bit));
     d64:	5a 98       	cbi	0x0b, 2	; 11
 Delay(200);
     d66:	88 ec       	ldi	r24, 0xC8	; 200
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
 SendByte(CommSync);
     d6e:	8d e3       	ldi	r24, 0x3D	; 61
     d70:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <SendByte>
 Delay(200);
     d74:	88 ec       	ldi	r24, 0xC8	; 200
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
     d7c:	11 e1       	ldi	r17, 0x11	; 17

 tmp = DDS_Comm_Frame_Len;
 while(tmp) {
	SendByte(*buf++);
     d7e:	89 91       	ld	r24, Y+
     d80:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <SendByte>
	Delay(200);
     d84:	88 ec       	ldi	r24, 0xC8	; 200
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
	tmp--;
     d8c:	11 50       	subi	r17, 0x01	; 1
 Delay(200);
 SendByte(CommSync);
 Delay(200);

 tmp = DDS_Comm_Frame_Len;
 while(tmp) {
     d8e:	b9 f7       	brne	.-18     	; 0xd7e <SendBuf+0x24>
	SendByte(*buf++);
	Delay(200);
	tmp--;
 	}

 BitSet8(COMM_HS_Port, (1 << COMM_HS_Bit));
     d90:	5a 9a       	sbi	0x0b, 2	; 11

 // Set handshake pin to input
 BitClr8(COMM_HS_Port_Dir, (1 << COMM_HS_Bit));
     d92:	52 98       	cbi	0x0a, 2	; 10
}
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	08 95       	ret

00000d9c <LCD_WriteByte>:

// ------------------------------------------------------
// Write byte to DM0802B. If RS=0 write to command, otherwise write to data
// 4-bit interface assumed
void	LCD_WriteByte(U8 RS, U8 byte)
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	18 2f       	mov	r17, r24
     da2:	06 2f       	mov	r16, r22
 Dly50us();
     da4:	0e 94 3f 08 	call	0x107e	; 0x107e <Dly50us>

 if(RS) {		
     da8:	11 23       	and	r17, r17
     daa:	11 f0       	breq	.+4      	; 0xdb0 <LCD_WriteByte+0x14>
 	BitSet8(LCD_RS_Port, (1 << LCD_RS_Bit));
     dac:	29 9a       	sbi	0x05, 1	; 5
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <LCD_WriteByte+0x16>
 	}
 else {
 	BitClr8(LCD_RS_Port, (1 << LCD_RS_Bit));
     db0:	29 98       	cbi	0x05, 1	; 5
 	}

 // Please note that for 105-08500-00A the R/W signal of LCD has been hard connected to GND
 
 // Write higher nibble
 LCD_D_Port = (LCD_D_Port & (~LCD_D_Bit)) | ((byte & 0xF0) >> 2);
     db2:	25 b1       	in	r18, 0x05	; 5
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	c8 01       	movw	r24, r16
     db8:	80 7f       	andi	r24, 0xF0	; 240
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	95 95       	asr	r25
     dbe:	87 95       	ror	r24
     dc0:	95 95       	asr	r25
     dc2:	87 95       	ror	r24
     dc4:	23 7c       	andi	r18, 0xC3	; 195
     dc6:	28 2b       	or	r18, r24
     dc8:	25 b9       	out	0x05, r18	; 5
 Dly1us();
     dca:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitSet8(LCD_EN_Port, (1 << LCD_EN_Bit));
     dce:	28 9a       	sbi	0x05, 0	; 5
 Dly1us();
     dd0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitClr8(LCD_EN_Port, (1 << LCD_EN_Bit));
     dd4:	28 98       	cbi	0x05, 0	; 5

 // Write lower nibble
 LCD_D_Port = (LCD_D_Port & (~LCD_D_Bit)) | ((byte & 0x0F) << 2);
     dd6:	85 b1       	in	r24, 0x05	; 5
     dd8:	0f 70       	andi	r16, 0x0F	; 15
     dda:	10 70       	andi	r17, 0x00	; 0
     ddc:	00 0f       	add	r16, r16
     dde:	11 1f       	adc	r17, r17
     de0:	00 0f       	add	r16, r16
     de2:	11 1f       	adc	r17, r17
     de4:	83 7c       	andi	r24, 0xC3	; 195
     de6:	80 2b       	or	r24, r16
     de8:	85 b9       	out	0x05, r24	; 5
 Dly1us();
     dea:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitSet8(LCD_EN_Port, (1 << LCD_EN_Bit));
     dee:	28 9a       	sbi	0x05, 0	; 5
 Dly1us();
     df0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitClr8(LCD_EN_Port, (1 << LCD_EN_Bit));
     df4:	28 98       	cbi	0x05, 0	; 5

}
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <UpdateLCD>:
 Dly50us();

}

U8	UpdateLCD(U8 symbol)
{
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	18 2f       	mov	r17, r24
 U8 tmp0;

 // -- Set address to 0x00 for first row
 LCD_WriteByte(LCD_CMD, 0b10000000);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	60 e8       	ldi	r22, 0x80	; 128
     e08:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>
     e0c:	c0 e0       	ldi	r28, 0x00	; 0
     e0e:	d0 e0       	ldi	r29, 0x00	; 0

 tmp0 = 0;
 while(tmp0 < 16) {
 	LCD_WriteByte(LCD_DATA, DispBuf[tmp0]);
     e10:	fe 01       	movw	r30, r28
     e12:	e0 50       	subi	r30, 0x00	; 0
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	60 81       	ld	r22, Z
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>
     e1e:	21 96       	adiw	r28, 0x01	; 1

 // -- Set address to 0x00 for first row
 LCD_WriteByte(LCD_CMD, 0b10000000);

 tmp0 = 0;
 while(tmp0 < 16) {
     e20:	c0 31       	cpi	r28, 0x10	; 16
     e22:	d1 05       	cpc	r29, r1
     e24:	a9 f7       	brne	.-22     	; 0xe10 <UpdateLCD+0x14>
 	LCD_WriteByte(LCD_DATA, DispBuf[tmp0]);
	tmp0++;
 	}
 
 // -- Set address to 0x40 for second row
 LCD_WriteByte(LCD_CMD, 0b11000000);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 ec       	ldi	r22, 0xC0	; 192
     e2a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>
     e2e:	c0 e1       	ldi	r28, 0x10	; 16
     e30:	d0 e0       	ldi	r29, 0x00	; 0

 tmp0 = 0;
 while(tmp0 < 16) {
 	LCD_WriteByte(LCD_DATA, DispBuf[tmp0+16]);
     e32:	fe 01       	movw	r30, r28
     e34:	e0 50       	subi	r30, 0x00	; 0
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	60 81       	ld	r22, Z
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>
     e40:	21 96       	adiw	r28, 0x01	; 1
 
 // -- Set address to 0x40 for second row
 LCD_WriteByte(LCD_CMD, 0b11000000);

 tmp0 = 0;
 while(tmp0 < 16) {
     e42:	c0 32       	cpi	r28, 0x20	; 32
     e44:	d1 05       	cpc	r29, r1
     e46:	a9 f7       	brne	.-22     	; 0xe32 <UpdateLCD+0x36>
 	LCD_WriteByte(LCD_DATA, DispBuf[tmp0+16]);
	tmp0++;
 	}

 if(symbol == 'l') {
     e48:	1c 36       	cpi	r17, 0x6C	; 108
     e4a:	11 f0       	breq	.+4      	; 0xe50 <UpdateLCD+0x54>
     e4c:	80 e1       	ldi	r24, 0x10	; 16
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <UpdateLCD+0x56>
     e50:	8a e7       	ldi	r24, 0x7A	; 122
 	return 'z';
 	}
 return tmp0;
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	08 95       	ret

00000e5a <LCD_Init>:
 BitClr8(LCD_EN_Port, (1 << LCD_EN_Bit));

}

void	LCD_Init(void)
{
     e5a:	1f 93       	push	r17
 Dly_ms(40);
     e5c:	88 e2       	ldi	r24, 0x28	; 40
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 4f 08 	call	0x109e	; 0x109e <Dly_ms>
 
 // -- Set to 8bit interface
 LCD_D_Port = 0b00001100;
     e64:	1c e0       	ldi	r17, 0x0C	; 12
     e66:	15 b9       	out	0x05, r17	; 5
 Dly1us();
     e68:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 // Generate strobe
 BitSet8(LCD_EN_Port, (1 << LCD_EN_Bit));
     e6c:	28 9a       	sbi	0x05, 0	; 5
 Dly1us();
     e6e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitClr8(LCD_EN_Port, (1 << LCD_EN_Bit));
     e72:	28 98       	cbi	0x05, 0	; 5
 
 Dly_ms(10);
     e74:	8a e0       	ldi	r24, 0x0A	; 10
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 4f 08 	call	0x109e	; 0x109e <Dly_ms>
 
 // -- Set to 8bit interface
 LCD_D_Port = 0b00001100;
     e7c:	15 b9       	out	0x05, r17	; 5
 Dly1us();
     e7e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 // Generate strobe
 BitSet8(LCD_EN_Port, (1 << LCD_EN_Bit));
     e82:	28 9a       	sbi	0x05, 0	; 5
 Dly1us();
     e84:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitClr8(LCD_EN_Port, (1 << LCD_EN_Bit));
     e88:	28 98       	cbi	0x05, 0	; 5

 Dly_ms(1);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 4f 08 	call	0x109e	; 0x109e <Dly_ms>
 
 // -- Set to 4-bit interface
 LCD_D_Port = 0b00001000;
     e92:	88 e0       	ldi	r24, 0x08	; 8
     e94:	85 b9       	out	0x05, r24	; 5
 Dly1us();
     e96:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 // Generate strobe
 BitSet8(LCD_EN_Port, (1 << LCD_EN_Bit));
     e9a:	28 9a       	sbi	0x05, 0	; 5
 Dly1us();
     e9c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
 BitClr8(LCD_EN_Port, (1 << LCD_EN_Bit));
     ea0:	28 98       	cbi	0x05, 0	; 5

 // -- Set 2-line display and use 5X7 font
 LCD_WriteByte(LCD_CMD, 0b00101000);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	68 e2       	ldi	r22, 0x28	; 40
     ea6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>

 // -- Turn-off display
 LCD_WriteByte(LCD_CMD, 0b00001000);
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	68 e0       	ldi	r22, 0x08	; 8
     eae:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>

 // -- Set cursor home
 LCD_WriteByte(LCD_CMD, 0b00000001);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>

 Dly_ms(5);
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 4f 08 	call	0x109e	; 0x109e <Dly_ms>

 // -- Set Entry mode: cursor shift right for each char entered
 LCD_WriteByte(LCD_CMD, 0b00000110);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	66 e0       	ldi	r22, 0x06	; 6
     ec6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>

 // -- Turn-on display with CURSOR OFF and BLINK OFF
 LCD_WriteByte(LCD_CMD, 0b00001100);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	6c e0       	ldi	r22, 0x0C	; 12
     ece:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_WriteByte>

 Dly50us();
     ed2:	0e 94 3f 08 	call	0x107e	; 0x107e <Dly50us>

}
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <FindDec>:
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	4b 01       	movw	r8, r22
     ef4:	5c 01       	movw	r10, r24
     ef6:	c4 2e       	mov	r12, r20
     ef8:	e9 01       	movw	r28, r18
     efa:	99 e0       	ldi	r25, 0x09	; 9
     efc:	d9 2e       	mov	r13, r25
     efe:	d4 1a       	sub	r13, r20
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	e8 2e       	mov	r14, r24
     f04:	f1 2c       	mov	r15, r1
     f06:	01 2d       	mov	r16, r1
     f08:	11 2d       	mov	r17, r1
     f0a:	0b c0       	rjmp	.+22     	; 0xf22 <FindDec+0x48>
     f0c:	c8 01       	movw	r24, r16
     f0e:	b7 01       	movw	r22, r14
     f10:	2a e0       	ldi	r18, 0x0A	; 10
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
     f1c:	7b 01       	movw	r14, r22
     f1e:	8c 01       	movw	r16, r24
     f20:	da 94       	dec	r13
     f22:	dd 20       	and	r13, r13
     f24:	99 f7       	brne	.-26     	; 0xf0c <FindDec+0x32>
     f26:	c5 01       	movw	r24, r10
     f28:	b4 01       	movw	r22, r8
     f2a:	a8 01       	movw	r20, r16
     f2c:	97 01       	movw	r18, r14
     f2e:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
     f32:	cc 0d       	add	r28, r12
     f34:	d1 1d       	adc	r29, r1
     f36:	82 2f       	mov	r24, r18
     f38:	80 63       	ori	r24, 0x30	; 48
     f3a:	88 83       	st	Y, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	ca 01       	movw	r24, r20
     f44:	b9 01       	movw	r22, r18
     f46:	a8 01       	movw	r20, r16
     f48:	97 01       	movw	r18, r14
     f4a:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
     f4e:	a5 01       	movw	r20, r10
     f50:	94 01       	movw	r18, r8
     f52:	26 1b       	sub	r18, r22
     f54:	37 0b       	sbc	r19, r23
     f56:	48 0b       	sbc	r20, r24
     f58:	59 0b       	sbc	r21, r25
     f5a:	b9 01       	movw	r22, r18
     f5c:	ca 01       	movw	r24, r20
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	9f 90       	pop	r9
     f74:	8f 90       	pop	r8
     f76:	08 95       	ret

00000f78 <BinToDec32>:
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ea 01       	movw	r28, r20
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	41 2f       	mov	r20, r17
     f84:	9e 01       	movw	r18, r28
     f86:	0e 94 6d 07 	call	0xeda	; 0xeda <FindDec>
     f8a:	1f 5f       	subi	r17, 0xFF	; 255
     f8c:	1a 30       	cpi	r17, 0x0A	; 10
     f8e:	c9 f7       	brne	.-14     	; 0xf82 <BinToDec32+0xa>
     f90:	1a 86       	std	Y+10, r1	; 0x0a
     f92:	1b 86       	std	Y+11, r1	; 0x0b
     f94:	ce 01       	movw	r24, r28
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	08 95       	ret

00000f9e <BinToStr>:
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
     fa4:	68 81       	ld	r22, Y
     fa6:	79 81       	ldd	r23, Y+1	; 0x01
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	4e 81       	ldd	r20, Y+6	; 0x06
     fae:	5f 81       	ldd	r21, Y+7	; 0x07
     fb0:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	88 23       	and	r24, r24
     fb8:	c9 f0       	breq	.+50     	; 0xfec <BinToStr+0x4e>
     fba:	99 e0       	ldi	r25, 0x09	; 9
     fbc:	98 1b       	sub	r25, r24
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <BinToStr+0x34>
     fc4:	fd 01       	movw	r30, r26
     fc6:	e4 0f       	add	r30, r20
     fc8:	f1 1d       	adc	r31, r1
     fca:	a2 0f       	add	r26, r18
     fcc:	b3 1f       	adc	r27, r19
     fce:	8c 91       	ld	r24, X
     fd0:	80 83       	st	Z, r24
     fd2:	42 2f       	mov	r20, r18
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	82 2f       	mov	r24, r18
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	ae 81       	ldd	r26, Y+6	; 0x06
     fde:	bf 81       	ldd	r27, Y+7	; 0x07
     fe0:	89 17       	cp	r24, r25
     fe2:	80 f3       	brcs	.-32     	; 0xfc4 <BinToStr+0x26>
     fe4:	a9 0f       	add	r26, r25
     fe6:	b1 1d       	adc	r27, r1
     fe8:	8e e2       	ldi	r24, 0x2E	; 46
     fea:	8c 93       	st	X, r24
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	88 23       	and	r24, r24
     ff0:	11 f4       	brne	.+4      	; 0xff6 <BinToStr+0x58>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <BinToStr+0x5a>
     ff6:	8e 5f       	subi	r24, 0xFE	; 254
     ff8:	2a e0       	ldi	r18, 0x0A	; 10
     ffa:	28 1b       	sub	r18, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	30 e2       	ldi	r19, 0x20	; 32
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <BinToStr+0x76>
    1002:	ee 81       	ldd	r30, Y+6	; 0x06
    1004:	ff 81       	ldd	r31, Y+7	; 0x07
    1006:	e9 0f       	add	r30, r25
    1008:	f1 1d       	adc	r31, r1
    100a:	80 81       	ld	r24, Z
    100c:	80 33       	cpi	r24, 0x30	; 48
    100e:	21 f4       	brne	.+8      	; 0x1018 <BinToStr+0x7a>
    1010:	30 83       	st	Z, r19
    1012:	9f 5f       	subi	r25, 0xFF	; 255
    1014:	92 17       	cp	r25, r18
    1016:	a8 f3       	brcs	.-22     	; 0x1002 <BinToStr+0x64>
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <Delay>:
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <Delay+0x6>
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <Delay+0x12>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	89 2b       	or	r24, r25
    103a:	b9 f7       	brne	.-18     	; 0x102a <Delay+0xc>
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DelayDisp>:
    1046:	98 2f       	mov	r25, r24
    1048:	86 e9       	ldi	r24, 0x96	; 150
    104a:	20 e6       	ldi	r18, 0x60	; 96
    104c:	3a ee       	ldi	r19, 0xEA	; 234
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DelayDisp+0xe>
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	30 40       	sbci	r19, 0x00	; 0
    1054:	21 15       	cp	r18, r1
    1056:	31 05       	cpc	r19, r1
    1058:	d9 f7       	brne	.-10     	; 0x1050 <DelayDisp+0xa>
    105a:	81 50       	subi	r24, 0x01	; 1
    105c:	b1 f7       	brne	.-20     	; 0x104a <DelayDisp+0x4>
    105e:	9c 36       	cpi	r25, 0x6C	; 108
    1060:	09 f4       	brne	.+2      	; 0x1064 <DelayDisp+0x1e>
    1062:	8d e6       	ldi	r24, 0x6D	; 109
    1064:	08 95       	ret

00001066 <Dly_us>:
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <Dly_us+0xe>
    106e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
    1072:	21 97       	sbiw	r28, 0x01	; 1
    1074:	20 97       	sbiw	r28, 0x00	; 0
    1076:	d9 f7       	brne	.-10     	; 0x106e <Dly_us+0x8>
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <Dly50us>:
    107e:	1f 93       	push	r17
    1080:	12 e3       	ldi	r17, 0x32	; 50
    1082:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <Dly1us>
    1086:	11 50       	subi	r17, 0x01	; 1
    1088:	e1 f7       	brne	.-8      	; 0x1082 <Dly50us+0x4>
    108a:	1f 91       	pop	r17
    108c:	08 95       	ret

0000108e <Dly1ms>:
    108e:	1f 93       	push	r17
    1090:	14 e1       	ldi	r17, 0x14	; 20
    1092:	0e 94 3f 08 	call	0x107e	; 0x107e <Dly50us>
    1096:	11 50       	subi	r17, 0x01	; 1
    1098:	e1 f7       	brne	.-8      	; 0x1092 <Dly1ms+0x4>
    109a:	1f 91       	pop	r17
    109c:	08 95       	ret

0000109e <Dly_ms>:
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <Dly_ms+0xe>
    10a6:	0e 94 47 08 	call	0x108e	; 0x108e <Dly1ms>
    10aa:	21 97       	sbiw	r28, 0x01	; 1
    10ac:	20 97       	sbiw	r28, 0x00	; 0
    10ae:	d9 f7       	brne	.-10     	; 0x10a6 <Dly_ms+0x8>
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <CmdAnalysis>:
// Resolve a command function with given 'CmdCode' and 'CmdTab'. Update 'PState' 
//	with NextState and return the pointer to the resolved command function
// ----------------------------------------------------------------------------
//
void	*CmdAnalysis(U8 Ccode, CmdEntry *CmdTab, U8 *PState)
{
    10b6:	fb 01       	movw	r30, r22
    10b8:	da 01       	movw	r26, r20
    10ba:	0d c0       	rjmp	.+26     	; 0x10d6 <CmdAnalysis+0x20>
 U8	tmp0;
 
 // -- Looking for match command code
 while((tmp0 = pgm_read_byte((U8 *)CmdTab)) != 0) {
	if(tmp0 == Ccode) {
    10bc:	98 17       	cp	r25, r24
    10be:	51 f4       	brne	.+20     	; 0x10d4 <CmdAnalysis+0x1e>
		// -- Match found
		SysState.PrevState = *PState;
    10c0:	8c 91       	ld	r24, X
    10c2:	80 93 5f 01 	sts	0x015F, r24
		*PState = pgm_read_byte((U8 *)CmdTab + 1);
    10c6:	31 96       	adiw	r30, 0x01	; 1
    10c8:	84 91       	lpm	r24, Z+
    10ca:	8c 93       	st	X, r24
		return ((void *)pgm_read_word((U8 *)CmdTab + 2));
    10cc:	31 96       	adiw	r30, 0x01	; 1
    10ce:	25 91       	lpm	r18, Z+
    10d0:	34 91       	lpm	r19, Z+
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <CmdAnalysis+0x2a>
		}
	else {
		// -- Proceed to next entry
		CmdTab = (CmdEntry *)((U8 *)CmdTab + 4);
    10d4:	34 96       	adiw	r30, 0x04	; 4
void	*CmdAnalysis(U8 Ccode, CmdEntry *CmdTab, U8 *PState)
{
 U8	tmp0;
 
 // -- Looking for match command code
 while((tmp0 = pgm_read_byte((U8 *)CmdTab)) != 0) {
    10d6:	94 91       	lpm	r25, Z+
    10d8:	99 23       	and	r25, r25
    10da:	81 f7       	brne	.-32     	; 0x10bc <CmdAnalysis+0x6>
    10dc:	24 ea       	ldi	r18, 0xA4	; 164
    10de:	38 e0       	ldi	r19, 0x08	; 8
		CmdTab = (CmdEntry *)((U8 *)CmdTab + 4);
		}
 	}

 return Dummy;
}
    10e0:	c9 01       	movw	r24, r18
    10e2:	08 95       	ret

000010e4 <DoCmdProcessing>:
// ==========================================================
//	Function Definitions
// ==========================================================
void	DoCmdProcessing(void)
{
 if(KeyCode != 0) {
    10e4:	90 91 29 01 	lds	r25, 0x0129
    10e8:	99 23       	and	r25, r25
    10ea:	99 f0       	breq	.+38     	; 0x1112 <DoCmdProcessing+0x2e>
	// -- Analyses key and execute associated key function
	(*(void (*)(void) )CmdAnalysis( 
		KeyCode, 
		(CmdEntry *)pgm_read_word(&CmdIndex[SysState.CurrState]),
    10ec:	80 91 5e 01 	lds	r24, 0x015E
    10f0:	e8 2f       	mov	r30, r24
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	e9 5c       	subi	r30, 0xC9	; 201
    10fa:	fc 4f       	sbci	r31, 0xFC	; 252
    10fc:	65 91       	lpm	r22, Z+
    10fe:	74 91       	lpm	r23, Z+
// ==========================================================
void	DoCmdProcessing(void)
{
 if(KeyCode != 0) {
	// -- Analyses key and execute associated key function
	(*(void (*)(void) )CmdAnalysis( 
    1100:	89 2f       	mov	r24, r25
    1102:	4e e5       	ldi	r20, 0x5E	; 94
    1104:	51 e0       	ldi	r21, 0x01	; 1
    1106:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <CmdAnalysis>
    110a:	fc 01       	movw	r30, r24
    110c:	09 95       	icall
		KeyCode, 
		(CmdEntry *)pgm_read_word(&CmdIndex[SysState.CurrState]),
		(U8 *)&SysState.CurrState))();
	KeyCode = 0;
    110e:	10 92 29 01 	sts	0x0129, r1
    1112:	08 95       	ret

00001114 <ExitSVParam>:
}

void	ExitSVParam(void)
{
 // Execute initialization based on Mode
 (*(void (*)(void))(pgm_read_word(&InitFuncTab[miniDDS.Mode])))();
    1114:	80 91 79 01 	lds	r24, 0x0179
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	8f 5a       	subi	r24, 0xAF	; 175
    1120:	9c 4f       	sbci	r25, 0xFC	; 252
    1122:	fc 01       	movw	r30, r24
    1124:	25 91       	lpm	r18, Z+
    1126:	34 91       	lpm	r19, Z+
    1128:	f9 01       	movw	r30, r18
    112a:	09 95       	icall
}
    112c:	08 95       	ret

0000112e <EscapeMode>:
}

void	EscapeMode(void)
{
 // Go back to current mode
 (*(void (*)(void))(pgm_read_word(&InitFuncTab[miniDDS.Mode])))();
    112e:	80 91 79 01 	lds	r24, 0x0179
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	8f 5a       	subi	r24, 0xAF	; 175
    113a:	9c 4f       	sbci	r25, 0xFC	; 252
    113c:	fc 01       	movw	r30, r24
    113e:	25 91       	lpm	r18, Z+
    1140:	34 91       	lpm	r19, Z+
    1142:	f9 01       	movw	r30, r18
    1144:	09 95       	icall
}
    1146:	08 95       	ret

00001148 <Dummy>:

void Dummy(void)
{

}
    1148:	08 95       	ret

0000114a <NumInputSetup>:
 DisplayInputBuf();
}

void	NumInputSetup(U8 dispstart, U8 displen, U8 exittostate, void (*exitaction)(void))
{
 SysState.CurrState = KS_DigitInput;
    114a:	96 e0       	ldi	r25, 0x06	; 6
    114c:	90 93 5e 01 	sts	0x015E, r25

 // Accept input
 NumInput.DispStart = dispstart;
    1150:	80 93 6c 01 	sts	0x016C, r24
 NumInput.DispLen = displen;
    1154:	60 93 6d 01 	sts	0x016D, r22
 NumInput.InBuf = InputBuf;
    1158:	8e e4       	ldi	r24, 0x4E	; 78
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	90 93 6b 01 	sts	0x016B, r25
    1160:	80 93 6a 01 	sts	0x016A, r24
 NumInput.DigitCnt = 0;
    1164:	10 92 6e 01 	sts	0x016E, r1
 NumInput.Sign = 0;
    1168:	10 92 6f 01 	sts	0x016F, r1
 NumInput.DPLoc = 0;
    116c:	10 92 70 01 	sts	0x0170, r1
 NumInput.ExitTo = exittostate;
    1170:	40 93 76 01 	sts	0x0176, r20
 NumInput.ExitAction = exitaction;
    1174:	30 93 78 01 	sts	0x0178, r19
    1178:	20 93 77 01 	sts	0x0177, r18
    117c:	90 e0       	ldi	r25, 0x00	; 0
{
 U8	tmp;

 tmp = 0;
 while(tmp < NumInput.DispLen) {
 	*(NumInput.InBuf + tmp) = Char_Blank;
    117e:	2f e5       	ldi	r18, 0x5F	; 95
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <NumInputSetup+0x48>
    1182:	e0 91 6a 01 	lds	r30, 0x016A
    1186:	f0 91 6b 01 	lds	r31, 0x016B
    118a:	e9 0f       	add	r30, r25
    118c:	f1 1d       	adc	r31, r1
    118e:	20 83       	st	Z, r18
	tmp++;
    1190:	9f 5f       	subi	r25, 0xFF	; 255
void	ClearInputBuf(void)
{
 U8	tmp;

 tmp = 0;
 while(tmp < NumInput.DispLen) {
    1192:	80 91 6d 01 	lds	r24, 0x016D
    1196:	98 17       	cp	r25, r24
    1198:	a0 f3       	brcs	.-24     	; 0x1182 <NumInputSetup+0x38>
 NumInput.DPLoc = 0;
 NumInput.ExitTo = exittostate;
 NumInput.ExitAction = exitaction;
 
 ClearInputBuf();
}
    119a:	08 95       	ret

0000119c <UnitButton>:
 (*(void (*)(void))(NumInput.ExitAction))();
}

void	UnitButton(void)
{
 if(NumInput.DigitCnt == 0) {
    119c:	80 91 6e 01 	lds	r24, 0x016E
    11a0:	88 23       	and	r24, r24
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <UnitButton+0xc>
 	NumInput.EndKey = KC_ESC;
    11a4:	8d e0       	ldi	r24, 0x0D	; 13
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <UnitButton+0x10>
 	}
 else {
 	NumInput.EndKey = KeyCodeBuf;
    11a8:	80 91 2b 01 	lds	r24, 0x012B
    11ac:	80 93 75 01 	sts	0x0175, r24
 	}

 SysState.CurrState = NumInput.ExitTo;
    11b0:	80 91 76 01 	lds	r24, 0x0176
    11b4:	80 93 5e 01 	sts	0x015E, r24

 // Execute handling function
 (*(void (*)(void))(NumInput.ExitAction))();
    11b8:	e0 91 77 01 	lds	r30, 0x0177
    11bc:	f0 91 78 01 	lds	r31, 0x0178
    11c0:	09 95       	icall
}
    11c2:	08 95       	ret

000011c4 <ClearDisp>:
 	}

}

void ClearDisp(void)
{
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    11c8:	20 e2       	ldi	r18, 0x20	; 32
    11ca:	fc 01       	movw	r30, r24
    11cc:	e0 50       	subi	r30, 0x00	; 0
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	20 83       	st	Z, r18
    11d2:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    11d4:	80 32       	cpi	r24, 0x20	; 32
    11d6:	91 05       	cpc	r25, r1
    11d8:	c1 f7       	brne	.-16     	; 0x11ca <ClearDisp+0x6>
}

void ClearDisp(void)
{
 FillDisp(0, 32, ' ');
}
    11da:	08 95       	ret

000011dc <CalWholePart>:
 // Display input digits
 DisplayInputBuf();
}

U8	CalWholePart(void)
{
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
 U8	tmp1, tmp2;
 U32	tmp3;

 if(NumInput.DigitCnt == 0) {
    11e6:	80 91 6e 01 	lds	r24, 0x016E
    11ea:	88 23       	and	r24, r24
    11ec:	49 f1       	breq	.+82     	; 0x1240 <CalWholePart+0x64>
 	return 0;
 	}

 tmp3 = 0;
 tmp1 = 0;
 while(tmp1 < NumInput.DispLen) {
    11ee:	f0 90 6d 01 	lds	r15, 0x016D
    11f2:	c0 91 6a 01 	lds	r28, 0x016A
    11f6:	d0 91 6b 01 	lds	r29, 0x016B
    11fa:	00 e0       	ldi	r16, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	12 c0       	rjmp	.+36     	; 0x122a <CalWholePart+0x4e>
 	tmp2 = *(NumInput.InBuf + tmp1);
    1206:	18 81       	ld	r17, Y
	switch(tmp2) {
    1208:	1e 32       	cpi	r17, 0x2E	; 46
    120a:	89 f0       	breq	.+34     	; 0x122e <CalWholePart+0x52>
    120c:	1f 35       	cpi	r17, 0x5F	; 95
    120e:	59 f0       	breq	.+22     	; 0x1226 <CalWholePart+0x4a>
 			NumInput.DataValue = tmp3;
 			return 1;

		default:
			// Digit 0 - 9
			tmp3 *= 10;
    1210:	2a e0       	ldi	r18, 0x0A	; 10
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
			tmp2 = tmp2 & 0x0F;
			tmp3 += tmp2;
    121c:	1f 70       	andi	r17, 0x0F	; 15
    121e:	61 0f       	add	r22, r17
    1220:	71 1d       	adc	r23, r1
    1222:	81 1d       	adc	r24, r1
    1224:	91 1d       	adc	r25, r1
			break;
		}
	tmp1++;
    1226:	0f 5f       	subi	r16, 0xFF	; 255
    1228:	21 96       	adiw	r28, 0x01	; 1
 	return 0;
 	}

 tmp3 = 0;
 tmp1 = 0;
 while(tmp1 < NumInput.DispLen) {
    122a:	0f 15       	cp	r16, r15
    122c:	60 f3       	brcs	.-40     	; 0x1206 <CalWholePart+0x2a>
			break;
		}
	tmp1++;
	}
	
 NumInput.DataValue = tmp3;
    122e:	60 93 71 01 	sts	0x0171, r22
    1232:	70 93 72 01 	sts	0x0172, r23
    1236:	80 93 73 01 	sts	0x0173, r24
    123a:	90 93 74 01 	sts	0x0174, r25
    123e:	81 e0       	ldi	r24, 0x01	; 1
 return 1;
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	08 95       	ret

0000124c <CalValue>:

U8	CalValue(void)
{
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
 U8	tmp1, tmp2, tmp4;
 U32	tmp3;

 if(NumInput.DigitCnt == 0) {
    1258:	80 91 6e 01 	lds	r24, 0x016E
    125c:	88 23       	and	r24, r24
    125e:	09 f4       	brne	.+2      	; 0x1262 <CalValue+0x16>
    1260:	5f c0       	rjmp	.+190    	; 0x1320 <CalValue+0xd4>
 
 tmp3 = 0;	// result
 tmp4 = 0; 	// Decimal point location 
 tmp1 = 0;
 // Scan input buffer
 while(tmp1 < NumInput.DispLen) {
    1262:	e0 90 6d 01 	lds	r14, 0x016D
    1266:	c0 91 6a 01 	lds	r28, 0x016A
    126a:	d0 91 6b 01 	lds	r29, 0x016B
    126e:	ff 24       	eor	r15, r15
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	00 e0       	ldi	r16, 0x00	; 0
    127a:	24 c0       	rjmp	.+72     	; 0x12c4 <CalValue+0x78>
 	if(tmp4) {
    127c:	ff 20       	and	r15, r15
    127e:	31 f0       	breq	.+12     	; 0x128c <CalValue+0x40>
		// Decimal point has been encountered. Limit to 3 digits after DP
		if((tmp1 - tmp4) > 3) {
    1280:	80 2f       	mov	r24, r16
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	8f 19       	sub	r24, r15
    1286:	91 09       	sbc	r25, r1
    1288:	04 97       	sbiw	r24, 0x04	; 4
    128a:	04 f5       	brge	.+64     	; 0x12cc <CalValue+0x80>
			// Stop scaning
			break;
			}
 		}
	
 	tmp2 = *(NumInput.InBuf + tmp1);
    128c:	18 81       	ld	r17, Y
	switch(tmp2) {
    128e:	1e 32       	cpi	r17, 0x2E	; 46
    1290:	19 f0       	breq	.+6      	; 0x1298 <CalValue+0x4c>
    1292:	1f 35       	cpi	r17, 0x5F	; 95
    1294:	31 f4       	brne	.+12     	; 0x12a2 <CalValue+0x56>
    1296:	14 c0       	rjmp	.+40     	; 0x12c0 <CalValue+0x74>
		case '_':
			break;

		case '.':
			if(tmp4 == 0) {
    1298:	ff 20       	and	r15, r15
    129a:	09 f0       	breq	.+2      	; 0x129e <CalValue+0x52>
    129c:	41 c0       	rjmp	.+130    	; 0x1320 <CalValue+0xd4>
    129e:	f0 2e       	mov	r15, r16
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <CalValue+0x74>
				}
			break;

		default:
			// Digit 0 - 9
			tmp3 *= 10;
    12a2:	ca 01       	movw	r24, r20
    12a4:	b9 01       	movw	r22, r18
    12a6:	2a e0       	ldi	r18, 0x0A	; 10
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
			tmp2 = tmp2 & 0x0F;
			tmp3 += tmp2;
    12b6:	1f 70       	andi	r17, 0x0F	; 15
    12b8:	21 0f       	add	r18, r17
    12ba:	31 1d       	adc	r19, r1
    12bc:	41 1d       	adc	r20, r1
    12be:	51 1d       	adc	r21, r1
			break;
		}
	tmp1++;
    12c0:	0f 5f       	subi	r16, 0xFF	; 255
    12c2:	21 96       	adiw	r28, 0x01	; 1
 
 tmp3 = 0;	// result
 tmp4 = 0; 	// Decimal point location 
 tmp1 = 0;
 // Scan input buffer
 while(tmp1 < NumInput.DispLen) {
    12c4:	0e 15       	cp	r16, r14
    12c6:	d0 f2       	brcs	.-76     	; 0x127c <CalValue+0x30>
			break;
		}
	tmp1++;
	}

 if(tmp4 != 0) {
    12c8:	ff 20       	and	r15, r15
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <CalValue+0x88>
 	NumInput.DPLoc = (tmp1 - 1) - tmp4;	// DPloc is the digits after decimal point
    12cc:	01 50       	subi	r16, 0x01	; 1
    12ce:	0f 19       	sub	r16, r15
    12d0:	00 93 70 01 	sts	0x0170, r16
 	}

 if((NumInput.DPLoc == 0) && (tmp3 > ((4294967296L/1000) + 1) )) {
    12d4:	80 91 70 01 	lds	r24, 0x0170
    12d8:	88 23       	and	r24, r24
    12da:	41 f4       	brne	.+16     	; 0x12ec <CalValue+0xa0>
    12dc:	29 33       	cpi	r18, 0x39	; 57
    12de:	99 e8       	ldi	r25, 0x89	; 137
    12e0:	39 07       	cpc	r19, r25
    12e2:	91 e4       	ldi	r25, 0x41	; 65
    12e4:	49 07       	cpc	r20, r25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	59 07       	cpc	r21, r25
    12ea:	d0 f4       	brcc	.+52     	; 0x1320 <CalValue+0xd4>
 	// Possible overflow
	return 0;
 	}
 
 tmp1 = 3 - NumInput.DPLoc;
    12ec:	13 e0       	ldi	r17, 0x03	; 3
    12ee:	18 1b       	sub	r17, r24
    12f0:	0b c0       	rjmp	.+22     	; 0x1308 <CalValue+0xbc>
 while(tmp1) {
	tmp3 *= 10;
    12f2:	ca 01       	movw	r24, r20
    12f4:	b9 01       	movw	r22, r18
    12f6:	2a e0       	ldi	r18, 0x0A	; 10
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
	tmp1--;
    1306:	11 50       	subi	r17, 0x01	; 1
 	// Possible overflow
	return 0;
 	}
 
 tmp1 = 3 - NumInput.DPLoc;
 while(tmp1) {
    1308:	11 23       	and	r17, r17
    130a:	99 f7       	brne	.-26     	; 0x12f2 <CalValue+0xa6>
	tmp3 *= 10;
	tmp1--;
	}
 NumInput.DataValue = tmp3;
    130c:	20 93 71 01 	sts	0x0171, r18
    1310:	30 93 72 01 	sts	0x0172, r19
    1314:	40 93 73 01 	sts	0x0173, r20
    1318:	50 93 74 01 	sts	0x0174, r21
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <CalValue+0xd6>
 return 1;
    1320:	80 e0       	ldi	r24, 0x00	; 0
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <ClearInputBuf>:
		}
 	}
}

void	ClearInputBuf(void)
{
    1330:	90 e0       	ldi	r25, 0x00	; 0
 U8	tmp;

 tmp = 0;
 while(tmp < NumInput.DispLen) {
 	*(NumInput.InBuf + tmp) = Char_Blank;
    1332:	2f e5       	ldi	r18, 0x5F	; 95
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <ClearInputBuf+0x16>
    1336:	e0 91 6a 01 	lds	r30, 0x016A
    133a:	f0 91 6b 01 	lds	r31, 0x016B
    133e:	e9 0f       	add	r30, r25
    1340:	f1 1d       	adc	r31, r1
    1342:	20 83       	st	Z, r18
	tmp++;
    1344:	9f 5f       	subi	r25, 0xFF	; 255
void	ClearInputBuf(void)
{
 U8	tmp;

 tmp = 0;
 while(tmp < NumInput.DispLen) {
    1346:	80 91 6d 01 	lds	r24, 0x016D
    134a:	98 17       	cp	r25, r24
    134c:	a0 f3       	brcs	.-24     	; 0x1336 <ClearInputBuf+0x6>
 	*(NumInput.InBuf + tmp) = Char_Blank;
	tmp++;
	}
}
    134e:	08 95       	ret

00001350 <DisplayInputBuf>:

void	DisplayInputBuf(void)
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
 U8	tmp;
 
 tmp = 0;
 while(tmp < NumInput.DispLen) {
    1354:	90 91 6d 01 	lds	r25, 0x016D
 	DispBuf[NumInput.DispStart + tmp ] = *(NumInput.InBuf + tmp );
    1358:	80 91 6c 01 	lds	r24, 0x016C
    135c:	a8 2f       	mov	r26, r24
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	c0 91 6a 01 	lds	r28, 0x016A
    1364:	d0 91 6b 01 	lds	r29, 0x016B
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
void	DisplayInputBuf(void)
{
 U8	tmp;
 
 tmp = 0;
 while(tmp < NumInput.DispLen) {
    136c:	ad 01       	movw	r20, r26
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <DisplayInputBuf+0x32>
    1370:	f9 01       	movw	r30, r18
    1372:	e4 0f       	add	r30, r20
    1374:	f5 1f       	adc	r31, r21
 	DispBuf[NumInput.DispStart + tmp ] = *(NumInput.InBuf + tmp );
    1376:	89 91       	ld	r24, Y+
    1378:	e0 50       	subi	r30, 0x00	; 0
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	80 83       	st	Z, r24
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
void	DisplayInputBuf(void)
{
 U8	tmp;
 
 tmp = 0;
 while(tmp < NumInput.DispLen) {
    1382:	29 17       	cp	r18, r25
    1384:	a8 f3       	brcs	.-22     	; 0x1370 <DisplayInputBuf+0x20>
 	DispBuf[NumInput.DispStart + tmp ] = *(NumInput.InBuf + tmp );
	tmp++;
 	}

 switch(NumInput.Sign) {
    1386:	80 91 6f 01 	lds	r24, 0x016F
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	49 f0       	breq	.+18     	; 0x13a0 <DisplayInputBuf+0x50>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	18 f0       	brcs	.+6      	; 0x1398 <DisplayInputBuf+0x48>
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	69 f4       	brne	.+26     	; 0x13b0 <DisplayInputBuf+0x60>
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <DisplayInputBuf+0x58>
 	case Sign_Blank:
		DispBuf[NumInput.DispStart - 1] = Char_Blank;
    1398:	a1 50       	subi	r26, 0x01	; 1
    139a:	bf 4f       	sbci	r27, 0xFF	; 255
    139c:	8f e5       	ldi	r24, 0x5F	; 95
    139e:	07 c0       	rjmp	.+14     	; 0x13ae <DisplayInputBuf+0x5e>
		break;
	case Sign_Neg:
		DispBuf[NumInput.DispStart - 1] = '-';
    13a0:	a1 50       	subi	r26, 0x01	; 1
    13a2:	bf 4f       	sbci	r27, 0xFF	; 255
    13a4:	8d e2       	ldi	r24, 0x2D	; 45
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <DisplayInputBuf+0x5e>
		break;
 	case Sign_Pos:
		DispBuf[NumInput.DispStart - 1] = '+';
    13a8:	a1 50       	subi	r26, 0x01	; 1
    13aa:	bf 4f       	sbci	r27, 0xFF	; 255
    13ac:	8b e2       	ldi	r24, 0x2B	; 43
    13ae:	8c 93       	st	X, r24
		break;
 	}
 BitSet8(Flags, (1 << Flags_DispUpdate));
    13b0:	80 91 4d 01 	lds	r24, 0x014D
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	80 93 4d 01 	sts	0x014D, r24
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <ToggleSign>:
 return 1;
}

void	ToggleSign(void)
{
 if(NumInput.Sign != Sign_Neg) {
    13c0:	80 91 6f 01 	lds	r24, 0x016F
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	11 f0       	breq	.+4      	; 0x13cc <ToggleSign+0xc>
 	// Set to '-'
 	NumInput.Sign = Sign_Neg;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <ToggleSign+0xe>
 	}
 else {
 	// Set to '+'
 	NumInput.Sign = Sign_Pos;
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	80 93 6f 01 	sts	0x016F, r24
 	}
 DisplayInputBuf();
    13d2:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
}
    13d6:	08 95       	ret

000013d8 <Digit>:
{
 FillDisp(0, 32, ' ');
}

void	Digit(void)
{
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	09 c0       	rjmp	.+18     	; 0x13ee <Digit+0x16>
 U8	tmp;

 // Shift left 1 digit
 tmp = 0;
 while(tmp < NumInput.DispLen - 1) {
 	*(NumInput.InBuf + tmp) = *(NumInput.InBuf + tmp + 1);
    13dc:	e0 91 6a 01 	lds	r30, 0x016A
    13e0:	f0 91 6b 01 	lds	r31, 0x016B
    13e4:	e2 0f       	add	r30, r18
    13e6:	f3 1f       	adc	r31, r19
    13e8:	81 81       	ldd	r24, Z+1	; 0x01
    13ea:	80 83       	st	Z, r24
	tmp++;
    13ec:	4f 5f       	subi	r20, 0xFF	; 255
{
 U8	tmp;

 // Shift left 1 digit
 tmp = 0;
 while(tmp < NumInput.DispLen - 1) {
    13ee:	24 2f       	mov	r18, r20
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	80 91 6d 01 	lds	r24, 0x016D
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	28 17       	cp	r18, r24
    13fc:	39 07       	cpc	r19, r25
    13fe:	74 f3       	brlt	.-36     	; 0x13dc <Digit+0x4>
 	*(NumInput.InBuf + tmp) = *(NumInput.InBuf + tmp + 1);
	tmp++;
 	}

 // Enter new digit
 *(NumInput.InBuf + tmp) = KeyParam;
    1400:	e0 91 6a 01 	lds	r30, 0x016A
    1404:	f0 91 6b 01 	lds	r31, 0x016B
    1408:	e2 0f       	add	r30, r18
    140a:	f3 1f       	adc	r31, r19
    140c:	80 91 26 01 	lds	r24, 0x0126
    1410:	80 83       	st	Z, r24

 // Count up
 NumInput.DigitCnt++;
    1412:	80 91 6e 01 	lds	r24, 0x016E
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	80 93 6e 01 	sts	0x016E, r24
 if(NumInput.DigitCnt > NumInput.DispLen) {
    141c:	90 91 6d 01 	lds	r25, 0x016D
    1420:	98 17       	cp	r25, r24
    1422:	10 f4       	brcc	.+4      	; 0x1428 <Digit+0x50>
 	NumInput.DigitCnt = NumInput.DispLen;
    1424:	90 93 6e 01 	sts	0x016E, r25
 	}

 // Display input digits
 DisplayInputBuf();
    1428:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
}
    142c:	08 95       	ret

0000142e <SetIncrement>:
}

void	SetIncrement(void)
{
 // Only execute the below at CW Mode
 if(miniDDS.Mode != KS_CW) {
    142e:	80 91 79 01 	lds	r24, 0x0179
    1432:	88 23       	and	r24, r24
    1434:	31 f5       	brne	.+76     	; 0x1482 <SetIncrement+0x54>
 	return;
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    143a:	20 e2       	ldi	r18, 0x20	; 32
    143c:	fc 01       	movw	r30, r24
    143e:	e0 50       	subi	r30, 0x00	; 0
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	20 83       	st	Z, r18
    1444:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    1446:	80 32       	cpi	r24, 0x20	; 32
    1448:	91 05       	cpc	r25, r1
    144a:	c1 f7       	brne	.-16     	; 0x143c <SetIncrement+0xe>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	05 c0       	rjmp	.+10     	; 0x145c <SetIncrement+0x2e>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    1452:	e3 2f       	mov	r30, r19
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	e0 50       	subi	r30, 0x00	; 0
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	20 83       	st	Z, r18
    145c:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    145e:	fc 01       	movw	r30, r24
    1460:	e4 58       	subi	r30, 0x84	; 132
    1462:	fb 4f       	sbci	r31, 0xFB	; 251
    1464:	24 91       	lpm	r18, Z+
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	22 23       	and	r18, r18
    146a:	99 f7       	brne	.-26     	; 0x1452 <SetIncrement+0x24>
 // Display title
 ClearDisp();
 PutStr_ROM(SetStep_DispStart, (U8 *)SetFreqPeriodStep);

 // Accept input
 NumInputSetup(Inc_DispStart + Inc_DigitOfs, Inc_InputBufSize, KS_CW, IncInputHandle);
    146c:	81 e1       	ldi	r24, 0x11	; 17
    146e:	68 e0       	ldi	r22, 0x08	; 8
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	25 ef       	ldi	r18, 0xF5	; 245
    1474:	33 e1       	ldi	r19, 0x13	; 19
    1476:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>

 Digit();
    147a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Digit>
 DisplayInputBuf();
    147e:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    1482:	08 95       	ret

00001484 <ShowMode>:
	}
 ShowDuty();
}

void	ShowMode(void)
{
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    1488:	20 e2       	ldi	r18, 0x20	; 32
    148a:	fc 01       	movw	r30, r24
    148c:	e0 50       	subi	r30, 0x00	; 0
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	20 83       	st	Z, r18
    1492:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    1494:	80 32       	cpi	r24, 0x20	; 32
    1496:	91 05       	cpc	r25, r1
    1498:	c1 f7       	brne	.-16     	; 0x148a <ShowMode+0x6>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <ShowMode+0x26>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    14a0:	e3 2f       	mov	r30, r19
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	e0 50       	subi	r30, 0x00	; 0
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	20 83       	st	Z, r18
    14aa:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    14ac:	fc 01       	movw	r30, r24
    14ae:	ef 54       	subi	r30, 0x4F	; 79
    14b0:	fc 4f       	sbci	r31, 0xFC	; 252
    14b2:	24 91       	lpm	r18, Z+
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	22 23       	and	r18, r18
    14b8:	99 f7       	brne	.-26     	; 0x14a0 <ShowMode+0x1c>

void	ShowMode(void)
{
 ClearDisp();
 PutStr_ROM(ModePrompt_DispStart, (U8 *)ModePrompt);
 PutStr_ROM(ModeName_DispStart, (U8 *)ModeNames[CurrMode]);
    14ba:	80 91 ba 01 	lds	r24, 0x01BA
    14be:	48 2f       	mov	r20, r24
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	9a 01       	movw	r18, r20
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	ca 01       	movw	r24, r20
    14ca:	73 e0       	ldi	r23, 0x03	; 3
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	7a 95       	dec	r23
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <ShowMode+0x48>
    14d4:	28 0f       	add	r18, r24
    14d6:	39 1f       	adc	r19, r25
    14d8:	23 54       	subi	r18, 0x43	; 67
    14da:	3c 4f       	sbci	r19, 0xFC	; 252
    14dc:	80 e1       	ldi	r24, 0x10	; 16
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <ShowMode+0x68>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    14e0:	e8 2f       	mov	r30, r24
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	e0 50       	subi	r30, 0x00	; 0
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	90 83       	st	Z, r25
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	f9 01       	movw	r30, r18
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	94 91       	lpm	r25, Z+
    14f4:	99 23       	and	r25, r25
    14f6:	a1 f7       	brne	.-24     	; 0x14e0 <ShowMode+0x5c>
void	ShowMode(void)
{
 ClearDisp();
 PutStr_ROM(ModePrompt_DispStart, (U8 *)ModePrompt);
 PutStr_ROM(ModeName_DispStart, (U8 *)ModeNames[CurrMode]);
 PutStr_ROM(ModeIndex_DispStart, (U8 *)ModeIndex[CurrMode]);
    14f8:	ca 01       	movw	r24, r20
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	84 0f       	add	r24, r20
    1504:	95 1f       	adc	r25, r21
    1506:	8b 51       	subi	r24, 0x1B	; 27
    1508:	9c 4f       	sbci	r25, 0xFC	; 252
    150a:	2d e1       	ldi	r18, 0x1D	; 29
    150c:	06 c0       	rjmp	.+12     	; 0x151a <ShowMode+0x96>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    150e:	e2 2f       	mov	r30, r18
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	e0 50       	subi	r30, 0x00	; 0
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	30 83       	st	Z, r19
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	34 91       	lpm	r19, Z+
    1520:	33 23       	and	r19, r19
    1522:	a9 f7       	brne	.-22     	; 0x150e <ShowMode+0x8a>
{
 ClearDisp();
 PutStr_ROM(ModePrompt_DispStart, (U8 *)ModePrompt);
 PutStr_ROM(ModeName_DispStart, (U8 *)ModeNames[CurrMode]);
 PutStr_ROM(ModeIndex_DispStart, (U8 *)ModeIndex[CurrMode]);
 BitSet8(Flags, (1 << Flags_DispUpdate));
    1524:	80 91 4d 01 	lds	r24, 0x014D
    1528:	80 68       	ori	r24, 0x80	; 128
    152a:	80 93 4d 01 	sts	0x014D, r24
}
    152e:	08 95       	ret

00001530 <ChangeMode>:
 (*(void (*)(void))(pgm_read_word(&InitFuncTab[miniDDS.Mode])))();
}

void	ChangeMode(void)
{
 CurrMode = KS_CW;
    1530:	10 92 ba 01 	sts	0x01BA, r1
 ShowMode();
    1534:	0e 94 42 0a 	call	0x1484	; 0x1484 <ShowMode>
}
    1538:	08 95       	ret

0000153a <ShowType>:
 UpdateOfs(miniDDS.Ofs);
}

void ShowType(void)
{
 PutStr_ROM(12, (U8 *)WaveName[miniDDS.CurrWave]);
    153a:	90 91 88 01 	lds	r25, 0x0188
    153e:	86 e0       	ldi	r24, 0x06	; 6
    1540:	98 9f       	mul	r25, r24
    1542:	c0 01       	movw	r24, r0
    1544:	11 24       	eor	r1, r1
    1546:	87 5a       	subi	r24, 0xA7	; 167
    1548:	9c 4f       	sbci	r25, 0xFC	; 252
    154a:	2c e0       	ldi	r18, 0x0C	; 12
    154c:	06 c0       	rjmp	.+12     	; 0x155a <ShowType+0x20>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    154e:	e2 2f       	mov	r30, r18
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	e0 50       	subi	r30, 0x00	; 0
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	30 83       	st	Z, r19
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	34 91       	lpm	r19, Z+
    1560:	33 23       	and	r19, r19
    1562:	a9 f7       	brne	.-22     	; 0x154e <ShowType+0x14>
}

void ShowType(void)
{
 PutStr_ROM(12, (U8 *)WaveName[miniDDS.CurrWave]);
}
    1564:	08 95       	ret

00001566 <ShowFocus>:

void	ShowFocus(void) 
{
 
 DispBuf[0] = ' ';
    1566:	80 e2       	ldi	r24, 0x20	; 32
    1568:	80 93 00 01 	sts	0x0100, r24
 DispBuf[16] = ' ';
    156c:	80 93 10 01 	sts	0x0110, r24
 DispBuf[25] = ' ';
    1570:	80 93 19 01 	sts	0x0119, r24

 if(CurrFocus < FC_max) {
    1574:	e0 91 b9 01 	lds	r30, 0x01B9
    1578:	ec 30       	cpi	r30, 0x0C	; 12
    157a:	50 f4       	brcc	.+20     	; 0x1590 <ShowFocus+0x2a>
 	DispBuf[pgm_read_byte((U8 *)FocusLocTab + CurrFocus)] = TrigCtrl;
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	e4 56       	subi	r30, 0x64	; 100
    1580:	fa 4f       	sbci	r31, 0xFA	; 250
    1582:	e4 91       	lpm	r30, Z+
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 91 b8 01 	lds	r24, 0x01B8
    158a:	e0 50       	subi	r30, 0x00	; 0
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	80 83       	st	Z, r24
 	}

 BitSet8(Flags, (1 << Flags_DispUpdate));
    1590:	80 91 4d 01 	lds	r24, 0x014D
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	80 93 4d 01 	sts	0x014D, r24
}
    159a:	08 95       	ret

0000159c <SetOfs>:
}

void	SetOfs(void)
{
 // Set focus 
 if(CurrFocus != FC_Ofs) {
    159c:	80 91 b9 01 	lds	r24, 0x01B9
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <SetOfs+0x14>
 	CurrFocus = FC_Ofs;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	80 93 b9 01 	sts	0x01B9, r24
	ShowFocus();
    15aa:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
    15ae:	08 95       	ret
//	SysState.CurrState = SysState.PrevState;
	return;
 	}

 // Accept input
 NumInputSetup(Ofs_DispStart + Ofs_DigitOfs, Ofs_InputBufSize, KS_CW, OfsInputHandle);
    15b0:	8a e1       	ldi	r24, 0x1A	; 26
    15b2:	66 e0       	ldi	r22, 0x06	; 6
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	2c e3       	ldi	r18, 0x3C	; 60
    15b8:	34 e1       	ldi	r19, 0x14	; 20
    15ba:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_CW;
 NumInput.ExitAction = OfsInputHandle;
 
 ClearInputBuf();
*/
 DisplayInputBuf();
    15be:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    15c2:	08 95       	ret

000015c4 <SetAmp>:
}

void	SetAmp(void)
{
 // Set focus 
 if(CurrFocus != FC_Amp) {
    15c4:	80 91 b9 01 	lds	r24, 0x01B9
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <SetAmp+0x14>
 	CurrFocus = FC_Amp;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 b9 01 	sts	0x01B9, r24
	ShowFocus();
    15d2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
    15d6:	08 95       	ret
//	SysState.CurrState = SysState.PrevState;
	return;
 	}

 // Accept input
 NumInputSetup(Amp_DispStart + Amp_DigitOfs, Amp_InputBufSize, KS_CW, AmpInputHandle);
    15d8:	81 e1       	ldi	r24, 0x11	; 17
    15da:	66 e0       	ldi	r22, 0x06	; 6
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	2e e2       	ldi	r18, 0x2E	; 46
    15e0:	32 e1       	ldi	r19, 0x12	; 18
    15e2:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_CW;
 NumInput.ExitAction = AmpInputHandle;
 
 ClearInputBuf();
*/
 DisplayInputBuf();
    15e6:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    15ea:	08 95       	ret

000015ec <SetFreqCW>:
// if(miniDDS.Mode != KS_CW) {
// 	return;
//	}

 // Set focus to FREQ if it was not 
 if(CurrFocus != FC_Freq) {
    15ec:	80 91 b9 01 	lds	r24, 0x01B9
    15f0:	88 23       	and	r24, r24
    15f2:	29 f0       	breq	.+10     	; 0x15fe <SetFreqCW+0x12>
 	CurrFocus = FC_Freq;
    15f4:	10 92 b9 01 	sts	0x01B9, r1
	ShowFocus();
    15f8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
    15fc:	08 95       	ret
//	SysState.CurrState = SysState.PrevState;
	return;
 	}
 
 switch(DispBuf[Freq_DispStart]) {
    15fe:	80 91 00 01 	lds	r24, 0x0100
    1602:	86 34       	cpi	r24, 0x46	; 70
    1604:	11 f4       	brne	.+4      	; 0x160a <SetFreqCW+0x1e>
 	case 'F': 
		DispBuf[Freq_DispStart] = 'T';
    1606:	84 e5       	ldi	r24, 0x54	; 84
    1608:	01 c0       	rjmp	.+2      	; 0x160c <SetFreqCW+0x20>
		break;
	case 'T':
	default:
		DispBuf[Freq_DispStart] = 'F';
    160a:	86 e4       	ldi	r24, 0x46	; 70
    160c:	80 93 00 01 	sts	0x0100, r24
		break;
 	}
 DispBuf[1] = ':';
    1610:	8a e3       	ldi	r24, 0x3A	; 58
    1612:	80 93 01 01 	sts	0x0101, r24

 // Accept input
 NumInputSetup(Freq_DispStart + Freq_DigitOfs, Freq_InputBufSize, KS_CW, FreqInputHandle);
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	68 e0       	ldi	r22, 0x08	; 8
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	2e e0       	ldi	r18, 0x0E	; 14
    161e:	3f e0       	ldi	r19, 0x0F	; 15
    1620:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_CW;
 NumInput.ExitAction = FreqInputHandle;
 
 ClearInputBuf();
*/
 DisplayInputBuf();
    1624:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    1628:	08 95       	ret

0000162a <CalDeltaPhase>:

 SendDDS();
}

void	CalDeltaPhase(U32 *freq, U32 *dphase, float fclk)
{
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	fc 01       	movw	r30, r24
    1640:	4b 01       	movw	r8, r22
    1642:	79 01       	movw	r14, r18
    1644:	8a 01       	movw	r16, r20
 *dphase = (U32)((float)(*freq) / (fclk / 16777216.0));
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__floatunsisf>
    1652:	5b 01       	movw	r10, r22
    1654:	6c 01       	movw	r12, r24
    1656:	c8 01       	movw	r24, r16
    1658:	b7 01       	movw	r22, r14
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e8       	ldi	r20, 0x80	; 128
    1660:	53 e3       	ldi	r21, 0x33	; 51
    1662:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__mulsf3>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	c6 01       	movw	r24, r12
    166c:	b5 01       	movw	r22, r10
    166e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__divsf3>
    1672:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fixunssfsi>
    1676:	f4 01       	movw	r30, r8
    1678:	60 83       	st	Z, r22
    167a:	71 83       	std	Z+1, r23	; 0x01
    167c:	82 83       	std	Z+2, r24	; 0x02
    167e:	93 83       	std	Z+3, r25	; 0x03

}
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	08 95       	ret

00001696 <PutStr_ROM>:

// ==============================================
// Store a ROM string "str" to the "loc" location of DispBuf
//	
void PutStr_ROM(U8 loc, U8 *str)
{
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <PutStr_ROM+0xe>
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    1698:	e8 2f       	mov	r30, r24
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	e0 50       	subi	r30, 0x00	; 0
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	90 83       	st	Z, r25
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	fb 01       	movw	r30, r22
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	94 91       	lpm	r25, Z+
    16ac:	99 23       	and	r25, r25
    16ae:	a1 f7       	brne	.-24     	; 0x1698 <PutStr_ROM+0x2>
 	DispBuf[loc++] = tmp;
 	}
}
    16b0:	08 95       	ret

000016b2 <FillDisp>:

// ==============================================
// Fill a portion of display buffer start at 'startpos' of length 'len' with 'symbol'
//	
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <FillDisp+0x18>
    16ba:	f9 01       	movw	r30, r18
    16bc:	e8 0f       	add	r30, r24
    16be:	f9 1f       	adc	r31, r25
	DispBuf[startpos + tmp] = symbol;
    16c0:	e0 50       	subi	r30, 0x00	; 0
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	40 83       	st	Z, r20
    16c6:	2f 5f       	subi	r18, 0xFF	; 255
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    16ca:	26 17       	cp	r18, r22
    16cc:	b0 f3       	brcs	.-20     	; 0x16ba <FillDisp+0x8>
	DispBuf[startpos + tmp] = symbol;
	tmp++;
 	}

}
    16ce:	08 95       	ret

000016d0 <PutFreq>:
 	}

}

void	PutFreq(U32 *item, U32 freq)
{
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
 	freq = FreqMax;
 	}
 if(freq < FreqMin) {
 	freq = FreqMin;
 	}
 *item = freq;
    16d6:	ca 01       	movw	r24, r20
    16d8:	db 01       	movw	r26, r22
    16da:	80 34       	cpi	r24, 0x40	; 64
    16dc:	22 e4       	ldi	r18, 0x42	; 66
    16de:	92 07       	cpc	r25, r18
    16e0:	2f e0       	ldi	r18, 0x0F	; 15
    16e2:	a2 07       	cpc	r26, r18
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	b2 07       	cpc	r27, r18
    16e8:	20 f0       	brcs	.+8      	; 0x16f2 <PutFreq+0x22>
    16ea:	8f e3       	ldi	r24, 0x3F	; 63
    16ec:	92 e4       	ldi	r25, 0x42	; 66
    16ee:	af e0       	ldi	r26, 0x0F	; 15
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	88 83       	st	Y, r24
    16f4:	99 83       	std	Y+1, r25	; 0x01
    16f6:	aa 83       	std	Y+2, r26	; 0x02
    16f8:	bb 83       	std	Y+3, r27	; 0x03
 
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <SaveSetting>:
	}

}

void	SaveSetting(void)
{
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	c0 e0       	ldi	r28, 0x00	; 0
    1706:	d0 e0       	ldi	r29, 0x00	; 0
 U8	tmp;

 // Setup EEPROM
 tmp = 0;
 while(tmp < sizeof(FuncGen)) {
 	EE_Write((U16)&miniDDS_EE + tmp, *((U8*)&miniDDS + tmp));
    1708:	fe 01       	movw	r30, r28
    170a:	e7 58       	subi	r30, 0x87	; 135
    170c:	fe 4f       	sbci	r31, 0xFE	; 254
    170e:	ce 01       	movw	r24, r28
    1710:	8d 5f       	subi	r24, 0xFD	; 253
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
    171a:	21 96       	adiw	r28, 0x01	; 1
{
 U8	tmp;

 // Setup EEPROM
 tmp = 0;
 while(tmp < sizeof(FuncGen)) {
    171c:	ce 33       	cpi	r28, 0x3E	; 62
    171e:	d1 05       	cpc	r29, r1
    1720:	99 f7       	brne	.-26     	; 0x1708 <SaveSetting+0x8>
 	EE_Write((U16)&miniDDS_EE + tmp, *((U8*)&miniDDS + tmp));
	tmp++;
	}
 
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <DispWholeNum>:
// ==============================================
// Display whole number 'num' at 'startpos'. The maximun digits are 'maxlen' (including comma
//	at thousand position)
//
void	DispWholeNum(U8 startpos, U8 maxlen, U32 *num)
{
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	f8 2e       	mov	r15, r24
    1734:	16 2f       	mov	r17, r22
    1736:	fa 01       	movw	r30, r20
 U8 tmp;
 U8 tmp0, tmp1;
 
 BinToDec32(*num, (U8*)Strbuf);
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	43 e3       	ldi	r20, 0x33	; 51
    1742:	51 e0       	ldi	r21, 0x01	; 1
    1744:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
		Strbuf[tmp] = ' ';
    174c:	90 e2       	ldi	r25, 0x20	; 32
void	DispWholeNum(U8 startpos, U8 maxlen, U32 *num)
{
 U8 tmp;
 U8 tmp0, tmp1;
 
 BinToDec32(*num, (U8*)Strbuf);
    174e:	52 2f       	mov	r21, r18

 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
    1750:	f9 01       	movw	r30, r18
    1752:	ed 5c       	subi	r30, 0xCD	; 205
    1754:	fe 4f       	sbci	r31, 0xFE	; 254
    1756:	80 81       	ld	r24, Z
    1758:	80 33       	cpi	r24, 0x30	; 48
    175a:	39 f4       	brne	.+14     	; 0x176a <DispWholeNum+0x42>
		Strbuf[tmp] = ' ';
    175c:	90 83       	st	Z, r25
    175e:	5f 5f       	subi	r21, 0xFF	; 255
    1760:	2f 5f       	subi	r18, 0xFF	; 255
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
 
 BinToDec32(*num, (U8*)Strbuf);

 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
    1764:	29 30       	cpi	r18, 0x09	; 9
    1766:	31 05       	cpc	r19, r1
    1768:	91 f7       	brne	.-28     	; 0x174e <DispWholeNum+0x26>
	tmp++;
	}

 tmp0 = 0;
 tmp1 = 0;
 maxlen -= 1;
    176a:	01 2f       	mov	r16, r17
    176c:	01 50       	subi	r16, 0x01	; 1
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	10 e0       	ldi	r17, 0x00	; 0
	if(tmp0 == 3) {
		DispBuf[startpos + maxlen - tmp0] = (tmp < 7) ?  ',' : ' ';
		tmp1 = 1;
		}
	else {
		DispBuf[startpos + maxlen - tmp0] = Strbuf[9 - tmp0 + tmp1];
    1772:	20 2f       	mov	r18, r16
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	8f 2d       	mov	r24, r15
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	b9 01       	movw	r22, r18
    177c:	68 0f       	add	r22, r24
    177e:	79 1f       	adc	r23, r25
 tmp0 = 0;
 tmp1 = 0;
 maxlen -= 1;
 while(tmp0 <= maxlen) {
	if(tmp0 == 3) {
		DispBuf[startpos + maxlen - tmp0] = (tmp < 7) ?  ',' : ' ';
    1780:	eb 01       	movw	r28, r22
    1782:	c3 50       	subi	r28, 0x03	; 3
    1784:	df 4f       	sbci	r29, 0xFF	; 255

 tmp0 = 0;
 tmp1 = 0;
 maxlen -= 1;
 while(tmp0 <= maxlen) {
	if(tmp0 == 3) {
    1786:	43 30       	cpi	r20, 0x03	; 3
    1788:	41 f4       	brne	.+16     	; 0x179a <DispWholeNum+0x72>
		DispBuf[startpos + maxlen - tmp0] = (tmp < 7) ?  ',' : ' ';
    178a:	57 30       	cpi	r21, 0x07	; 7
    178c:	10 f0       	brcs	.+4      	; 0x1792 <DispWholeNum+0x6a>
    178e:	80 e2       	ldi	r24, 0x20	; 32
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <DispWholeNum+0x6c>
    1792:	8c e2       	ldi	r24, 0x2C	; 44
    1794:	88 83       	st	Y, r24
    1796:	11 e0       	ldi	r17, 0x01	; 1
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <DispWholeNum+0x90>
		tmp1 = 1;
		}
	else {
		DispBuf[startpos + maxlen - tmp0] = Strbuf[9 - tmp0 + tmp1];
    179a:	84 2f       	mov	r24, r20
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	db 01       	movw	r26, r22
    17a0:	a8 1b       	sub	r26, r24
    17a2:	b9 0b       	sbc	r27, r25
    17a4:	e1 2f       	mov	r30, r17
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	e8 1b       	sub	r30, r24
    17aa:	f9 0b       	sbc	r31, r25
    17ac:	e4 5c       	subi	r30, 0xC4	; 196
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	80 81       	ld	r24, Z
    17b2:	a0 50       	subi	r26, 0x00	; 0
    17b4:	bf 4f       	sbci	r27, 0xFF	; 255
    17b6:	8c 93       	st	X, r24
		}
	tmp0++;
    17b8:	4f 5f       	subi	r20, 0xFF	; 255
	}

 tmp0 = 0;
 tmp1 = 0;
 maxlen -= 1;
 while(tmp0 <= maxlen) {
    17ba:	04 17       	cp	r16, r20
    17bc:	20 f7       	brcc	.-56     	; 0x1786 <DispWholeNum+0x5e>
		DispBuf[startpos + maxlen - tmp0] = Strbuf[9 - tmp0 + tmp1];
		}
	tmp0++;
 	}

}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	ff 90       	pop	r15
    17c8:	08 95       	ret

000017ca <ShowStep>:
 SendSweep();
}
*/

void	ShowStep(void)
{
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    17ce:	20 e2       	ldi	r18, 0x20	; 32
    17d0:	fc 01       	movw	r30, r24
    17d2:	e0 50       	subi	r30, 0x00	; 0
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	20 83       	st	Z, r18
    17d8:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    17da:	80 32       	cpi	r24, 0x20	; 32
    17dc:	91 05       	cpc	r25, r1
    17de:	c1 f7       	brne	.-16     	; 0x17d0 <ShowStep+0x6>
 U8	tmp;
 
 // Display title
 ClearDisp();

 if(KeyParam == 'H') {
    17e0:	80 91 26 01 	lds	r24, 0x0126
    17e4:	88 34       	cpi	r24, 0x48	; 72
    17e6:	19 f0       	breq	.+6      	; 0x17ee <ShowStep+0x24>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	2b c0       	rjmp	.+86     	; 0x1844 <ShowStep+0x7a>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <ShowStep+0x34>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    17f4:	e3 2f       	mov	r30, r19
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	e0 50       	subi	r30, 0x00	; 0
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	20 83       	st	Z, r18
    17fe:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    1800:	fc 01       	movw	r30, r24
    1802:	e5 57       	subi	r30, 0x75	; 117
    1804:	fb 4f       	sbci	r31, 0xFB	; 251
    1806:	24 91       	lpm	r18, Z+
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	22 23       	and	r18, r18
    180c:	99 f7       	brne	.-26     	; 0x17f4 <ShowStep+0x2a>
 // Display title
 ClearDisp();

 if(KeyParam == 'H') {
 	PutStr_ROM(StepTitle_DispStart, (U8 *)FreqStep);
	DispBuf[StepDigit_DispStart + StepUnit_Ofs] = 'H';
    180e:	88 e4       	ldi	r24, 0x48	; 72
    1810:	80 93 1b 01 	sts	0x011B, r24
	DispBuf[StepDigit_DispStart + StepUnit_Ofs + 1] = 'z';
    1814:	8a e7       	ldi	r24, 0x7A	; 122
    1816:	80 93 1c 01 	sts	0x011C, r24
 	BinToDec32(miniDDS.FreqIncStep, (U8*)Strbuf);
    181a:	60 91 89 01 	lds	r22, 0x0189
    181e:	70 91 8a 01 	lds	r23, 0x018A
    1822:	80 91 8b 01 	lds	r24, 0x018B
    1826:	90 91 8c 01 	lds	r25, 0x018C
    182a:	43 e3       	ldi	r20, 0x33	; 51
    182c:	51 e0       	ldi	r21, 0x01	; 1
    182e:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
		Strbuf[tmp] = ' ';
    1836:	90 e2       	ldi	r25, 0x20	; 32
    1838:	1c c0       	rjmp	.+56     	; 0x1872 <ShowStep+0xa8>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    183a:	e3 2f       	mov	r30, r19
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	e0 50       	subi	r30, 0x00	; 0
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	20 83       	st	Z, r18
    1844:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    1846:	fc 01       	movw	r30, r24
    1848:	e6 56       	subi	r30, 0x66	; 102
    184a:	fb 4f       	sbci	r31, 0xFB	; 251
    184c:	24 91       	lpm	r18, Z+
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	22 23       	and	r18, r18
    1852:	99 f7       	brne	.-26     	; 0x183a <ShowStep+0x70>
	DispBuf[StepDigit_DispStart + StepUnit_Ofs + 1] = 'z';
 	BinToDec32(miniDDS.FreqIncStep, (U8*)Strbuf);
 	}
 else {
 	PutStr_ROM(StepTitle_DispStart, (U8 *)TimeStep);
	DispBuf[StepDigit_DispStart + StepUnit_Ofs] = 'm';
    1854:	8d e6       	ldi	r24, 0x6D	; 109
    1856:	80 93 1b 01 	sts	0x011B, r24
	DispBuf[StepDigit_DispStart + StepUnit_Ofs + 1] = 's';
    185a:	83 e7       	ldi	r24, 0x73	; 115
    185c:	80 93 1c 01 	sts	0x011C, r24
 	BinToDec32(miniDDS.CycleIncStep, (U8*)Strbuf);
    1860:	60 91 8d 01 	lds	r22, 0x018D
    1864:	70 91 8e 01 	lds	r23, 0x018E
    1868:	80 91 8f 01 	lds	r24, 0x018F
    186c:	90 91 90 01 	lds	r25, 0x0190
    1870:	dc cf       	rjmp	.-72     	; 0x182a <ShowStep+0x60>

 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
    1872:	f9 01       	movw	r30, r18
    1874:	ed 5c       	subi	r30, 0xCD	; 205
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	80 81       	ld	r24, Z
    187a:	80 33       	cpi	r24, 0x30	; 48
    187c:	19 f0       	breq	.+6      	; 0x1884 <ShowStep+0xba>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	07 c0       	rjmp	.+14     	; 0x1892 <ShowStep+0xc8>
		Strbuf[tmp] = ' ';
    1884:	90 83       	st	Z, r25
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
 	BinToDec32(miniDDS.CycleIncStep, (U8*)Strbuf);
 	}

 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
    188a:	29 30       	cpi	r18, 0x09	; 9
    188c:	31 05       	cpc	r19, r1
    188e:	89 f7       	brne	.-30     	; 0x1872 <ShowStep+0xa8>
    1890:	f6 cf       	rjmp	.-20     	; 0x187e <ShowStep+0xb4>
	tmp++;
	}

 tmp = 0;
 while(tmp < 10) {
	DispBuf[StepDigit_DispStart + tmp] = Strbuf[tmp];
    1892:	f9 01       	movw	r30, r18
    1894:	ed 5c       	subi	r30, 0xCD	; 205
    1896:	fe 4f       	sbci	r31, 0xFE	; 254
    1898:	80 81       	ld	r24, Z
    189a:	f9 01       	movw	r30, r18
    189c:	e0 5f       	subi	r30, 0xF0	; 240
    189e:	fe 4f       	sbci	r31, 0xFE	; 254
    18a0:	80 83       	st	Z, r24
    18a2:	2f 5f       	subi	r18, 0xFF	; 255
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
		}
	tmp++;
	}

 tmp = 0;
 while(tmp < 10) {
    18a6:	2a 30       	cpi	r18, 0x0A	; 10
    18a8:	31 05       	cpc	r19, r1
    18aa:	99 f7       	brne	.-26     	; 0x1892 <ShowStep+0xc8>
	DispBuf[StepDigit_DispStart + tmp] = Strbuf[tmp];
	tmp++;
 	}
 
 BitSet8(Flags, (1 << Flags_DispUpdate));
    18ac:	80 91 4d 01 	lds	r24, 0x014D
    18b0:	80 68       	ori	r24, 0x80	; 128
    18b2:	80 93 4d 01 	sts	0x014D, r24

}
    18b6:	08 95       	ret

000018b8 <SendServoRun>:
}

void	SendServoRun(void)
{

 Strbuf[0] = KS_ServoRun;
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	80 93 33 01 	sts	0x0133, r24
 Strbuf[1] = CurrFocus;
    18be:	80 91 b9 01 	lds	r24, 0x01B9
    18c2:	80 93 34 01 	sts	0x0134, r24
 *(U16 *)&Strbuf[2] = miniDDS.ServoPWmin;
    18c6:	80 91 95 01 	lds	r24, 0x0195
    18ca:	90 91 96 01 	lds	r25, 0x0196
    18ce:	90 93 36 01 	sts	0x0136, r25
    18d2:	80 93 35 01 	sts	0x0135, r24
 *(U16 *)&Strbuf[4] = miniDDS.ServoPWmax;
    18d6:	80 91 97 01 	lds	r24, 0x0197
    18da:	90 91 98 01 	lds	r25, 0x0198
    18de:	90 93 38 01 	sts	0x0138, r25
    18e2:	80 93 37 01 	sts	0x0137, r24
 *(U16 *)&Strbuf[6] = miniDDS.ServoRunStep;
    18e6:	80 91 9d 01 	lds	r24, 0x019D
    18ea:	90 91 9e 01 	lds	r25, 0x019E
    18ee:	90 93 3a 01 	sts	0x013A, r25
    18f2:	80 93 39 01 	sts	0x0139, r24
 *(U16 *)&Strbuf[8] = miniDDS.ServoRunRate;
    18f6:	80 91 9f 01 	lds	r24, 0x019F
    18fa:	90 91 a0 01 	lds	r25, 0x01A0
    18fe:	90 93 3c 01 	sts	0x013C, r25
    1902:	80 93 3b 01 	sts	0x013B, r24
 *(U16 *)&Strbuf[10] = miniDDS.ServoCycle;
    1906:	80 91 a1 01 	lds	r24, 0x01A1
    190a:	90 91 a2 01 	lds	r25, 0x01A2
    190e:	90 93 3e 01 	sts	0x013E, r25
    1912:	80 93 3d 01 	sts	0x013D, r24
 Strbuf[9] = (U8)((miniDDS.ServoRunRate >> 8) & 0xFF);
 Strbuf[10] = (U8)(miniDDS.ServoCycle & 0xFF);
 Strbuf[11] = (U8)((miniDDS.ServoCycle >> 8) & 0xFF);
*/ 	

 SendBuf((U8*)Strbuf);
    1916:	83 e3       	ldi	r24, 0x33	; 51
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>
}
    191e:	08 95       	ret

00001920 <ShowServoRun>:

 SendServoPos();
}

void	ShowServoRun(void)
{
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    1924:	20 e2       	ldi	r18, 0x20	; 32
    1926:	fc 01       	movw	r30, r24
    1928:	e0 50       	subi	r30, 0x00	; 0
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	20 83       	st	Z, r18
    192e:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    1930:	80 32       	cpi	r24, 0x20	; 32
    1932:	91 05       	cpc	r25, r1
    1934:	c1 f7       	brne	.-16     	; 0x1926 <ShowServoRun+0x6>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <ShowServoRun+0x26>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    193c:	e3 2f       	mov	r30, r19
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	e0 50       	subi	r30, 0x00	; 0
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	20 83       	st	Z, r18
    1946:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    1948:	fc 01       	movw	r30, r24
    194a:	ed 5a       	subi	r30, 0xAD	; 173
    194c:	fb 4f       	sbci	r31, 0xFB	; 251
    194e:	24 91       	lpm	r18, Z+
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	22 23       	and	r18, r18
    1954:	99 f7       	brne	.-26     	; 0x193c <ShowServoRun+0x1c>

void	ShowServoRun(void)
{
 ClearDisp();
 PutStr_ROM(ServoRun_DispStart, (U8 *)ServoRun);
 PutStr_ROM(ServoRunState_DispStart, (U8 *)ServoRunState[CurrFocus]);
    1956:	80 91 b9 01 	lds	r24, 0x01B9
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	f3 e0       	ldi	r31, 0x03	; 3
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	fa 95       	dec	r31
    1964:	e1 f7       	brne	.-8      	; 0x195e <ShowServoRun+0x3e>
    1966:	8c 59       	subi	r24, 0x9C	; 156
    1968:	9b 4f       	sbci	r25, 0xFB	; 251
    196a:	20 e1       	ldi	r18, 0x10	; 16
    196c:	06 c0       	rjmp	.+12     	; 0x197a <ShowServoRun+0x5a>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    196e:	e2 2f       	mov	r30, r18
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	e0 50       	subi	r30, 0x00	; 0
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	30 83       	st	Z, r19
    1978:	2f 5f       	subi	r18, 0xFF	; 255
    197a:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	34 91       	lpm	r19, Z+
    1980:	33 23       	and	r19, r19
    1982:	a9 f7       	brne	.-22     	; 0x196e <ShowServoRun+0x4e>
{
 ClearDisp();
 PutStr_ROM(ServoRun_DispStart, (U8 *)ServoRun);
 PutStr_ROM(ServoRunState_DispStart, (U8 *)ServoRunState[CurrFocus]);

 BitSet8(Flags, (1 << Flags_DispUpdate));
    1984:	80 91 4d 01 	lds	r24, 0x014D
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	80 93 4d 01 	sts	0x014D, r24

 SendServoRun();
    198e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <SendServoRun>
}
    1992:	08 95       	ret

00001994 <SendServoPos>:
}

void	SendServoPos(void)
{

 Strbuf[0] = KS_ServoPos;
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	80 93 33 01 	sts	0x0133, r24
 Strbuf[1] = 0;
    199a:	10 92 34 01 	sts	0x0134, r1
 *(U16 *)&Strbuf[2] = miniDDS.ServoPWcurr;
    199e:	80 91 91 01 	lds	r24, 0x0191
    19a2:	90 91 92 01 	lds	r25, 0x0192
    19a6:	90 93 36 01 	sts	0x0136, r25
    19aa:	80 93 35 01 	sts	0x0135, r24
 *(U16 *)&Strbuf[4] = miniDDS.ServoCycle;
    19ae:	80 91 a1 01 	lds	r24, 0x01A1
    19b2:	90 91 a2 01 	lds	r25, 0x01A2
    19b6:	90 93 38 01 	sts	0x0138, r25
    19ba:	80 93 37 01 	sts	0x0137, r24
 Strbuf[8] = 0;
 Strbuf[9] = 0;
 Strbuf[10] = 0;
 Strbuf[11] = 0;
*/
 SendBuf((U8*)Strbuf);
    19be:	83 e3       	ldi	r24, 0x33	; 51
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>

}
    19c6:	08 95       	ret

000019c8 <SendSweep>:
 
 SendBuf((U8*)Strbuf);
}

void	SendSweep(void)
{
    19c8:	6f 92       	push	r6
    19ca:	7f 92       	push	r7
    19cc:	8f 92       	push	r8
    19ce:	9f 92       	push	r9
    19d0:	af 92       	push	r10
    19d2:	bf 92       	push	r11
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
//	[2:5]:	DeltaPhase for Fstart
//	[6:9]:	DeltaPhase incremental
//	[10:13]:	Sweeping Steps
//	[14:15]:	Tsw Step size

 Strbuf[0] = KS_Sweep;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 93 33 01 	sts	0x0133, r24

 tmp3 = 0x00;
 if(TrigCtrl == '*') {
    19e6:	80 91 b8 01 	lds	r24, 0x01B8
    19ea:	8a 32       	cpi	r24, 0x2A	; 42
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <SendSweep+0x2a>
    19ee:	90 e4       	ldi	r25, 0x40	; 64
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <SendSweep+0x2c>
    19f2:	90 e0       	ldi	r25, 0x00	; 0
 	tmp3 = 0x40;
 	}

 tmp4 = 0;
 if(miniDDS.SweepDir == 'B') {
    19f4:	80 91 b5 01 	lds	r24, 0x01B5
    19f8:	82 34       	cpi	r24, 0x42	; 66
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <SendSweep+0x38>
    19fc:	20 e2       	ldi	r18, 0x20	; 32
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <SendSweep+0x3a>
    1a00:	20 e0       	ldi	r18, 0x00	; 0
 	tmp4 = 0x20;
 	}

 Strbuf[1] = (miniDDS.CurrWave & 0x1F) | tmp3 | tmp4;
    1a02:	80 91 88 01 	lds	r24, 0x0188
    1a06:	8f 71       	andi	r24, 0x1F	; 31
    1a08:	98 2b       	or	r25, r24
    1a0a:	92 2b       	or	r25, r18
    1a0c:	90 93 34 01 	sts	0x0134, r25
*/

 // Calculate DeltaPhase for start and stop frequency
 //	Strbuf[2] holds the DeltaPhase for start freq. 
 //	Strbuf[6] holds the DeltaPhase for stop freq. 
 CalDeltaPhase((U32 *)&miniDDS.SweepStartFreq, (U32 *)&Strbuf[2], (FG_SYSCLK/8.0));
    1a10:	85 ea       	ldi	r24, 0xA5	; 165
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	65 e3       	ldi	r22, 0x35	; 53
    1a16:	71 e0       	ldi	r23, 0x01	; 1
    1a18:	20 e8       	ldi	r18, 0x80	; 128
    1a1a:	36 e9       	ldi	r19, 0x96	; 150
    1a1c:	48 e1       	ldi	r20, 0x18	; 24
    1a1e:	5a e4       	ldi	r21, 0x4A	; 74
    1a20:	0e 94 15 0b 	call	0x162a	; 0x162a <CalDeltaPhase>
 CalDeltaPhase((U32 *)&miniDDS.SweepStopFreq, (U32 *)&Strbuf[6], (FG_SYSCLK/8.0));
    1a24:	89 ea       	ldi	r24, 0xA9	; 169
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	69 e3       	ldi	r22, 0x39	; 57
    1a2a:	71 e0       	ldi	r23, 0x01	; 1
    1a2c:	20 e8       	ldi	r18, 0x80	; 128
    1a2e:	36 e9       	ldi	r19, 0x96	; 150
    1a30:	48 e1       	ldi	r20, 0x18	; 24
    1a32:	5a e4       	ldi	r21, 0x4A	; 74
    1a34:	0e 94 15 0b 	call	0x162a	; 0x162a <CalDeltaPhase>


 // Sweeping steps
 tmp2 = (miniDDS.SweepTime/miniDDS.SweepTswStep);
    1a38:	60 90 b1 01 	lds	r6, 0x01B1
    1a3c:	70 90 b2 01 	lds	r7, 0x01B2
    1a40:	80 90 b3 01 	lds	r8, 0x01B3
    1a44:	90 90 b4 01 	lds	r9, 0x01B4
    1a48:	60 91 ad 01 	lds	r22, 0x01AD
    1a4c:	70 91 ae 01 	lds	r23, 0x01AE
    1a50:	80 91 af 01 	lds	r24, 0x01AF
    1a54:	90 91 b0 01 	lds	r25, 0x01B0
    1a58:	a4 01       	movw	r20, r8
    1a5a:	93 01       	movw	r18, r6
    1a5c:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    1a60:	c9 01       	movw	r24, r18
    1a62:	da 01       	movw	r26, r20
    1a64:	5c 01       	movw	r10, r24
    1a66:	6d 01       	movw	r12, r26
 if(tmp2 == 0) {
    1a68:	a1 14       	cp	r10, r1
    1a6a:	b1 04       	cpc	r11, r1
    1a6c:	c1 04       	cpc	r12, r1
    1a6e:	d1 04       	cpc	r13, r1
    1a70:	29 f4       	brne	.+10     	; 0x1a7c <SendSweep+0xb4>
    1a72:	b1 e0       	ldi	r27, 0x01	; 1
    1a74:	ab 2e       	mov	r10, r27
    1a76:	b1 2c       	mov	r11, r1
    1a78:	c1 2c       	mov	r12, r1
    1a7a:	d1 2c       	mov	r13, r1
 	tmp2 = 1;
 	}
 
 // Calculate delta DeltaPhase
 tmp0 = *((U32 *)&Strbuf[6]) - *((U32 *)&Strbuf[2]);	// This is the DeltaPhase difference between Fstrat and Fstop
 *((S32 *)&Strbuf[6]) = (S32)(((float)(tmp0 * 256))/((float)(tmp2))); // (*256) because delta DeltaPhase uses 32 bits. DeltaPhase uses only 24 bits.
    1a7c:	60 91 39 01 	lds	r22, 0x0139
    1a80:	70 91 3a 01 	lds	r23, 0x013A
    1a84:	80 91 3b 01 	lds	r24, 0x013B
    1a88:	90 91 3c 01 	lds	r25, 0x013C
    1a8c:	20 91 35 01 	lds	r18, 0x0135
    1a90:	30 91 36 01 	lds	r19, 0x0136
    1a94:	40 91 37 01 	lds	r20, 0x0137
    1a98:	50 91 38 01 	lds	r21, 0x0138
    1a9c:	62 1b       	sub	r22, r18
    1a9e:	73 0b       	sbc	r23, r19
    1aa0:	84 0b       	sbc	r24, r20
    1aa2:	95 0b       	sbc	r25, r21
    1aa4:	98 2f       	mov	r25, r24
    1aa6:	87 2f       	mov	r24, r23
    1aa8:	76 2f       	mov	r23, r22
    1aaa:	66 27       	eor	r22, r22
    1aac:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__floatsisf>
    1ab0:	7b 01       	movw	r14, r22
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	b5 01       	movw	r22, r10
    1ab8:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__floatunsisf>
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	b7 01       	movw	r22, r14
    1ac4:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__divsf3>
    1ac8:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__fixsfsi>
    1acc:	60 93 39 01 	sts	0x0139, r22
    1ad0:	70 93 3a 01 	sts	0x013A, r23
    1ad4:	80 93 3b 01 	sts	0x013B, r24
    1ad8:	90 93 3c 01 	sts	0x013C, r25
 u0putc((U8)Strbuf[6]);
*/

 // Send (2^32 - Sweeping Step)
 // An additional step for Fstop
 *((U32 *)&Strbuf[10]) = 0x100000000L - (tmp2 + 1);
    1adc:	a0 94       	com	r10
    1ade:	b0 94       	com	r11
    1ae0:	c0 94       	com	r12
    1ae2:	d0 94       	com	r13
    1ae4:	a0 92 3d 01 	sts	0x013D, r10
    1ae8:	b0 92 3e 01 	sts	0x013E, r11
    1aec:	c0 92 3f 01 	sts	0x013F, r12
    1af0:	d0 92 40 01 	sts	0x0140, r13

 // Tsw Step. Send (2^16 - TswStep)
 *((U16 *)&Strbuf[14]) = 0x10000 - miniDDS.SweepTswStep;
    1af4:	88 27       	eor	r24, r24
    1af6:	99 27       	eor	r25, r25
    1af8:	86 19       	sub	r24, r6
    1afa:	97 09       	sbc	r25, r7
    1afc:	90 93 42 01 	sts	0x0142, r25
    1b00:	80 93 41 01 	sts	0x0141, r24

  Strbuf[16] = ((U16)miniDDS.Duty << 8)/100;
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 91 b6 01 	lds	r25, 0x01B6
    1b0a:	64 e6       	ldi	r22, 0x64	; 100
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <__udivmodhi4>
    1b12:	60 93 43 01 	sts	0x0143, r22

 SendBuf((U8*)Strbuf);
    1b16:	83 e3       	ldi	r24, 0x33	; 51
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>
		miniDDS.SweepStopFreq = miniDDS.SweepCentertFreq + miniDDS.SweepSpanFreq/2;
		break;
*/

 	
}
    1b1e:	1f 91       	pop	r17
    1b20:	0f 91       	pop	r16
    1b22:	ff 90       	pop	r15
    1b24:	ef 90       	pop	r14
    1b26:	df 90       	pop	r13
    1b28:	cf 90       	pop	r12
    1b2a:	bf 90       	pop	r11
    1b2c:	af 90       	pop	r10
    1b2e:	9f 90       	pop	r9
    1b30:	8f 90       	pop	r8
    1b32:	7f 90       	pop	r7
    1b34:	6f 90       	pop	r6
    1b36:	08 95       	ret

00001b38 <SendDDS>:
 //   If Fout is specified as period Tout in mSec
 //
 //	[DeltaPhase] = 1000 / ( Tout * (10000.0 / 2^24) )
 //
 //
 if(miniDDS.SetType == SetType_Freq) {
    1b38:	80 91 7e 01 	lds	r24, 0x017E
    1b3c:	88 23       	and	r24, r24
    1b3e:	11 f5       	brne	.+68     	; 0x1b84 <SendDDS+0x4c>
 	if(miniDDS.Freq > 40) {
    1b40:	80 91 7a 01 	lds	r24, 0x017A
    1b44:	90 91 7b 01 	lds	r25, 0x017B
    1b48:	a0 91 7c 01 	lds	r26, 0x017C
    1b4c:	b0 91 7d 01 	lds	r27, 0x017D
    1b50:	89 97       	sbiw	r24, 0x29	; 41
    1b52:	a1 05       	cpc	r26, r1
    1b54:	b1 05       	cpc	r27, r1
    1b56:	58 f0       	brcs	.+22     	; 0x1b6e <SendDDS+0x36>
		// Use High Freq. Mode for frequency > 40Hz
		CalDeltaPhase((U32 *)&miniDDS.Freq, (U32 *)&Strbuf[2], (FG_SYSCLK/8.0));
    1b58:	8a e7       	ldi	r24, 0x7A	; 122
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	65 e3       	ldi	r22, 0x35	; 53
    1b5e:	71 e0       	ldi	r23, 0x01	; 1
    1b60:	20 e8       	ldi	r18, 0x80	; 128
    1b62:	36 e9       	ldi	r19, 0x96	; 150
    1b64:	48 e1       	ldi	r20, 0x18	; 24
    1b66:	5a e4       	ldi	r21, 0x4A	; 74
    1b68:	0e 94 15 0b 	call	0x162a	; 0x162a <CalDeltaPhase>
    1b6c:	2c c0       	rjmp	.+88     	; 0x1bc6 <SendDDS+0x8e>
		tmp1 = 0x00;
 		}
	else {
		// Use Low Freq. Mode
		CalDeltaPhase((U32 *)&miniDDS.Freq, (U32 *)&Strbuf[2], 10000.0);
    1b6e:	8a e7       	ldi	r24, 0x7A	; 122
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	65 e3       	ldi	r22, 0x35	; 53
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e4       	ldi	r19, 0x40	; 64
    1b7a:	4c e1       	ldi	r20, 0x1C	; 28
    1b7c:	56 e4       	ldi	r21, 0x46	; 70
    1b7e:	0e 94 15 0b 	call	0x162a	; 0x162a <CalDeltaPhase>
    1b82:	37 c0       	rjmp	.+110    	; 0x1bf2 <SendDDS+0xba>
		tmp1 = 0x80;
		}
 	}
 else {
 	if(miniDDS.Freq < 25) {
    1b84:	60 91 7a 01 	lds	r22, 0x017A
    1b88:	70 91 7b 01 	lds	r23, 0x017B
    1b8c:	80 91 7c 01 	lds	r24, 0x017C
    1b90:	90 91 7d 01 	lds	r25, 0x017D
    1b94:	69 31       	cpi	r22, 0x19	; 25
    1b96:	71 05       	cpc	r23, r1
    1b98:	81 05       	cpc	r24, r1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	b0 f4       	brcc	.+44     	; 0x1bca <SendDDS+0x92>
		// Still use High Freq. Mode for period < 25ms
 		*(U32 *)(&Strbuf[2]) = (U32)((1000.0 * (16777216.0/(FG_SYSCLK/8.0))) / ((float)miniDDS.Freq ));
    1b9e:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__floatunsisf>
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	68 e1       	ldi	r22, 0x18	; 24
    1ba8:	77 eb       	ldi	r23, 0xB7	; 183
    1baa:	81 ed       	ldi	r24, 0xD1	; 209
    1bac:	95 e4       	ldi	r25, 0x45	; 69
    1bae:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__divsf3>
    1bb2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fixunssfsi>
    1bb6:	60 93 35 01 	sts	0x0135, r22
    1bba:	70 93 36 01 	sts	0x0136, r23
    1bbe:	80 93 37 01 	sts	0x0137, r24
    1bc2:	90 93 38 01 	sts	0x0138, r25
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	15 c0       	rjmp	.+42     	; 0x1bf4 <SendDDS+0xbc>
		tmp1 = 0x00;
 		}
	else {
		// Use Low Freq. Mode for period >= 25ms
 		*(U32 *)(&Strbuf[2]) = (U32)((1000.0 * (16777216.0 / 10000.0)) / ((float)miniDDS.Freq ));
    1bca:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <__floatunsisf>
    1bce:	9b 01       	movw	r18, r22
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	6c ec       	ldi	r22, 0xCC	; 204
    1bd4:	7c ec       	ldi	r23, 0xCC	; 204
    1bd6:	8c ec       	ldi	r24, 0xCC	; 204
    1bd8:	99 e4       	ldi	r25, 0x49	; 73
    1bda:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__divsf3>
    1bde:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__fixunssfsi>
    1be2:	60 93 35 01 	sts	0x0135, r22
    1be6:	70 93 36 01 	sts	0x0136, r23
    1bea:	80 93 37 01 	sts	0x0137, r24
    1bee:	90 93 38 01 	sts	0x0138, r25
    1bf2:	90 e8       	ldi	r25, 0x80	; 128
		}
 	}

 // Trig contral enable/disable bit
 tmp2 = 0x00;
 if(TrigCtrl == '*') {
    1bf4:	80 91 b8 01 	lds	r24, 0x01B8
    1bf8:	8a 32       	cpi	r24, 0x2A	; 42
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <SendDDS+0xc8>
    1bfc:	20 e4       	ldi	r18, 0x40	; 64
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <SendDDS+0xca>
    1c00:	20 e0       	ldi	r18, 0x00	; 0
 	tmp2 = 0x40;
 	}

 Strbuf[0] = KS_CW;
    1c02:	10 92 33 01 	sts	0x0133, r1
 Strbuf[1] = (miniDDS.CurrWave & 0x1F) | tmp1 | tmp2;
    1c06:	80 91 88 01 	lds	r24, 0x0188
    1c0a:	8f 71       	andi	r24, 0x1F	; 31
    1c0c:	98 2b       	or	r25, r24
    1c0e:	92 2b       	or	r25, r18
    1c10:	90 93 34 01 	sts	0x0134, r25
 Strbuf[8] = 0;
 Strbuf[9] = 0;
 Strbuf[10] = 0;
 Strbuf[11] = 0;
*/
 Strbuf[16] = ((U16)miniDDS.Duty * 255)/100;
    1c14:	90 91 b6 01 	lds	r25, 0x01B6
    1c18:	8f ef       	ldi	r24, 0xFF	; 255
    1c1a:	98 9f       	mul	r25, r24
    1c1c:	c0 01       	movw	r24, r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	64 e6       	ldi	r22, 0x64	; 100
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <__udivmodhi4>
    1c28:	60 93 43 01 	sts	0x0143, r22

// u0putc(Strbuf[16]);
 
 SendBuf((U8*)Strbuf);
    1c2c:	83 e3       	ldi	r24, 0x33	; 51
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>
}
    1c34:	08 95       	ret

00001c36 <ShowDuty>:
 BitSet8(Flags, (1 << Flags_DispUpdate));

}

void	ShowDuty(void)
{
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    1c3a:	20 e2       	ldi	r18, 0x20	; 32
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e0 50       	subi	r30, 0x00	; 0
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	20 83       	st	Z, r18
    1c44:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    1c46:	80 32       	cpi	r24, 0x20	; 32
    1c48:	91 05       	cpc	r25, r1
    1c4a:	c1 f7       	brne	.-16     	; 0x1c3c <ShowDuty+0x6>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <ShowDuty+0x26>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    1c52:	e3 2f       	mov	r30, r19
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	e0 50       	subi	r30, 0x00	; 0
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	20 83       	st	Z, r18
    1c5c:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e7 55       	subi	r30, 0x57	; 87
    1c62:	fb 4f       	sbci	r31, 0xFB	; 251
    1c64:	24 91       	lpm	r18, Z+
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	22 23       	and	r18, r18
    1c6a:	99 f7       	brne	.-26     	; 0x1c52 <ShowDuty+0x1c>

 // Display title
 ClearDisp();
 PutStr_ROM(0, (U8 *)Duty);

 BinToDec32((U32)miniDDS.Duty, (U8*)Strbuf);
    1c6c:	60 91 b6 01 	lds	r22, 0x01B6
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	43 e3       	ldi	r20, 0x33	; 51
    1c78:	51 e0       	ldi	r21, 0x01	; 1
    1c7a:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
		Strbuf[tmp] = ' ';
    1c82:	90 e2       	ldi	r25, 0x20	; 32
 
 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
    1c84:	f9 01       	movw	r30, r18
    1c86:	ed 5c       	subi	r30, 0xCD	; 205
    1c88:	fe 4f       	sbci	r31, 0xFE	; 254
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 33       	cpi	r24, 0x30	; 48
    1c8e:	a1 f0       	breq	.+40     	; 0x1cb8 <ShowDuty+0x82>
	tmp++;
	}

 tmp = 0;
 while(tmp < 3) {
	DispBuf[17 + tmp] = Strbuf[7 +tmp];
    1c90:	80 91 3a 01 	lds	r24, 0x013A
    1c94:	80 93 11 01 	sts	0x0111, r24
    1c98:	80 91 3b 01 	lds	r24, 0x013B
    1c9c:	80 93 12 01 	sts	0x0112, r24
    1ca0:	80 91 3c 01 	lds	r24, 0x013C
    1ca4:	80 93 13 01 	sts	0x0113, r24
	tmp++;
 	}
 
 BitSet8(Flags, (1 << Flags_DispUpdate));
    1ca8:	80 91 4d 01 	lds	r24, 0x014D
    1cac:	80 68       	ori	r24, 0x80	; 128
    1cae:	80 93 4d 01 	sts	0x014D, r24

 SendDDS();
    1cb2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <SendDDS>
}
    1cb6:	08 95       	ret
 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
		Strbuf[tmp] = ' ';
    1cb8:	90 83       	st	Z, r25
    1cba:	2f 5f       	subi	r18, 0xFF	; 255
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255

 BinToDec32((U32)miniDDS.Duty, (U8*)Strbuf);
 
 // Remove leading zeros
 tmp = 0;
 while(tmp < 9)  {
    1cbe:	29 30       	cpi	r18, 0x09	; 9
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	01 f7       	brne	.-64     	; 0x1c84 <ShowDuty+0x4e>
    1cc4:	e5 cf       	rjmp	.-54     	; 0x1c90 <ShowDuty+0x5a>

00001cc6 <DutyInputHandle>:
 ShowFocus();
}

void	DutyInputHandle(void)
{
 switch(NumInput.EndKey) {
    1cc6:	80 91 75 01 	lds	r24, 0x0175
    1cca:	8f 50       	subi	r24, 0x0F	; 15
    1ccc:	82 30       	cpi	r24, 0x02	; 2
    1cce:	28 f5       	brcc	.+74     	; 0x1d1a <DutyInputHandle+0x54>
	case KC_Hz:
	case KC_KHz:
		if(CalWholePart()) {
    1cd0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    1cd4:	88 23       	and	r24, r24
    1cd6:	09 f1       	breq	.+66     	; 0x1d1a <DutyInputHandle+0x54>
			if(NumInput.DataValue > 100) {
    1cd8:	80 91 71 01 	lds	r24, 0x0171
    1cdc:	90 91 72 01 	lds	r25, 0x0172
    1ce0:	a0 91 73 01 	lds	r26, 0x0173
    1ce4:	b0 91 74 01 	lds	r27, 0x0174
    1ce8:	85 36       	cpi	r24, 0x65	; 101
    1cea:	91 05       	cpc	r25, r1
    1cec:	a1 05       	cpc	r26, r1
    1cee:	b1 05       	cpc	r27, r1
    1cf0:	60 f0       	brcs	.+24     	; 0x1d0a <DutyInputHandle+0x44>
				NumInput.DataValue = 100;
    1cf2:	84 e6       	ldi	r24, 0x64	; 100
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e0       	ldi	r26, 0x00	; 0
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	80 93 71 01 	sts	0x0171, r24
    1cfe:	90 93 72 01 	sts	0x0172, r25
    1d02:	a0 93 73 01 	sts	0x0173, r26
    1d06:	b0 93 74 01 	sts	0x0174, r27
				}
			miniDDS.Duty = NumInput.DataValue;
    1d0a:	60 91 71 01 	lds	r22, 0x0171
    1d0e:	60 93 b6 01 	sts	0x01B6, r22
			EE_Write((U16)&miniDDS_EE.Duty, miniDDS.Duty);
    1d12:	80 e4       	ldi	r24, 0x40	; 64
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
			}
	case KC_ESC:
	default:
		break;
	}
 ShowDuty();
    1d1a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <ShowDuty>
}
    1d1e:	08 95       	ret

00001d20 <SetDuty>:
}

void	SetDuty(void)
{
 // Display title
 ShowDuty();
    1d20:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <ShowDuty>
// ClearDisp();
// PutStr_ROM(0, (U8 *)Duty);

 // Accept input
 NumInputSetup(17, 5, KS_ShowDuty, DutyInputHandle);
    1d24:	81 e1       	ldi	r24, 0x11	; 17
    1d26:	65 e0       	ldi	r22, 0x05	; 5
    1d28:	4c e0       	ldi	r20, 0x0C	; 12
    1d2a:	23 e6       	ldi	r18, 0x63	; 99
    1d2c:	3e e0       	ldi	r19, 0x0E	; 14
    1d2e:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>

 DisplayInputBuf();
    1d32:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
}
    1d36:	08 95       	ret

00001d38 <ShowFreqPeroid>:

void	ShowFreqPeroid(void)
{
 U8 tmp, tmp1;
 
 BinToDec32(miniDDS.Freq, (U8*)Strbuf);
    1d38:	60 91 7a 01 	lds	r22, 0x017A
    1d3c:	70 91 7b 01 	lds	r23, 0x017B
    1d40:	80 91 7c 01 	lds	r24, 0x017C
    1d44:	90 91 7d 01 	lds	r25, 0x017D
    1d48:	43 e3       	ldi	r20, 0x33	; 51
    1d4a:	51 e0       	ldi	r21, 0x01	; 1
    1d4c:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    1d54:	20 e2       	ldi	r18, 0x20	; 32
    1d56:	fc 01       	movw	r30, r24
    1d58:	e0 50       	subi	r30, 0x00	; 0
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	20 83       	st	Z, r18
    1d5e:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    1d60:	8c 30       	cpi	r24, 0x0C	; 12
    1d62:	91 05       	cpc	r25, r1
    1d64:	c1 f7       	brne	.-16     	; 0x1d56 <ShowFreqPeroid+0x1e>

// DispBuf[0] = (SetType) ? 'T' : 'F';
// DispBuf[1] = '=';

 tmp1 = 9;
 if((miniDDS.SetUnit == Unit_KHz) ||(miniDDS.SetUnit == Unit_Sec)) {
    1d66:	e0 91 7f 01 	lds	r30, 0x017F
    1d6a:	8e 2f       	mov	r24, r30
    1d6c:	81 50       	subi	r24, 0x01	; 1
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	10 f4       	brcc	.+4      	; 0x1d76 <ShowFreqPeroid+0x3e>
    1d72:	46 e0       	ldi	r20, 0x06	; 6
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <ShowFreqPeroid+0x40>
    1d76:	49 e0       	ldi	r20, 0x09	; 9
    1d78:	24 e0       	ldi	r18, 0x04	; 4
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
 // Remove leading zeros
 tmp = 4;
 while(tmp < tmp1)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
		Strbuf[tmp] = ' ';
    1d7c:	50 e2       	ldi	r21, 0x20	; 32

// DispBuf[0] = (SetType) ? 'T' : 'F';
// DispBuf[1] = '=';

 tmp1 = 9;
 if((miniDDS.SetUnit == Unit_KHz) ||(miniDDS.SetUnit == Unit_Sec)) {
    1d7e:	92 2f       	mov	r25, r18
 	}
 // Remove leading zeros
 tmp = 4;
 while(tmp < tmp1)  {
	// Do not display leading 0's
	if(Strbuf[tmp] == '0') {
    1d80:	d9 01       	movw	r26, r18
    1d82:	ad 5c       	subi	r26, 0xCD	; 205
    1d84:	be 4f       	sbci	r27, 0xFE	; 254
    1d86:	8c 91       	ld	r24, X
    1d88:	80 33       	cpi	r24, 0x30	; 48
    1d8a:	31 f4       	brne	.+12     	; 0x1d98 <ShowFreqPeroid+0x60>
		Strbuf[tmp] = ' ';
    1d8c:	5c 93       	st	X, r21
    1d8e:	9f 5f       	subi	r25, 0xFF	; 255
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
 if((miniDDS.SetUnit == Unit_KHz) ||(miniDDS.SetUnit == Unit_Sec)) {
 	tmp1 = 6;
 	}
 // Remove leading zeros
 tmp = 4;
 while(tmp < tmp1)  {
    1d94:	24 17       	cp	r18, r20
    1d96:	98 f3       	brcs	.-26     	; 0x1d7e <ShowFreqPeroid+0x46>
		}
	tmp++;
	}

// DispBuf[0] = ' ';
 DispBuf[1] = Strbuf[4];
    1d98:	80 91 37 01 	lds	r24, 0x0137
    1d9c:	80 93 01 01 	sts	0x0101, r24
 DispBuf[2] = Strbuf[5];
    1da0:	80 91 38 01 	lds	r24, 0x0138
    1da4:	80 93 02 01 	sts	0x0102, r24
 DispBuf[3] = Strbuf[6];
    1da8:	80 91 39 01 	lds	r24, 0x0139
    1dac:	80 93 03 01 	sts	0x0103, r24
 if((miniDDS.SetUnit == Unit_Hz) ||(miniDDS.SetUnit == Unit_mSec)) {
    1db0:	ee 23       	and	r30, r30
    1db2:	11 f0       	breq	.+4      	; 0x1db8 <ShowFreqPeroid+0x80>
    1db4:	e3 30       	cpi	r30, 0x03	; 3
    1db6:	31 f4       	brne	.+12     	; 0x1dc4 <ShowFreqPeroid+0x8c>
 	DispBuf[4] = (tmp < 7) ?  ',' : ' ';
    1db8:	97 30       	cpi	r25, 0x07	; 7
    1dba:	10 f0       	brcs	.+4      	; 0x1dc0 <ShowFreqPeroid+0x88>
    1dbc:	80 e2       	ldi	r24, 0x20	; 32
    1dbe:	03 c0       	rjmp	.+6      	; 0x1dc6 <ShowFreqPeroid+0x8e>
    1dc0:	8c e2       	ldi	r24, 0x2C	; 44
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <ShowFreqPeroid+0x8e>
 	}
 else {
	DispBuf[4] = '.';
    1dc4:	8e e2       	ldi	r24, 0x2E	; 46
    1dc6:	80 93 04 01 	sts	0x0104, r24
 	}
 DispBuf[5] = Strbuf[7];
    1dca:	80 91 3a 01 	lds	r24, 0x013A
    1dce:	80 93 05 01 	sts	0x0105, r24
 DispBuf[6] = Strbuf[8];
    1dd2:	80 91 3b 01 	lds	r24, 0x013B
    1dd6:	80 93 06 01 	sts	0x0106, r24
 DispBuf[7] = Strbuf[9];
    1dda:	80 91 3c 01 	lds	r24, 0x013C
    1dde:	80 93 07 01 	sts	0x0107, r24

 PutStr_ROM(8, (U8*)Unit_Symbols[miniDDS.SetUnit]);
    1de2:	85 e0       	ldi	r24, 0x05	; 5
    1de4:	e8 9f       	mul	r30, r24
    1de6:	c0 01       	movw	r24, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	87 57       	subi	r24, 0x77	; 119
    1dec:	9c 4f       	sbci	r25, 0xFC	; 252
    1dee:	28 e0       	ldi	r18, 0x08	; 8
    1df0:	06 c0       	rjmp	.+12     	; 0x1dfe <ShowFreqPeroid+0xc6>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    1df2:	e2 2f       	mov	r30, r18
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	e0 50       	subi	r30, 0x00	; 0
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	30 83       	st	Z, r19
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	34 91       	lpm	r19, Z+
    1e04:	33 23       	and	r19, r19
    1e06:	a9 f7       	brne	.-22     	; 0x1df2 <ShowFreqPeroid+0xba>
 DispBuf[6] = Strbuf[8];
 DispBuf[7] = Strbuf[9];

 PutStr_ROM(8, (U8*)Unit_Symbols[miniDDS.SetUnit]);

 ShowFocus();
    1e08:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>

 BitSet8(Flags, (1 << Flags_DispUpdate));
    1e0c:	80 91 4d 01 	lds	r24, 0x014D
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	80 93 4d 01 	sts	0x014D, r24

 SendDDS();
    1e16:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <SendDDS>
}
    1e1a:	08 95       	ret

00001e1c <FreqInputHandle>:
 	}
 BitSet8(Flags, (1 << Flags_DispUpdate));
}

void	FreqInputHandle(void)
{
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
 U32 tmp;
 
 tmp = miniDDS.Freq;
    1e24:	e0 90 7a 01 	lds	r14, 0x017A
    1e28:	f0 90 7b 01 	lds	r15, 0x017B
    1e2c:	00 91 7c 01 	lds	r16, 0x017C
    1e30:	10 91 7d 01 	lds	r17, 0x017D
 switch(NumInput.EndKey) {
    1e34:	80 91 75 01 	lds	r24, 0x0175
    1e38:	8f 30       	cpi	r24, 0x0F	; 15
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <FreqInputHandle+0x28>
    1e3c:	80 31       	cpi	r24, 0x10	; 16
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <FreqInputHandle+0x26>
    1e40:	56 c0       	rjmp	.+172    	; 0x1eee <FreqInputHandle+0xd2>
    1e42:	0e c0       	rjmp	.+28     	; 0x1e60 <FreqInputHandle+0x44>
	case KC_Hz:
		if(DispBuf[Freq_DispStart] == 'F') {
    1e44:	80 91 00 01 	lds	r24, 0x0100
    1e48:	86 34       	cpi	r24, 0x46	; 70
    1e4a:	29 f4       	brne	.+10     	; 0x1e56 <FreqInputHandle+0x3a>
			miniDDS.SetType = SetType_Freq;
    1e4c:	10 92 7e 01 	sts	0x017E, r1
			miniDDS.SetUnit = Unit_Hz;
    1e50:	10 92 7f 01 	sts	0x017F, r1
    1e54:	13 c0       	rjmp	.+38     	; 0x1e7c <FreqInputHandle+0x60>
			}
		else {
			miniDDS.SetType = SetType_Period;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	80 93 7e 01 	sts	0x017E, r24
			miniDDS.SetUnit = Unit_Sec;
    1e5c:	82 e0       	ldi	r24, 0x02	; 2
    1e5e:	0c c0       	rjmp	.+24     	; 0x1e78 <FreqInputHandle+0x5c>
			}
		break;
		
	case KC_KHz:
		if(DispBuf[Freq_DispStart] == 'F') {
    1e60:	80 91 00 01 	lds	r24, 0x0100
    1e64:	86 34       	cpi	r24, 0x46	; 70
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <FreqInputHandle+0x54>
			miniDDS.SetType = SetType_Freq;
    1e68:	10 92 7e 01 	sts	0x017E, r1
			miniDDS.SetUnit = Unit_KHz;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	04 c0       	rjmp	.+8      	; 0x1e78 <FreqInputHandle+0x5c>
			}
		else {
			miniDDS.SetType = SetType_Period;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	80 93 7e 01 	sts	0x017E, r24
			miniDDS.SetUnit = Unit_mSec;
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	80 93 7f 01 	sts	0x017F, r24
		 ShowFreqPeroid();			
		return;
		break;
	}

 if((miniDDS.SetUnit == Unit_Hz) || (miniDDS.SetUnit == Unit_mSec)) {
    1e7c:	80 91 7f 01 	lds	r24, 0x017F
    1e80:	88 23       	and	r24, r24
    1e82:	11 f0       	breq	.+4      	; 0x1e88 <FreqInputHandle+0x6c>
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <FreqInputHandle+0x72>
	// Take whole part only
	if(CalWholePart()) {
    1e88:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <FreqInputHandle+0x7c>
		tmp = NumInput.DataValue;
		}
	}
 else if((miniDDS.SetUnit == Unit_KHz) || (miniDDS.SetUnit == Unit_Sec)){
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	60 f4       	brcc	.+24     	; 0x1eac <FreqInputHandle+0x90>
	// Take whole part and decimal
	if(CalValue()) {
    1e94:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    1e98:	88 23       	and	r24, r24
    1e9a:	41 f0       	breq	.+16     	; 0x1eac <FreqInputHandle+0x90>
		tmp = NumInput.DataValue;
    1e9c:	e0 90 71 01 	lds	r14, 0x0171
    1ea0:	f0 90 72 01 	lds	r15, 0x0172
    1ea4:	00 91 73 01 	lds	r16, 0x0173
    1ea8:	10 91 74 01 	lds	r17, 0x0174
		}
	}

 // Do not change if 0 was entered for period
 if((miniDDS.SetType != SetType_Period) || (tmp != 0)) {
    1eac:	80 91 7e 01 	lds	r24, 0x017E
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	29 f4       	brne	.+10     	; 0x1ebe <FreqInputHandle+0xa2>
    1eb4:	e1 14       	cp	r14, r1
    1eb6:	f1 04       	cpc	r15, r1
    1eb8:	01 05       	cpc	r16, r1
    1eba:	11 05       	cpc	r17, r1
    1ebc:	b1 f0       	breq	.+44     	; 0x1eea <FreqInputHandle+0xce>
 	freq = FreqMax;
 	}
 if(freq < FreqMin) {
 	freq = FreqMin;
 	}
 *item = freq;
    1ebe:	d8 01       	movw	r26, r16
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	80 34       	cpi	r24, 0x40	; 64
    1ec4:	22 e4       	ldi	r18, 0x42	; 66
    1ec6:	92 07       	cpc	r25, r18
    1ec8:	2f e0       	ldi	r18, 0x0F	; 15
    1eca:	a2 07       	cpc	r26, r18
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	b2 07       	cpc	r27, r18
    1ed0:	20 f0       	brcs	.+8      	; 0x1eda <FreqInputHandle+0xbe>
    1ed2:	8f e3       	ldi	r24, 0x3F	; 63
    1ed4:	92 e4       	ldi	r25, 0x42	; 66
    1ed6:	af e0       	ldi	r26, 0x0F	; 15
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	80 93 7a 01 	sts	0x017A, r24
    1ede:	90 93 7b 01 	sts	0x017B, r25
    1ee2:	a0 93 7c 01 	sts	0x017C, r26
    1ee6:	b0 93 7d 01 	sts	0x017D, r27
//		tmp = FreqMax;
// 		}
//	miniDDS.Freq = tmp;
 	}
 
 SaveSetting();
    1eea:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 ShowFreqPeroid();			
    1eee:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ShowFreqPeroid>
}
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	08 95       	ret

00001efc <LoadUserWaveform>:

 SendBuf((U8*)Strbuf);
}

void	LoadUserWaveform(void)
{
    1efc:	af 92       	push	r10
    1efe:	bf 92       	push	r11
    1f00:	cf 92       	push	r12
    1f02:	df 92       	push	r13
    1f04:	ef 92       	push	r14
    1f06:	ff 92       	push	r15
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LoadUserWaveform+0x16>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	00 e0       	ldi	r16, 0x00	; 0
 
 // User waveform data is stored at 0x0100 in on-chip EEPROM
 // Send the data to DDS core. 256 bytes in total. Send in 32 blocks
 tmp0 = 0;
 while(tmp0 < 32) {
 	Strbuf[0] = KS_WriteWavetable;
    1f18:	7e e0       	ldi	r23, 0x0E	; 14
    1f1a:	c7 2e       	mov	r12, r23
	Strbuf[1] = 8;
    1f1c:	68 e0       	ldi	r22, 0x08	; 8
    1f1e:	d6 2e       	mov	r13, r22
	SendBuf((U8*)Strbuf);

	Delay(1000);
	// Wait for confirm
	tmp1 = 0;
 	GTimer = 40000;
    1f20:	50 e4       	ldi	r21, 0x40	; 64
    1f22:	e5 2e       	mov	r14, r21
    1f24:	5c e9       	ldi	r21, 0x9C	; 156
    1f26:	f5 2e       	mov	r15, r21
 
 // User waveform data is stored at 0x0100 in on-chip EEPROM
 // Send the data to DDS core. 256 bytes in total. Send in 32 blocks
 tmp0 = 0;
 while(tmp0 < 32) {
 	Strbuf[0] = KS_WriteWavetable;
    1f28:	c0 92 33 01 	sts	0x0133, r12
	Strbuf[1] = 8;
    1f2c:	d0 92 34 01 	sts	0x0134, r13
	Strbuf[2] = tmp0 * 8;
    1f30:	20 2f       	mov	r18, r16
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	c9 01       	movw	r24, r18
    1f36:	43 e0       	ldi	r20, 0x03	; 3
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	4a 95       	dec	r20
    1f3e:	e1 f7       	brne	.-8      	; 0x1f38 <LoadUserWaveform+0x3c>
    1f40:	80 93 35 01 	sts	0x0135, r24
	tmp2 = EE_UserWaveform + tmp0 * 8;
    1f44:	c9 01       	movw	r24, r18
    1f46:	80 96       	adiw	r24, 0x20	; 32
    1f48:	23 e0       	ldi	r18, 0x03	; 3
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	2a 95       	dec	r18
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <LoadUserWaveform+0x4e>
    1f52:	13 e0       	ldi	r17, 0x03	; 3
    1f54:	a1 2e       	mov	r10, r17
    1f56:	b1 2c       	mov	r11, r1
	tmp1 = 0;
	while(tmp1 < 8) {
		Strbuf[3 + tmp1] = EE_Read(tmp2++);
    1f58:	9c 01       	movw	r18, r24
    1f5a:	2f 5f       	subi	r18, 0xFF	; 255
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	3a 83       	std	Y+2, r19	; 0x02
    1f60:	29 83       	std	Y+1, r18	; 0x01
    1f62:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
    1f66:	f5 01       	movw	r30, r10
    1f68:	ed 5c       	subi	r30, 0xCD	; 205
    1f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6c:	80 83       	st	Z, r24
    1f6e:	08 94       	sec
    1f70:	a1 1c       	adc	r10, r1
    1f72:	b1 1c       	adc	r11, r1
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
 	Strbuf[0] = KS_WriteWavetable;
	Strbuf[1] = 8;
	Strbuf[2] = tmp0 * 8;
	tmp2 = EE_UserWaveform + tmp0 * 8;
	tmp1 = 0;
	while(tmp1 < 8) {
    1f78:	3b e0       	ldi	r19, 0x0B	; 11
    1f7a:	a3 16       	cp	r10, r19
    1f7c:	b1 04       	cpc	r11, r1
    1f7e:	61 f7       	brne	.-40     	; 0x1f58 <LoadUserWaveform+0x5c>
		Strbuf[3 + tmp1] = EE_Read(tmp2++);
		tmp1++;
		}
	SendBuf((U8*)Strbuf);
    1f80:	83 e3       	ldi	r24, 0x33	; 51
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>

	Delay(1000);
    1f88:	88 ee       	ldi	r24, 0xE8	; 232
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
	// Wait for confirm
	tmp1 = 0;
 	GTimer = 40000;
    1f90:	f0 92 31 01 	sts	0x0131, r15
    1f94:	e0 92 30 01 	sts	0x0130, r14
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <LoadUserWaveform+0xb8>
 	while(GTimer) {
		if(!BitTest8(COMM_RXD_Port, (1 << COMM_RXD_Bit))) {
    1f9a:	4a 99       	sbic	0x09, 2	; 9
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <LoadUserWaveform+0xb8>
			// Detected low at RXD Pin
			tmp1 = RecvByte();
    1f9e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <RecvByte>
    1fa2:	18 2f       	mov	r17, r24
			Delay(50000);
    1fa4:	80 e5       	ldi	r24, 0x50	; 80
    1fa6:	93 ec       	ldi	r25, 0xC3	; 195
    1fa8:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
			break;
			}
 		}
	if(tmp1 == '=') {
    1fac:	1d 33       	cpi	r17, 0x3D	; 61
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <LoadUserWaveform+0xb6>
    1fb0:	bb cf       	rjmp	.-138    	; 0x1f28 <LoadUserWaveform+0x2c>
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <LoadUserWaveform+0xc6>

	Delay(1000);
	// Wait for confirm
	tmp1 = 0;
 	GTimer = 40000;
 	while(GTimer) {
    1fb4:	80 91 30 01 	lds	r24, 0x0130
    1fb8:	90 91 31 01 	lds	r25, 0x0131
    1fbc:	89 2b       	or	r24, r25
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <LoadUserWaveform+0x9e>
    1fc0:	b3 cf       	rjmp	.-154    	; 0x1f28 <LoadUserWaveform+0x2c>
			break;
			}
 		}
	if(tmp1 == '=') {
		// Success. Send next block. (If not success the same block will be re-sent)
		tmp0++;
    1fc2:	0f 5f       	subi	r16, 0xFF	; 255
 U16	tmp2;
 
 // User waveform data is stored at 0x0100 in on-chip EEPROM
 // Send the data to DDS core. 256 bytes in total. Send in 32 blocks
 tmp0 = 0;
 while(tmp0 < 32) {
    1fc4:	00 32       	cpi	r16, 0x20	; 32
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <LoadUserWaveform+0xce>
    1fc8:	af cf       	rjmp	.-162    	; 0x1f28 <LoadUserWaveform+0x2c>
		// Success. Send next block. (If not success the same block will be re-sent)
		tmp0++;
		}
	}

}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	08 95       	ret

00001fe4 <ShowSVParam>:
 UpdateOfs((U32)miniDDS.ServoAMPcurr/2 + OFSmax/2);
 
}

void	ShowSVParam(void)
{
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    1fe8:	20 e2       	ldi	r18, 0x20	; 32
    1fea:	fc 01       	movw	r30, r24
    1fec:	e0 50       	subi	r30, 0x00	; 0
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	20 83       	st	Z, r18
    1ff2:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    1ff4:	80 32       	cpi	r24, 0x20	; 32
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	c1 f7       	brne	.-16     	; 0x1fea <ShowSVParam+0x6>
{
 U8	tmp1;
 U16 *ptmp;

 ClearDisp();
 PutStr_ROM(ServoParamName_DispStart, (U8 *)ServoParamNames[CurrParam]);
    1ffa:	60 91 b7 01 	lds	r22, 0x01B7
    1ffe:	a6 2f       	mov	r26, r22
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	cd 01       	movw	r24, r26
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	8a 0f       	add	r24, r26
    200a:	9b 1f       	adc	r25, r27
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	8c 53       	subi	r24, 0x3C	; 60
    2016:	9b 4f       	sbci	r25, 0xFB	; 251
    2018:	9c 01       	movw	r18, r24
    201a:	05 c0       	rjmp	.+10     	; 0x2026 <ShowSVParam+0x42>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    201c:	e5 2f       	mov	r30, r21
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	e0 50       	subi	r30, 0x00	; 0
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	40 83       	st	Z, r20
    2026:	52 2f       	mov	r21, r18
    2028:	58 1b       	sub	r21, r24
    202a:	f9 01       	movw	r30, r18
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    202c:	2f 5f       	subi	r18, 0xFF	; 255
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	44 91       	lpm	r20, Z+
    2032:	44 23       	and	r20, r20
    2034:	99 f7       	brne	.-26     	; 0x201c <ShowSVParam+0x38>
 U8	tmp1;
 U16 *ptmp;

 ClearDisp();
 PutStr_ROM(ServoParamName_DispStart, (U8 *)ServoParamNames[CurrParam]);
 PutStr_ROM(ServoParamIndex_DispStart, (U8 *)ServoParamIndex[CurrParam]);
    2036:	cd 01       	movw	r24, r26
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	8a 0f       	add	r24, r26
    2042:	9b 1f       	adc	r25, r27
    2044:	80 5d       	subi	r24, 0xD0	; 208
    2046:	9a 4f       	sbci	r25, 0xFA	; 250
    2048:	2d e0       	ldi	r18, 0x0D	; 13
    204a:	06 c0       	rjmp	.+12     	; 0x2058 <ShowSVParam+0x74>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    204c:	e2 2f       	mov	r30, r18
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	e0 50       	subi	r30, 0x00	; 0
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	30 83       	st	Z, r19
    2056:	2f 5f       	subi	r18, 0xFF	; 255
    2058:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	34 91       	lpm	r19, Z+
    205e:	33 23       	and	r19, r19
    2060:	a9 f7       	brne	.-22     	; 0x204c <ShowSVParam+0x68>
 U16 *ptmp;

 ClearDisp();
 PutStr_ROM(ServoParamName_DispStart, (U8 *)ServoParamNames[CurrParam]);
 PutStr_ROM(ServoParamIndex_DispStart, (U8 *)ServoParamIndex[CurrParam]);
 PutStr_ROM(ServoParam_DispStart + ServoParam_UnitOfs, (U8 *)ServoParamUnits[CurrParam]);
    2062:	cd 01       	movw	r24, r26
    2064:	23 e0       	ldi	r18, 0x03	; 3
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	2a 95       	dec	r18
    206c:	e1 f7       	brne	.-8      	; 0x2066 <ShowSVParam+0x82>
    206e:	8a 1b       	sub	r24, r26
    2070:	9b 0b       	sbc	r25, r27
    2072:	83 5a       	subi	r24, 0xA3	; 163
    2074:	9a 4f       	sbci	r25, 0xFA	; 250
    2076:	27 e1       	ldi	r18, 0x17	; 23
    2078:	06 c0       	rjmp	.+12     	; 0x2086 <ShowSVParam+0xa2>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    207a:	e2 2f       	mov	r30, r18
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	e0 50       	subi	r30, 0x00	; 0
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	30 83       	st	Z, r19
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	34 91       	lpm	r19, Z+
    208c:	33 23       	and	r19, r19
    208e:	a9 f7       	brne	.-22     	; 0x207a <ShowSVParam+0x96>
 PutStr_ROM(ServoParam_DispStart + ServoParam_UnitOfs, (U8 *)ServoParamUnits[CurrParam]);

 ptmp = &miniDDS.ServoPWmin;

 // Display selected parameter
 switch(CurrParam) {
    2090:	65 30       	cpi	r22, 0x05	; 5
    2092:	c1 f1       	breq	.+112    	; 0x2104 <ShowSVParam+0x120>
    2094:	65 30       	cpi	r22, 0x05	; 5
    2096:	50 f0       	brcs	.+20     	; 0x20ac <ShowSVParam+0xc8>
    2098:	67 30       	cpi	r22, 0x07	; 7
    209a:	a1 f1       	breq	.+104    	; 0x2104 <ShowSVParam+0x120>
    209c:	67 30       	cpi	r22, 0x07	; 7
    209e:	30 f0       	brcs	.+12     	; 0x20ac <ShowSVParam+0xc8>
    20a0:	68 30       	cpi	r22, 0x08	; 8
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <ShowSVParam+0xc2>
    20a4:	6a c0       	rjmp	.+212    	; 0x217a <ShowSVParam+0x196>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	5e c0       	rjmp	.+188    	; 0x2168 <ShowSVParam+0x184>
	case SV_PWmax:
	case SV_PWmid:
	case SV_PWinc:
	case SV_Cycle:
	case SV_RunStep:
 		NumString.binary = *(ptmp + CurrParam);
    20ac:	aa 0f       	add	r26, r26
    20ae:	bb 1f       	adc	r27, r27
    20b0:	ab 56       	subi	r26, 0x6B	; 107
    20b2:	be 4f       	sbci	r27, 0xFE	; 254
    20b4:	8d 91       	ld	r24, X+
    20b6:	9c 91       	ld	r25, X
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	80 93 62 01 	sts	0x0162, r24
    20c0:	90 93 63 01 	sts	0x0163, r25
    20c4:	a0 93 64 01 	sts	0x0164, r26
    20c8:	b0 93 65 01 	sts	0x0165, r27
 		NumString.decimal = 0;
    20cc:	10 92 66 01 	sts	0x0166, r1
 		NumString.stringbuf = (U8*)Strbuf;
    20d0:	83 e3       	ldi	r24, 0x33	; 51
    20d2:	91 e0       	ldi	r25, 0x01	; 1
    20d4:	90 93 69 01 	sts	0x0169, r25
    20d8:	80 93 68 01 	sts	0x0168, r24
 		BinToStr(&NumString);
    20dc:	82 e6       	ldi	r24, 0x62	; 98
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <BinToStr>
    20e4:	25 e0       	ldi	r18, 0x05	; 5
    20e6:	30 e0       	ldi	r19, 0x00	; 0
		
 		tmp1 = 0;
 		while(tmp1 < 5) {
 			DispBuf[ServoParam_DispStart + tmp1] = Strbuf[tmp1 + 5];
    20e8:	f9 01       	movw	r30, r18
    20ea:	ed 5c       	subi	r30, 0xCD	; 205
    20ec:	fe 4f       	sbci	r31, 0xFE	; 254
    20ee:	80 81       	ld	r24, Z
    20f0:	f9 01       	movw	r30, r18
    20f2:	e5 5f       	subi	r30, 0xF5	; 245
    20f4:	fe 4f       	sbci	r31, 0xFE	; 254
    20f6:	80 83       	st	Z, r24
    20f8:	2f 5f       	subi	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
 		NumString.decimal = 0;
 		NumString.stringbuf = (U8*)Strbuf;
 		BinToStr(&NumString);
		
 		tmp1 = 0;
 		while(tmp1 < 5) {
    20fc:	2a 30       	cpi	r18, 0x0A	; 10
    20fe:	31 05       	cpc	r19, r1
    2100:	99 f7       	brne	.-26     	; 0x20e8 <ShowSVParam+0x104>
    2102:	3b c0       	rjmp	.+118    	; 0x217a <ShowSVParam+0x196>
 			}
		break;

	case SV_AMPmax:
	case SV_RunRate:
 		NumString.binary = *(ptmp + CurrParam);
    2104:	aa 0f       	add	r26, r26
    2106:	bb 1f       	adc	r27, r27
    2108:	ab 56       	subi	r26, 0x6B	; 107
    210a:	be 4f       	sbci	r27, 0xFE	; 254
    210c:	8d 91       	ld	r24, X+
    210e:	9c 91       	ld	r25, X
    2110:	a0 e0       	ldi	r26, 0x00	; 0
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	80 93 62 01 	sts	0x0162, r24
    2118:	90 93 63 01 	sts	0x0163, r25
    211c:	a0 93 64 01 	sts	0x0164, r26
    2120:	b0 93 65 01 	sts	0x0165, r27
 		NumString.decimal = 3;
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	80 93 66 01 	sts	0x0166, r24
 		NumString.stringbuf = (U8*)Strbuf;
    212a:	83 e3       	ldi	r24, 0x33	; 51
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	90 93 69 01 	sts	0x0169, r25
    2132:	80 93 68 01 	sts	0x0168, r24
 		BinToStr(&NumString);
    2136:	82 e6       	ldi	r24, 0x62	; 98
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <BinToStr>
    213e:	23 e0       	ldi	r18, 0x03	; 3
    2140:	30 e0       	ldi	r19, 0x00	; 0
		
 		tmp1 = 0;
 		while(tmp1 < 5) {
 			DispBuf[ServoParam_DispStart + tmp1] = Strbuf[tmp1 + 3];
    2142:	f9 01       	movw	r30, r18
    2144:	ed 5c       	subi	r30, 0xCD	; 205
    2146:	fe 4f       	sbci	r31, 0xFE	; 254
    2148:	80 81       	ld	r24, Z
    214a:	f9 01       	movw	r30, r18
    214c:	e3 5f       	subi	r30, 0xF3	; 243
    214e:	fe 4f       	sbci	r31, 0xFE	; 254
    2150:	80 83       	st	Z, r24
    2152:	2f 5f       	subi	r18, 0xFF	; 255
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
 		NumString.decimal = 3;
 		NumString.stringbuf = (U8*)Strbuf;
 		BinToStr(&NumString);
		
 		tmp1 = 0;
 		while(tmp1 < 5) {
    2156:	28 30       	cpi	r18, 0x08	; 8
    2158:	31 05       	cpc	r19, r1
    215a:	99 f7       	brne	.-26     	; 0x2142 <ShowSVParam+0x15e>
    215c:	0e c0       	rjmp	.+28     	; 0x217a <ShowSVParam+0x196>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    215e:	e3 2f       	mov	r30, r19
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	e0 50       	subi	r30, 0x00	; 0
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	20 83       	st	Z, r18
    2168:	38 2f       	mov	r19, r24
    216a:	30 5f       	subi	r19, 0xF0	; 240
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    216c:	fc 01       	movw	r30, r24
    216e:	ed 54       	subi	r30, 0x4D	; 77
    2170:	fb 4f       	sbci	r31, 0xFB	; 251
    2172:	24 91       	lpm	r18, Z+
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	22 23       	and	r18, r18
    2178:	91 f7       	brne	.-28     	; 0x215e <ShowSVParam+0x17a>
 	DispBuf[ServoParam_DispStart + 2] = Strbuf[6];
 	DispBuf[ServoParam_DispStart + 3] = '.';
 	DispBuf[ServoParam_DispStart + 4] = Strbuf[7];
 	}
*/ 
 BitSet8(Flags, (1 << Flags_DispUpdate));
    217a:	80 91 4d 01 	lds	r24, 0x014D
    217e:	80 68       	ori	r24, 0x80	; 128
    2180:	80 93 4d 01 	sts	0x014D, r24
}
    2184:	08 95       	ret

00002186 <ServoParamInputHandle>:
void	ServoParamInputHandle(void)
{
 U16 *ptmp;

 ptmp = &miniDDS.ServoPWmin;
 switch(NumInput.EndKey) {
    2186:	80 91 75 01 	lds	r24, 0x0175
    218a:	8f 30       	cpi	r24, 0x0F	; 15
    218c:	19 f0       	breq	.+6      	; 0x2194 <ServoParamInputHandle+0xe>
    218e:	80 31       	cpi	r24, 0x10	; 16
    2190:	59 f5       	brne	.+86     	; 0x21e8 <ServoParamInputHandle+0x62>
    2192:	0b c0       	rjmp	.+22     	; 0x21aa <ServoParamInputHandle+0x24>
	case KC_Hz:
		switch(CurrParam) {
    2194:	80 91 b7 01 	lds	r24, 0x01B7
    2198:	85 30       	cpi	r24, 0x05	; 5
    219a:	91 f0       	breq	.+36     	; 0x21c0 <ServoParamInputHandle+0x3a>
    219c:	85 30       	cpi	r24, 0x05	; 5
    219e:	98 f0       	brcs	.+38     	; 0x21c6 <ServoParamInputHandle+0x40>
    21a0:	86 30       	cpi	r24, 0x06	; 6
    21a2:	89 f0       	breq	.+34     	; 0x21c6 <ServoParamInputHandle+0x40>
    21a4:	87 30       	cpi	r24, 0x07	; 7
    21a6:	01 f5       	brne	.+64     	; 0x21e8 <ServoParamInputHandle+0x62>
    21a8:	0b c0       	rjmp	.+22     	; 0x21c0 <ServoParamInputHandle+0x3a>
				break;
			}
		break;
		
	case KC_KHz:
		switch(CurrParam) {
    21aa:	80 91 b7 01 	lds	r24, 0x01B7
    21ae:	85 30       	cpi	r24, 0x05	; 5
    21b0:	51 f0       	breq	.+20     	; 0x21c6 <ServoParamInputHandle+0x40>
    21b2:	85 30       	cpi	r24, 0x05	; 5
    21b4:	28 f0       	brcs	.+10     	; 0x21c0 <ServoParamInputHandle+0x3a>
    21b6:	86 30       	cpi	r24, 0x06	; 6
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <ServoParamInputHandle+0x3a>
    21ba:	87 30       	cpi	r24, 0x07	; 7
    21bc:	a9 f4       	brne	.+42     	; 0x21e8 <ServoParamInputHandle+0x62>
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <ServoParamInputHandle+0x40>
			case SV_PWmid:
			case SV_PWinc:
			case SV_Cycle:
			case SV_RunStep:
				// Take whole part only
				if(CalValue()) {
    21c0:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <ServoParamInputHandle+0x44>
					}
				break;

			case SV_AMPmax:
			case SV_RunRate:
				if(CalWholePart()) {
    21c6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    21ca:	88 23       	and	r24, r24
    21cc:	69 f0       	breq	.+26     	; 0x21e8 <ServoParamInputHandle+0x62>
					*(ptmp + CurrParam) = NumInput.DataValue;
    21ce:	e0 91 b7 01 	lds	r30, 0x01B7
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	eb 56       	subi	r30, 0x6B	; 107
    21da:	fe 4f       	sbci	r31, 0xFE	; 254
    21dc:	80 91 71 01 	lds	r24, 0x0171
    21e0:	90 91 72 01 	lds	r25, 0x0172
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	80 83       	st	Z, r24
	case KC_ESC:
	default:
		break;
	}

 SaveSetting();
    21e8:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 ShowSVParam();
    21ec:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <ShowSVParam>
}
    21f0:	08 95       	ret

000021f2 <ShowPW>:

void	ShowPW(void)
{
 U8	tmp1;

 if(miniDDS.ServoPWcurr < miniDDS.ServoPWmin) {
    21f2:	20 91 95 01 	lds	r18, 0x0195
    21f6:	30 91 96 01 	lds	r19, 0x0196
    21fa:	80 91 91 01 	lds	r24, 0x0191
    21fe:	90 91 92 01 	lds	r25, 0x0192
    2202:	82 17       	cp	r24, r18
    2204:	93 07       	cpc	r25, r19
    2206:	20 f4       	brcc	.+8      	; 0x2210 <ShowPW+0x1e>
 	miniDDS.ServoPWcurr = miniDDS.ServoPWmin;
    2208:	30 93 92 01 	sts	0x0192, r19
    220c:	20 93 91 01 	sts	0x0191, r18
 	}
 if(miniDDS.ServoPWcurr > miniDDS.ServoPWmax) {
    2210:	20 91 97 01 	lds	r18, 0x0197
    2214:	30 91 98 01 	lds	r19, 0x0198
    2218:	80 91 91 01 	lds	r24, 0x0191
    221c:	90 91 92 01 	lds	r25, 0x0192
    2220:	28 17       	cp	r18, r24
    2222:	39 07       	cpc	r19, r25
    2224:	20 f4       	brcc	.+8      	; 0x222e <ShowPW+0x3c>
 	miniDDS.ServoPWcurr = miniDDS.ServoPWmax;
    2226:	30 93 92 01 	sts	0x0192, r19
    222a:	20 93 91 01 	sts	0x0191, r18
 	}

 NumString.binary = miniDDS.ServoPWcurr;
    222e:	80 91 91 01 	lds	r24, 0x0191
    2232:	90 91 92 01 	lds	r25, 0x0192
    2236:	a0 e0       	ldi	r26, 0x00	; 0
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	80 93 62 01 	sts	0x0162, r24
    223e:	90 93 63 01 	sts	0x0163, r25
    2242:	a0 93 64 01 	sts	0x0164, r26
    2246:	b0 93 65 01 	sts	0x0165, r27
 NumString.decimal = 0;
    224a:	10 92 66 01 	sts	0x0166, r1
 NumString.stringbuf = (U8*)Strbuf;
    224e:	83 e3       	ldi	r24, 0x33	; 51
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	90 93 69 01 	sts	0x0169, r25
    2256:	80 93 68 01 	sts	0x0168, r24
 BinToStr(&NumString);
    225a:	82 e6       	ldi	r24, 0x62	; 98
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <BinToStr>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    2266:	20 e2       	ldi	r18, 0x20	; 32
    2268:	fc 01       	movw	r30, r24
    226a:	e0 50       	subi	r30, 0x00	; 0
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	20 83       	st	Z, r18
    2270:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    2272:	80 32       	cpi	r24, 0x20	; 32
    2274:	91 05       	cpc	r25, r1
    2276:	c1 f7       	brne	.-16     	; 0x2268 <ShowPW+0x76>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <ShowPW+0x96>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    227e:	e3 2f       	mov	r30, r19
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	e0 50       	subi	r30, 0x00	; 0
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	20 83       	st	Z, r18
    2288:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    228a:	fc 01       	movw	r30, r24
    228c:	e7 5c       	subi	r30, 0xC7	; 199
    228e:	fb 4f       	sbci	r31, 0xFB	; 251
    2290:	24 91       	lpm	r18, Z+
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	22 23       	and	r18, r18
    2296:	99 f7       	brne	.-26     	; 0x227e <ShowPW+0x8c>
    2298:	25 e0       	ldi	r18, 0x05	; 5
    229a:	30 e0       	ldi	r19, 0x00	; 0
 ClearDisp();
 PutStr_ROM(ServoPos_DispStart, (U8 *)ServoPos);

 tmp1 = 0;
 while(tmp1 < 5) {
 	DispBuf[ServoPosPW_DispStart + ServoPosPW_DigitOfs + tmp1] = Strbuf[tmp1 + 5];
    229c:	f9 01       	movw	r30, r18
    229e:	ed 5c       	subi	r30, 0xCD	; 205
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	80 81       	ld	r24, Z
    22a4:	f9 01       	movw	r30, r18
    22a6:	e1 5f       	subi	r30, 0xF1	; 241
    22a8:	fe 4f       	sbci	r31, 0xFE	; 254
    22aa:	80 83       	st	Z, r24
    22ac:	2f 5f       	subi	r18, 0xFF	; 255
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255

 ClearDisp();
 PutStr_ROM(ServoPos_DispStart, (U8 *)ServoPos);

 tmp1 = 0;
 while(tmp1 < 5) {
    22b0:	2a 30       	cpi	r18, 0x0A	; 10
    22b2:	31 05       	cpc	r19, r1
    22b4:	99 f7       	brne	.-26     	; 0x229c <ShowPW+0xaa>
 	DispBuf[ServoPosPW_DispStart + ServoPosPW_DigitOfs + tmp1] = Strbuf[tmp1 + 5];
	tmp1++;
 	}

 DispBuf[ServoPosPW_DispStart + ServoPosPW_SignOfs] = ' ';
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	80 93 13 01 	sts	0x0113, r24
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	05 c0       	rjmp	.+10     	; 0x22cc <ShowPW+0xda>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    22c2:	e3 2f       	mov	r30, r19
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	e0 50       	subi	r30, 0x00	; 0
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	20 83       	st	Z, r18
    22cc:	38 2f       	mov	r19, r24
    22ce:	30 5f       	subi	r19, 0xF0	; 240
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    22d0:	fc 01       	movw	r30, r24
    22d2:	e6 5b       	subi	r30, 0xB6	; 182
    22d4:	fb 4f       	sbci	r31, 0xFB	; 251
    22d6:	24 91       	lpm	r18, Z+
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	22 23       	and	r18, r18
    22dc:	91 f7       	brne	.-28     	; 0x22c2 <ShowPW+0xd0>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <ShowPW+0xfc>
 	DispBuf[loc++] = tmp;
    22e4:	e3 2f       	mov	r30, r19
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	e0 50       	subi	r30, 0x00	; 0
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	20 83       	st	Z, r18
    22ee:	38 2f       	mov	r19, r24
    22f0:	36 5e       	subi	r19, 0xE6	; 230
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    22f2:	fc 01       	movw	r30, r24
    22f4:	e9 55       	subi	r30, 0x59	; 89
    22f6:	fc 4f       	sbci	r31, 0xFC	; 252
    22f8:	24 91       	lpm	r18, Z+
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	22 23       	and	r18, r18
    22fe:	91 f7       	brne	.-28     	; 0x22e4 <ShowPW+0xf2>
 DispBuf[ServoPosPW_DispStart + ServoPosPW_SignOfs] = ' ';
 
 PutStr_ROM(ServoPosPW_DispStart, (U8 *)ServoPW);
 PutStr_ROM(ServoPosPW_DispStart + ServoPosPW_UnitOfs, (U8 *)Unit_Symbols[Unit_uSec]);

 BitSet8(Flags, (1 << Flags_DispUpdate));
    2300:	80 91 4d 01 	lds	r24, 0x014D
    2304:	80 68       	ori	r24, 0x80	; 128
    2306:	80 93 4d 01 	sts	0x014D, r24

 SendServoPos();
    230a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <SendServoPos>
}
    230e:	08 95       	ret

00002310 <PWInputHandle>:
 SaveSetting();
}

void	PWInputHandle(void)
{
 switch(NumInput.EndKey) {
    2310:	80 91 75 01 	lds	r24, 0x0175
    2314:	8f 30       	cpi	r24, 0x0F	; 15
    2316:	19 f0       	breq	.+6      	; 0x231e <PWInputHandle+0xe>
    2318:	80 31       	cpi	r24, 0x10	; 16
    231a:	81 f4       	brne	.+32     	; 0x233c <PWInputHandle+0x2c>
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <PWInputHandle+0x14>
	case KC_Hz:
		// Take whole part only
		if(CalWholePart()) {
    231e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <PWInputHandle+0x18>
			miniDDS.ServoPWcurr  = NumInput.DataValue;
			}
		break;
		
	case KC_KHz:
		if(CalValue()) {
    2324:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    2328:	88 23       	and	r24, r24
    232a:	41 f0       	breq	.+16     	; 0x233c <PWInputHandle+0x2c>
 			miniDDS.ServoPWcurr = NumInput.DataValue;
    232c:	80 91 71 01 	lds	r24, 0x0171
    2330:	90 91 72 01 	lds	r25, 0x0172
    2334:	90 93 92 01 	sts	0x0192, r25
    2338:	80 93 91 01 	sts	0x0191, r24
	case KC_ESC:
	default:
		break;
	}

 ShowPW();
    233c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <ShowPW>
 SaveSetting();
    2340:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
}
    2344:	08 95       	ret

00002346 <SetPW>:
}

void	SetPW(void)
{
 // Set focus 
 if(CurrFocus != FC_ServoPW) {
    2346:	80 91 b9 01 	lds	r24, 0x01B9
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	31 f0       	breq	.+12     	; 0x235a <SetPW+0x14>
 	CurrFocus = FC_ServoPW;
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	80 93 b9 01 	sts	0x01B9, r24
	ShowPW();
    2354:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <ShowPW>
    2358:	08 95       	ret
//	SysState.CurrState = SysState.PrevState;
	return;
 	}

 // Accept input
 NumInputSetup(ServoPosPW_DispStart + ServoPosPW_DigitOfs, ServoPosPW_InputBufSize, KS_ServoPos, PWInputHandle);
    235a:	84 e1       	ldi	r24, 0x14	; 20
    235c:	65 e0       	ldi	r22, 0x05	; 5
    235e:	42 e0       	ldi	r20, 0x02	; 2
    2360:	28 e8       	ldi	r18, 0x88	; 136
    2362:	31 e1       	ldi	r19, 0x11	; 17
    2364:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_ServoPos;
 NumInput.ExitAction = PWInputHandle;
 
 ClearInputBuf();
*/
 DisplayInputBuf();
    2368:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    236c:	08 95       	ret

0000236e <ShowAmp>:
 SendSweep();
}


void	ShowAmp(U8 startpos)
{
    236e:	1f 93       	push	r17
    2370:	18 2f       	mov	r17, r24
 if(miniDDS.Amp > AMPmax) {
    2372:	80 91 80 01 	lds	r24, 0x0180
    2376:	90 91 81 01 	lds	r25, 0x0181
    237a:	a0 91 82 01 	lds	r26, 0x0182
    237e:	b0 91 83 01 	lds	r27, 0x0183
    2382:	81 51       	subi	r24, 0x11	; 17
    2384:	97 42       	sbci	r25, 0x27	; 39
    2386:	a0 40       	sbci	r26, 0x00	; 0
    2388:	b0 40       	sbci	r27, 0x00	; 0
    238a:	60 f0       	brcs	.+24     	; 0x23a4 <ShowAmp+0x36>
// 	Beep(ErrBeepLen);
 	miniDDS.Amp = AMPmax;
    238c:	80 e1       	ldi	r24, 0x10	; 16
    238e:	97 e2       	ldi	r25, 0x27	; 39
    2390:	a0 e0       	ldi	r26, 0x00	; 0
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	80 93 80 01 	sts	0x0180, r24
    2398:	90 93 81 01 	sts	0x0181, r25
    239c:	a0 93 82 01 	sts	0x0182, r26
    23a0:	b0 93 83 01 	sts	0x0183, r27
 	}
 
 BinToDec32(miniDDS.Amp, (U8*)Strbuf);
    23a4:	60 91 80 01 	lds	r22, 0x0180
    23a8:	70 91 81 01 	lds	r23, 0x0181
    23ac:	80 91 82 01 	lds	r24, 0x0182
    23b0:	90 91 83 01 	lds	r25, 0x0183
    23b4:	43 e3       	ldi	r20, 0x33	; 51
    23b6:	51 e0       	ldi	r21, 0x01	; 1
    23b8:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>
 
// DispBuf[16] = 'A';
// DispBuf[17] = '=';
 
// DispBuf[16] = ' ';
 DispBuf[startpos + 0] = (Strbuf[5] == '0') ? ' ' : Strbuf[5];
    23bc:	a1 2f       	mov	r26, r17
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	80 91 38 01 	lds	r24, 0x0138
    23c4:	80 33       	cpi	r24, 0x30	; 48
    23c6:	11 f4       	brne	.+4      	; 0x23cc <ShowAmp+0x5e>
    23c8:	80 e2       	ldi	r24, 0x20	; 32
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <ShowAmp+0x62>
    23cc:	80 91 38 01 	lds	r24, 0x0138
    23d0:	fd 01       	movw	r30, r26
    23d2:	e0 50       	subi	r30, 0x00	; 0
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 83       	st	Z, r24
 DispBuf[startpos + 1] = Strbuf[6];
    23d8:	80 91 39 01 	lds	r24, 0x0139
    23dc:	fd 01       	movw	r30, r26
    23de:	ef 5f       	subi	r30, 0xFF	; 255
    23e0:	fe 4f       	sbci	r31, 0xFE	; 254
    23e2:	80 83       	st	Z, r24
 DispBuf[startpos + 2] = '.';
    23e4:	fd 01       	movw	r30, r26
    23e6:	ee 5f       	subi	r30, 0xFE	; 254
    23e8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ea:	8e e2       	ldi	r24, 0x2E	; 46
    23ec:	80 83       	st	Z, r24
 DispBuf[startpos + 3] = Strbuf[7];
    23ee:	80 91 3a 01 	lds	r24, 0x013A
    23f2:	fd 01       	movw	r30, r26
    23f4:	ed 5f       	subi	r30, 0xFD	; 253
    23f6:	fe 4f       	sbci	r31, 0xFE	; 254
    23f8:	80 83       	st	Z, r24
 DispBuf[startpos + 4] = ' ';
    23fa:	fd 01       	movw	r30, r26
    23fc:	ec 5f       	subi	r30, 0xFC	; 252
    23fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2400:	90 e2       	ldi	r25, 0x20	; 32
    2402:	90 83       	st	Z, r25
 DispBuf[startpos + 5] = 'V';
    2404:	fd 01       	movw	r30, r26
    2406:	eb 5f       	subi	r30, 0xFB	; 251
    2408:	fe 4f       	sbci	r31, 0xFE	; 254
    240a:	86 e5       	ldi	r24, 0x56	; 86
    240c:	80 83       	st	Z, r24
 DispBuf[startpos + 6] = ' ';
    240e:	aa 5f       	subi	r26, 0xFA	; 250
    2410:	be 4f       	sbci	r27, 0xFE	; 254
    2412:	9c 93       	st	X, r25

 if(miniDDS.Mode == KS_CW) {
    2414:	80 91 79 01 	lds	r24, 0x0179
    2418:	88 23       	and	r24, r24
    241a:	11 f4       	brne	.+4      	; 0x2420 <ShowAmp+0xb2>
 	ShowFocus();
    241c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
 	}
 BitSet8(Flags, (1 << Flags_DispUpdate));
    2420:	80 91 4d 01 	lds	r24, 0x014D
    2424:	80 68       	ori	r24, 0x80	; 128
    2426:	80 93 4d 01 	sts	0x014D, r24

 SetDigitalPot((U8)((miniDDS.Amp * 100)/AMPmax)); 
    242a:	60 91 80 01 	lds	r22, 0x0180
    242e:	70 91 81 01 	lds	r23, 0x0181
    2432:	80 91 82 01 	lds	r24, 0x0182
    2436:	90 91 83 01 	lds	r25, 0x0183
    243a:	24 e6       	ldi	r18, 0x64	; 100
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    2446:	20 e1       	ldi	r18, 0x10	; 16
    2448:	37 e2       	ldi	r19, 0x27	; 39
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    2452:	82 2f       	mov	r24, r18
    2454:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>
}
    2458:	1f 91       	pop	r17
    245a:	08 95       	ret

0000245c <AmpInputHandle>:
 ShowSweep();			
}

void	AmpInputHandle(void)
{
 switch(NumInput.EndKey) {
    245c:	80 91 75 01 	lds	r24, 0x0175
    2460:	8f 30       	cpi	r24, 0x0F	; 15
    2462:	19 f0       	breq	.+6      	; 0x246a <AmpInputHandle+0xe>
    2464:	80 31       	cpi	r24, 0x10	; 16
    2466:	c1 f4       	brne	.+48     	; 0x2498 <AmpInputHandle+0x3c>
    2468:	03 c0       	rjmp	.+6      	; 0x2470 <AmpInputHandle+0x14>
	case KC_Hz:
		if(CalValue()) {
    246a:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <AmpInputHandle+0x18>
			}
		break;
		
	case KC_KHz:
		// Take whole part only
		if(CalWholePart()) {
    2470:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    2474:	88 23       	and	r24, r24
    2476:	81 f0       	breq	.+32     	; 0x2498 <AmpInputHandle+0x3c>
			miniDDS.Amp = NumInput.DataValue;
    2478:	80 91 71 01 	lds	r24, 0x0171
    247c:	90 91 72 01 	lds	r25, 0x0172
    2480:	a0 91 73 01 	lds	r26, 0x0173
    2484:	b0 91 74 01 	lds	r27, 0x0174
    2488:	80 93 80 01 	sts	0x0180, r24
    248c:	90 93 81 01 	sts	0x0181, r25
    2490:	a0 93 82 01 	sts	0x0182, r26
    2494:	b0 93 83 01 	sts	0x0183, r27
		
	case KC_ESC:
	default:
		break;
	}
 SaveSetting();
    2498:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 if(miniDDS.Mode == KS_CW) {
    249c:	80 91 79 01 	lds	r24, 0x0179
    24a0:	88 23       	and	r24, r24
    24a2:	19 f4       	brne	.+6      	; 0x24aa <AmpInputHandle+0x4e>
 	ShowAmp(AmpPos_CW);
    24a4:	81 e1       	ldi	r24, 0x11	; 17
    24a6:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
 	}
 if(miniDDS.Mode == KS_Sweep) {
    24aa:	80 91 79 01 	lds	r24, 0x0179
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	19 f4       	brne	.+6      	; 0x24b8 <AmpInputHandle+0x5c>
 	ShowAmp(AmpPos_Sweep);
    24b2:	85 e1       	ldi	r24, 0x15	; 21
    24b4:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
    24b8:	08 95       	ret

000024ba <AppInit>:
 return Dummy;
}


void AppInit(void)
{
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
 U8	tmp,  tmp1, tmp2;
 
 KeyCode = 0;
    24c2:	10 92 29 01 	sts	0x0129, r1
 KFlags = 0x00;
    24c6:	10 92 48 01 	sts	0x0148, r1
 Flags = 0x00;
    24ca:	10 92 4d 01 	sts	0x014D, r1

 // Set X9C102 to 0 position
 SetDigitalPot(0);
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>
 PrevWiperPos = 0;
    24d4:	10 92 4b 01 	sts	0x014B, r1

 // Looking for EEPROM signature
 tmp = EE_Read((U16)&Signature_EE1);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
    24e0:	18 2f       	mov	r17, r24
 tmp1 = EE_Read((U16)&Signature_EE2);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
    24ea:	08 2f       	mov	r16, r24
 tmp2 = EE_Read((U16)&EEversion);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
 
 if((tmp == EE_signature1) && (tmp1 == EE_signature2) && (tmp2 == EepromVersion)) {
    24f4:	1a 3f       	cpi	r17, 0xFA	; 250
    24f6:	a1 f4       	brne	.+40     	; 0x2520 <AppInit+0x66>
    24f8:	0f 35       	cpi	r16, 0x5F	; 95
    24fa:	91 f4       	brne	.+36     	; 0x2520 <AppInit+0x66>
    24fc:	84 30       	cpi	r24, 0x04	; 4
    24fe:	81 f4       	brne	.+32     	; 0x2520 <AppInit+0x66>
    2500:	c0 e0       	ldi	r28, 0x00	; 0
    2502:	d0 e0       	ldi	r29, 0x00	; 0
 	// Load setting from EEPROM
 	tmp = 0;
	while(tmp < sizeof(FuncGen)) {
		*((U8*)&miniDDS + tmp) = EE_Read((U16)&miniDDS_EE + tmp);
    2504:	ce 01       	movw	r24, r28
    2506:	8d 5f       	subi	r24, 0xFD	; 253
    2508:	9f 4f       	sbci	r25, 0xFF	; 255
    250a:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
    250e:	fe 01       	movw	r30, r28
    2510:	e7 58       	subi	r30, 0x87	; 135
    2512:	fe 4f       	sbci	r31, 0xFE	; 254
    2514:	80 83       	st	Z, r24
    2516:	21 96       	adiw	r28, 0x01	; 1
 tmp2 = EE_Read((U16)&EEversion);
 
 if((tmp == EE_signature1) && (tmp1 == EE_signature2) && (tmp2 == EepromVersion)) {
 	// Load setting from EEPROM
 	tmp = 0;
	while(tmp < sizeof(FuncGen)) {
    2518:	ce 33       	cpi	r28, 0x3E	; 62
    251a:	d1 05       	cpc	r29, r1
    251c:	99 f7       	brne	.-26     	; 0x2504 <AppInit+0x4a>
    251e:	1f c0       	rjmp	.+62     	; 0x255e <AppInit+0xa4>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
 else {
 	// Load setting from Flash
 	tmp = 0;
	while(tmp < sizeof(FuncGen)) {
		*((U8*)&miniDDS + tmp) 
			= pgm_read_byte((U8 *)&miniDDS_ROM + tmp);
    2524:	fc 01       	movw	r30, r24
    2526:	e1 56       	subi	r30, 0x61	; 97
    2528:	fa 4f       	sbci	r31, 0xFA	; 250
    252a:	e4 91       	lpm	r30, Z+
 	}
 else {
 	// Load setting from Flash
 	tmp = 0;
	while(tmp < sizeof(FuncGen)) {
		*((U8*)&miniDDS + tmp) 
    252c:	dc 01       	movw	r26, r24
    252e:	a7 58       	subi	r26, 0x87	; 135
    2530:	be 4f       	sbci	r27, 0xFE	; 254
    2532:	ec 93       	st	X, r30
    2534:	01 96       	adiw	r24, 0x01	; 1
		}
 	}
 else {
 	// Load setting from Flash
 	tmp = 0;
	while(tmp < sizeof(FuncGen)) {
    2536:	8e 33       	cpi	r24, 0x3E	; 62
    2538:	91 05       	cpc	r25, r1
    253a:	a1 f7       	brne	.-24     	; 0x2524 <AppInit+0x6a>
			= pgm_read_byte((U8 *)&miniDDS_ROM + tmp);
		tmp++;
		}

	// Setup EEPROM
	SaveSetting();
    253c:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>

	// Write signature & version
 	EE_Write((U16)&Signature_EE1, EE_signature1);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	6a ef       	ldi	r22, 0xFA	; 250
    2546:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
 	EE_Write((U16)&Signature_EE2, EE_signature2);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	6f e5       	ldi	r22, 0x5F	; 95
    2550:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
 	EE_Write((U16)&EEversion, EepromVersion);
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	64 e0       	ldi	r22, 0x04	; 4
    255a:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
 	}

 Delay(10000);
    255e:	80 e1       	ldi	r24, 0x10	; 16
    2560:	97 e2       	ldi	r25, 0x27	; 39
    2562:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
 	// Load user waveform
//	LoadUserWaveform();
	}
 
 // Execute initialization based on Mode
 if(miniDDS.Mode >= ModeNumber) {
    2566:	80 91 79 01 	lds	r24, 0x0179
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	10 f0       	brcs	.+4      	; 0x2572 <AppInit+0xb8>
 	miniDDS.Mode = KS_CW;
    256e:	10 92 79 01 	sts	0x0179, r1
 	}
 (*(void (*)(void))(pgm_read_word(&InitFuncTab[miniDDS.Mode])))();
    2572:	80 91 79 01 	lds	r24, 0x0179
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	8f 5a       	subi	r24, 0xAF	; 175
    257e:	9c 4f       	sbci	r25, 0xFC	; 252
    2580:	fc 01       	movw	r30, r24
    2582:	25 91       	lpm	r18, Z+
    2584:	34 91       	lpm	r19, Z+
    2586:	f9 01       	movw	r30, r18
    2588:	09 95       	icall
 
}
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	08 95       	ret

00002594 <ShowServoAmp>:

void	ShowServoAmp(void)
{
 U8 tmp;

 if(miniDDS.ServoAMPcurr > miniDDS.ServoAMPmax) {
    2594:	20 91 a3 01 	lds	r18, 0x01A3
    2598:	30 91 a4 01 	lds	r19, 0x01A4
    259c:	80 91 93 01 	lds	r24, 0x0193
    25a0:	90 91 94 01 	lds	r25, 0x0194
    25a4:	28 17       	cp	r18, r24
    25a6:	39 07       	cpc	r19, r25
    25a8:	20 f4       	brcc	.+8      	; 0x25b2 <ShowServoAmp+0x1e>
 	miniDDS.ServoAMPcurr = miniDDS.ServoAMPmax;
    25aa:	30 93 94 01 	sts	0x0194, r19
    25ae:	20 93 93 01 	sts	0x0193, r18
 	}
 
 NumString.binary = miniDDS.ServoAMPcurr;
    25b2:	80 91 93 01 	lds	r24, 0x0193
    25b6:	90 91 94 01 	lds	r25, 0x0194
    25ba:	a0 e0       	ldi	r26, 0x00	; 0
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	80 93 62 01 	sts	0x0162, r24
    25c2:	90 93 63 01 	sts	0x0163, r25
    25c6:	a0 93 64 01 	sts	0x0164, r26
    25ca:	b0 93 65 01 	sts	0x0165, r27
 NumString.decimal = 3;
    25ce:	83 e0       	ldi	r24, 0x03	; 3
    25d0:	80 93 66 01 	sts	0x0166, r24
 NumString.stringbuf = (U8*)Strbuf;
    25d4:	83 e3       	ldi	r24, 0x33	; 51
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	90 93 69 01 	sts	0x0169, r25
    25dc:	80 93 68 01 	sts	0x0168, r24
 BinToStr(&NumString);
    25e0:	82 e6       	ldi	r24, 0x62	; 98
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <BinToStr>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    25ec:	20 e2       	ldi	r18, 0x20	; 32
    25ee:	fc 01       	movw	r30, r24
    25f0:	e0 50       	subi	r30, 0x00	; 0
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	20 83       	st	Z, r18
    25f6:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    25f8:	80 32       	cpi	r24, 0x20	; 32
    25fa:	91 05       	cpc	r25, r1
    25fc:	c1 f7       	brne	.-16     	; 0x25ee <ShowServoAmp+0x5a>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	05 c0       	rjmp	.+10     	; 0x260e <ShowServoAmp+0x7a>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    2604:	e3 2f       	mov	r30, r19
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	e0 50       	subi	r30, 0x00	; 0
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	20 83       	st	Z, r18
    260e:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    2610:	fc 01       	movw	r30, r24
    2612:	e7 5c       	subi	r30, 0xC7	; 199
    2614:	fb 4f       	sbci	r31, 0xFB	; 251
    2616:	24 91       	lpm	r18, Z+
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	22 23       	and	r18, r18
    261c:	99 f7       	brne	.-26     	; 0x2604 <ShowServoAmp+0x70>
 DispBuf[ServoPosAmp_DispStart + ServoPosAmp_DigitOfs + 3] = Strbuf[7];
*/

 tmp = 0;
 while(tmp < 4) {
	DispBuf[ServoPosAmp_DispStart + ServoPosAmp_DigitOfs + tmp]	= Strbuf[4 + tmp];
    261e:	80 91 37 01 	lds	r24, 0x0137
    2622:	80 93 15 01 	sts	0x0115, r24
    2626:	80 91 38 01 	lds	r24, 0x0138
    262a:	80 93 16 01 	sts	0x0116, r24
    262e:	80 91 39 01 	lds	r24, 0x0139
    2632:	80 93 17 01 	sts	0x0117, r24
    2636:	80 91 3a 01 	lds	r24, 0x013A
    263a:	80 93 18 01 	sts	0x0118, r24
	tmp++;
 	}
 
 DispBuf[ServoPosAmp_DispStart + ServoPosAmp_SignOfs] = ' ';
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	80 93 14 01 	sts	0x0114, r24
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <ShowServoAmp+0xc0>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    264a:	e3 2f       	mov	r30, r19
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	e0 50       	subi	r30, 0x00	; 0
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	20 83       	st	Z, r18
    2654:	38 2f       	mov	r19, r24
    2656:	30 5f       	subi	r19, 0xF0	; 240
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    2658:	fc 01       	movw	r30, r24
    265a:	e2 5b       	subi	r30, 0xB2	; 178
    265c:	fb 4f       	sbci	r31, 0xFB	; 251
    265e:	24 91       	lpm	r18, Z+
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	22 23       	and	r18, r18
    2664:	91 f7       	brne	.-28     	; 0x264a <ShowServoAmp+0xb6>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	05 c0       	rjmp	.+10     	; 0x2676 <ShowServoAmp+0xe2>
 	DispBuf[loc++] = tmp;
    266c:	e3 2f       	mov	r30, r19
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	e0 50       	subi	r30, 0x00	; 0
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	20 83       	st	Z, r18
    2676:	38 2f       	mov	r19, r24
    2678:	37 5e       	subi	r19, 0xE7	; 231
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    267a:	fc 01       	movw	r30, r24
    267c:	e3 56       	subi	r30, 0x63	; 99
    267e:	fc 4f       	sbci	r31, 0xFC	; 252
    2680:	24 91       	lpm	r18, Z+
    2682:	01 96       	adiw	r24, 0x01	; 1
    2684:	22 23       	and	r18, r18
    2686:	91 f7       	brne	.-28     	; 0x266c <ShowServoAmp+0xd8>
 DispBuf[ServoPosAmp_DispStart + ServoPosAmp_SignOfs] = ' ';
 
 PutStr_ROM(ServoPosAmp_DispStart, (U8 *)ServoAmp);
 PutStr_ROM(ServoPosAmp_DispStart + ServoPosAmp_UnitOfs, (U8 *)Unit_Symbols[Unit_V]);

 BitSet8(Flags, (1 << Flags_DispUpdate));
    2688:	80 91 4d 01 	lds	r24, 0x014D
    268c:	80 68       	ori	r24, 0x80	; 128
    268e:	80 93 4d 01 	sts	0x014D, r24

 SetDigitalPot((U8)(((U32)miniDDS.ServoAMPcurr * 100)/ServoAmpMax)); 
    2692:	60 91 93 01 	lds	r22, 0x0193
    2696:	70 91 94 01 	lds	r23, 0x0194
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	24 e6       	ldi	r18, 0x64	; 100
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    26aa:	20 e1       	ldi	r18, 0x10	; 16
    26ac:	37 e2       	ldi	r19, 0x27	; 39
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    26b6:	82 2f       	mov	r24, r18
    26b8:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>
 // Set offset to half of Servo Amp
 UpdateOfs((U32)miniDDS.ServoAMPcurr/2 + OFSmax/2);
    26bc:	60 91 93 01 	lds	r22, 0x0193
    26c0:	70 91 94 01 	lds	r23, 0x0194
    26c4:	76 95       	lsr	r23
    26c6:	67 95       	ror	r22
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	68 57       	subi	r22, 0x78	; 120
    26ce:	7c 4e       	sbci	r23, 0xEC	; 236
    26d0:	8f 4f       	sbci	r24, 0xFF	; 255
    26d2:	9f 4f       	sbci	r25, 0xFF	; 255
    26d4:	0e 94 7d 05 	call	0xafa	; 0xafa <UpdateOfs>
 
}
    26d8:	08 95       	ret

000026da <ServoAmpInputHandle>:
 SaveSetting();
}

void	ServoAmpInputHandle(void)
{
 switch(NumInput.EndKey) {
    26da:	80 91 75 01 	lds	r24, 0x0175
    26de:	8f 30       	cpi	r24, 0x0F	; 15
    26e0:	29 f0       	breq	.+10     	; 0x26ec <ServoAmpInputHandle+0x12>
    26e2:	80 31       	cpi	r24, 0x10	; 16
    26e4:	79 f4       	brne	.+30     	; 0x2704 <ServoAmpInputHandle+0x2a>
	case KC_KHz:
		// Take whole part only
		if(CalWholePart()) {
    26e6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <ServoAmpInputHandle+0x16>
			miniDDS.ServoAMPcurr  = NumInput.DataValue;
			}
		break;
		
	case KC_Hz:
		if(CalValue()) {
    26ec:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    26f0:	88 23       	and	r24, r24
    26f2:	41 f0       	breq	.+16     	; 0x2704 <ServoAmpInputHandle+0x2a>
 			miniDDS.ServoAMPcurr = NumInput.DataValue;
    26f4:	80 91 71 01 	lds	r24, 0x0171
    26f8:	90 91 72 01 	lds	r25, 0x0172
    26fc:	90 93 94 01 	sts	0x0194, r25
    2700:	80 93 93 01 	sts	0x0193, r24
	case KC_ESC:
	default:
		break;
	}

 ShowServoAmp();
    2704:	0e 94 ca 12 	call	0x2594	; 0x2594 <ShowServoAmp>
 SaveSetting();
    2708:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
}
    270c:	08 95       	ret

0000270e <ShowOfs>:

 SetDigitalPot((U8)((miniDDS.Amp * 100)/AMPmax)); 
}

void	ShowOfs(U8 startpos)
{
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	08 2f       	mov	r16, r24
 U32 tmp;
 U8	tmp0;

 if(miniDDS.Ofs >= OFSmax/2) {
    2714:	20 91 84 01 	lds	r18, 0x0184
    2718:	30 91 85 01 	lds	r19, 0x0185
    271c:	40 91 86 01 	lds	r20, 0x0186
    2720:	50 91 87 01 	lds	r21, 0x0187
    2724:	28 38       	cpi	r18, 0x88	; 136
    2726:	83 e1       	ldi	r24, 0x13	; 19
    2728:	38 07       	cpc	r19, r24
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	48 07       	cpc	r20, r24
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	58 07       	cpc	r21, r24
    2732:	40 f0       	brcs	.+16     	; 0x2744 <ShowOfs+0x36>
 	tmp = miniDDS.Ofs - OFSmax/2;
    2734:	ca 01       	movw	r24, r20
    2736:	b9 01       	movw	r22, r18
    2738:	68 58       	subi	r22, 0x88	; 136
    273a:	73 41       	sbci	r23, 0x13	; 19
    273c:	80 40       	sbci	r24, 0x00	; 0
    273e:	90 40       	sbci	r25, 0x00	; 0
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	09 c0       	rjmp	.+18     	; 0x2756 <ShowOfs+0x48>
	tmp0 = 0;
 	}
 else {
 	tmp = OFSmax/2 - miniDDS.Ofs;
    2744:	68 e8       	ldi	r22, 0x88	; 136
    2746:	73 e1       	ldi	r23, 0x13	; 19
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	62 1b       	sub	r22, r18
    274e:	73 0b       	sbc	r23, r19
    2750:	84 0b       	sbc	r24, r20
    2752:	95 0b       	sbc	r25, r21
    2754:	11 e0       	ldi	r17, 0x01	; 1
	tmp0 = 1;
 	}
 
 BinToDec32(tmp, (U8*)Strbuf);
    2756:	43 e3       	ldi	r20, 0x33	; 51
    2758:	51 e0       	ldi	r21, 0x01	; 1
    275a:	0e 94 bc 07 	call	0xf78	; 0xf78 <BinToDec32>

 DispBuf[startpos + 0] = ' ';
    275e:	a0 2f       	mov	r26, r16
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	fd 01       	movw	r30, r26
    2764:	e0 50       	subi	r30, 0x00	; 0
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 e2       	ldi	r24, 0x20	; 32
    276a:	80 83       	st	Z, r24
 DispBuf[startpos + 1] = ' ';
    276c:	fd 01       	movw	r30, r26
    276e:	ef 5f       	subi	r30, 0xFF	; 255
    2770:	fe 4f       	sbci	r31, 0xFE	; 254
    2772:	80 83       	st	Z, r24
 DispBuf[startpos + 2] = (tmp0 == 1) ?  '-' : '+';
    2774:	11 30       	cpi	r17, 0x01	; 1
    2776:	11 f0       	breq	.+4      	; 0x277c <ShowOfs+0x6e>
    2778:	8b e2       	ldi	r24, 0x2B	; 43
    277a:	01 c0       	rjmp	.+2      	; 0x277e <ShowOfs+0x70>
    277c:	8d e2       	ldi	r24, 0x2D	; 45
    277e:	fd 01       	movw	r30, r26
    2780:	ee 5f       	subi	r30, 0xFE	; 254
    2782:	fe 4f       	sbci	r31, 0xFE	; 254
    2784:	80 83       	st	Z, r24
 DispBuf[startpos + 3] = Strbuf[6];
    2786:	80 91 39 01 	lds	r24, 0x0139
    278a:	fd 01       	movw	r30, r26
    278c:	ed 5f       	subi	r30, 0xFD	; 253
    278e:	fe 4f       	sbci	r31, 0xFE	; 254
    2790:	80 83       	st	Z, r24
 DispBuf[startpos + 4] = '.';
    2792:	fd 01       	movw	r30, r26
    2794:	ec 5f       	subi	r30, 0xFC	; 252
    2796:	fe 4f       	sbci	r31, 0xFE	; 254
    2798:	8e e2       	ldi	r24, 0x2E	; 46
    279a:	80 83       	st	Z, r24
 DispBuf[startpos + 5] = Strbuf[7];
    279c:	80 91 3a 01 	lds	r24, 0x013A
    27a0:	fd 01       	movw	r30, r26
    27a2:	eb 5f       	subi	r30, 0xFB	; 251
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	80 83       	st	Z, r24
 DispBuf[startpos + 6] = ' ';
    27a8:	fd 01       	movw	r30, r26
    27aa:	ea 5f       	subi	r30, 0xFA	; 250
    27ac:	fe 4f       	sbci	r31, 0xFE	; 254
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	80 83       	st	Z, r24
 DispBuf[startpos + 7] = 'V';
    27b2:	a9 5f       	subi	r26, 0xF9	; 249
    27b4:	be 4f       	sbci	r27, 0xFE	; 254
    27b6:	86 e5       	ldi	r24, 0x56	; 86
    27b8:	8c 93       	st	X, r24

 if(miniDDS.Mode == KS_CW) {
    27ba:	80 91 79 01 	lds	r24, 0x0179
    27be:	88 23       	and	r24, r24
    27c0:	11 f4       	brne	.+4      	; 0x27c6 <ShowOfs+0xb8>
 	ShowFocus();
    27c2:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
 	}
 BitSet8(Flags, (1 << Flags_DispUpdate));
    27c6:	80 91 4d 01 	lds	r24, 0x014D
    27ca:	80 68       	ori	r24, 0x80	; 128
    27cc:	80 93 4d 01 	sts	0x014D, r24

 UpdateOfs(miniDDS.Ofs);
    27d0:	60 91 84 01 	lds	r22, 0x0184
    27d4:	70 91 85 01 	lds	r23, 0x0185
    27d8:	80 91 86 01 	lds	r24, 0x0186
    27dc:	90 91 87 01 	lds	r25, 0x0187
    27e0:	0e 94 7d 05 	call	0xafa	; 0xafa <UpdateOfs>
}
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	08 95       	ret

000027ea <IncInputHandle>:
}
*/

void	IncInputHandle(void)
{
 switch(NumInput.EndKey) {
    27ea:	80 91 75 01 	lds	r24, 0x0175
    27ee:	8f 50       	subi	r24, 0x0F	; 15
    27f0:	82 30       	cpi	r24, 0x02	; 2
    27f2:	40 f5       	brcc	.+80     	; 0x2844 <IncInputHandle+0x5a>
	case KC_Hz:
	case KC_KHz:
		// Frequency or cycle increment input
		// Take whole part only
		if(CalWholePart()) {
    27f4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    27f8:	88 23       	and	r24, r24
    27fa:	21 f1       	breq	.+72     	; 0x2844 <IncInputHandle+0x5a>
			if(NumInput.DataValue != 0) {
    27fc:	80 91 71 01 	lds	r24, 0x0171
    2800:	90 91 72 01 	lds	r25, 0x0172
    2804:	a0 91 73 01 	lds	r26, 0x0173
    2808:	b0 91 74 01 	lds	r27, 0x0174
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	a1 05       	cpc	r26, r1
    2810:	b1 05       	cpc	r27, r1
    2812:	c1 f0       	breq	.+48     	; 0x2844 <IncInputHandle+0x5a>
				switch(NumInput.EndKey) {
    2814:	20 91 75 01 	lds	r18, 0x0175
    2818:	2f 30       	cpi	r18, 0x0F	; 15
    281a:	19 f0       	breq	.+6      	; 0x2822 <IncInputHandle+0x38>
    281c:	20 31       	cpi	r18, 0x10	; 16
    281e:	91 f4       	brne	.+36     	; 0x2844 <IncInputHandle+0x5a>
    2820:	09 c0       	rjmp	.+18     	; 0x2834 <IncInputHandle+0x4a>
					case KC_Hz:
						miniDDS.FreqIncStep = NumInput.DataValue;
    2822:	80 93 89 01 	sts	0x0189, r24
    2826:	90 93 8a 01 	sts	0x018A, r25
    282a:	a0 93 8b 01 	sts	0x018B, r26
    282e:	b0 93 8c 01 	sts	0x018C, r27
    2832:	08 c0       	rjmp	.+16     	; 0x2844 <IncInputHandle+0x5a>
						break;
					case KC_KHz:
						miniDDS.CycleIncStep = NumInput.DataValue;
    2834:	80 93 8d 01 	sts	0x018D, r24
    2838:	90 93 8e 01 	sts	0x018E, r25
    283c:	a0 93 8f 01 	sts	0x018F, r26
    2840:	b0 93 90 01 	sts	0x0190, r27
	case KC_ESC:
	default:
		break;
	}

 SaveSetting();
    2844:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    284c:	20 e2       	ldi	r18, 0x20	; 32
    284e:	fc 01       	movw	r30, r24
    2850:	e0 50       	subi	r30, 0x00	; 0
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	20 83       	st	Z, r18
    2856:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    2858:	80 32       	cpi	r24, 0x20	; 32
    285a:	91 05       	cpc	r25, r1
    285c:	c1 f7       	brne	.-16     	; 0x284e <IncInputHandle+0x64>
		break;
	}

 SaveSetting();
 ClearDisp();
 ShowType();
    285e:	0e 94 9d 0a 	call	0x153a	; 0x153a <ShowType>
 ShowFreqPeroid();
    2862:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ShowFreqPeroid>
 ShowAmp(AmpPos_CW);
    2866:	81 e1       	ldi	r24, 0x11	; 17
    2868:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
 ShowOfs(OfsPos_CW);
    286c:	88 e1       	ldi	r24, 0x18	; 24
    286e:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
 ShowFocus();
    2872:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
}
    2876:	08 95       	ret

00002878 <OfsInputHandle>:

void	OfsInputHandle(void)
{
 U32	tmp2;

 switch(NumInput.EndKey) {
    2878:	80 91 75 01 	lds	r24, 0x0175
    287c:	8f 30       	cpi	r24, 0x0F	; 15
    287e:	21 f0       	breq	.+8      	; 0x2888 <OfsInputHandle+0x10>
    2880:	80 31       	cpi	r24, 0x10	; 16
    2882:	09 f0       	breq	.+2      	; 0x2886 <OfsInputHandle+0xe>
    2884:	45 c0       	rjmp	.+138    	; 0x2910 <OfsInputHandle+0x98>
    2886:	03 c0       	rjmp	.+6      	; 0x288e <OfsInputHandle+0x16>
	case KC_Hz:
		if(CalValue()) {
    2888:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <OfsInputHandle+0x1a>
			}
		break;
		
	case KC_KHz:
		// Take whole part only
		if(CalWholePart()) {
    288e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    2892:	88 23       	and	r24, r24
    2894:	41 f0       	breq	.+16     	; 0x28a6 <OfsInputHandle+0x2e>
			tmp2 = NumInput.DataValue;
    2896:	70 91 71 01 	lds	r23, 0x0171
    289a:	60 91 72 01 	lds	r22, 0x0172
    289e:	90 91 73 01 	lds	r25, 0x0173
    28a2:	80 91 74 01 	lds	r24, 0x0174
    28a6:	27 2f       	mov	r18, r23
    28a8:	36 2f       	mov	r19, r22
    28aa:	49 2f       	mov	r20, r25
    28ac:	58 2f       	mov	r21, r24
    28ae:	c9 01       	movw	r24, r18
    28b0:	da 01       	movw	r26, r20
    28b2:	9c 01       	movw	r18, r24
    28b4:	ad 01       	movw	r20, r26
    28b6:	29 38       	cpi	r18, 0x89	; 137
    28b8:	83 e1       	ldi	r24, 0x13	; 19
    28ba:	38 07       	cpc	r19, r24
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	48 07       	cpc	r20, r24
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	58 07       	cpc	r21, r24
    28c4:	20 f0       	brcs	.+8      	; 0x28ce <OfsInputHandle+0x56>
    28c6:	28 e8       	ldi	r18, 0x88	; 136
    28c8:	33 e1       	ldi	r19, 0x13	; 19
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
 if(tmp2 > OFSmax/2) {
	tmp2 = OFSmax/2;
	}

 // Sign handling
 if(NumInput.Sign == Sign_Neg) {
    28ce:	80 91 6f 01 	lds	r24, 0x016F
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	89 f4       	brne	.+34     	; 0x28f8 <OfsInputHandle+0x80>
	// Negative
	miniDDS.Ofs = OFSmax/2 - tmp2;
    28d6:	88 e8       	ldi	r24, 0x88	; 136
    28d8:	93 e1       	ldi	r25, 0x13	; 19
    28da:	a0 e0       	ldi	r26, 0x00	; 0
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	82 1b       	sub	r24, r18
    28e0:	93 0b       	sbc	r25, r19
    28e2:	a4 0b       	sbc	r26, r20
    28e4:	b5 0b       	sbc	r27, r21
    28e6:	80 93 84 01 	sts	0x0184, r24
    28ea:	90 93 85 01 	sts	0x0185, r25
    28ee:	a0 93 86 01 	sts	0x0186, r26
    28f2:	b0 93 87 01 	sts	0x0187, r27
    28f6:	0c c0       	rjmp	.+24     	; 0x2910 <OfsInputHandle+0x98>
	}
 else {
	// Positive
 	miniDDS.Ofs = OFSmax/2 + tmp2;
    28f8:	28 57       	subi	r18, 0x78	; 120
    28fa:	3c 4e       	sbci	r19, 0xEC	; 236
    28fc:	4f 4f       	sbci	r20, 0xFF	; 255
    28fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2900:	20 93 84 01 	sts	0x0184, r18
    2904:	30 93 85 01 	sts	0x0185, r19
    2908:	40 93 86 01 	sts	0x0186, r20
    290c:	50 93 87 01 	sts	0x0187, r21
	}

 ShowOffset:		
 if(miniDDS.Mode == KS_CW) {
    2910:	80 91 79 01 	lds	r24, 0x0179
    2914:	88 23       	and	r24, r24
    2916:	19 f4       	brne	.+6      	; 0x291e <OfsInputHandle+0xa6>
 	ShowOfs(OfsPos_CW);
    2918:	88 e1       	ldi	r24, 0x18	; 24
    291a:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
 	}
 if(miniDDS.Mode == KS_Sweep) {
    291e:	80 91 79 01 	lds	r24, 0x0179
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	19 f4       	brne	.+6      	; 0x292c <OfsInputHandle+0xb4>
 	ShowOfs(OfsPos_Sweep);
    2926:	84 e1       	ldi	r24, 0x14	; 20
    2928:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
 	}
 SaveSetting();
    292c:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
}
    2930:	08 95       	ret

00002932 <CW_Init>:
 
}

void	CW_Init(void)
{
 SysState.CurrState = KS_CW;
    2932:	10 92 5e 01 	sts	0x015E, r1
 CurrMode = KS_CW;
    2936:	10 92 ba 01 	sts	0x01BA, r1
 CurrFocus = FC_Freq;
    293a:	10 92 b9 01 	sts	0x01B9, r1
 TrigCtrl = '>';	
    293e:	8e e3       	ldi	r24, 0x3E	; 62
    2940:	80 93 b8 01 	sts	0x01B8, r24
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    2948:	20 e2       	ldi	r18, 0x20	; 32
    294a:	fc 01       	movw	r30, r24
    294c:	e0 50       	subi	r30, 0x00	; 0
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	20 83       	st	Z, r18
    2952:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    2954:	80 32       	cpi	r24, 0x20	; 32
    2956:	91 05       	cpc	r25, r1
    2958:	c1 f7       	brne	.-16     	; 0x294a <CW_Init+0x18>
 CurrMode = KS_CW;
 CurrFocus = FC_Freq;
 TrigCtrl = '>';	

 ClearDisp();
 ShowType();
    295a:	0e 94 9d 0a 	call	0x153a	; 0x153a <ShowType>
 ShowFreqPeroid();
    295e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ShowFreqPeroid>
 ShowAmp(AmpPos_CW);
    2962:	81 e1       	ldi	r24, 0x11	; 17
    2964:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
 ShowOfs(OfsPos_CW);
    2968:	88 e1       	ldi	r24, 0x18	; 24
    296a:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
 ShowFocus();
    296e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
}
    2972:	08 95       	ret

00002974 <ShowSweep>:

 SendDDS();
}

void	ShowSweep(void)
{
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    2978:	20 e2       	ldi	r18, 0x20	; 32
    297a:	fc 01       	movw	r30, r24
    297c:	e0 50       	subi	r30, 0x00	; 0
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	20 83       	st	Z, r18
    2982:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    2984:	80 32       	cpi	r24, 0x20	; 32
    2986:	91 05       	cpc	r25, r1
    2988:	c1 f7       	brne	.-16     	; 0x297a <ShowSweep+0x6>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	05 c0       	rjmp	.+10     	; 0x299a <ShowSweep+0x26>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    2990:	e3 2f       	mov	r30, r19
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	e0 50       	subi	r30, 0x00	; 0
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	20 83       	st	Z, r18
    299a:	38 2f       	mov	r19, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    299c:	fc 01       	movw	r30, r24
    299e:	e9 53       	subi	r30, 0x39	; 57
    29a0:	fc 4f       	sbci	r31, 0xFC	; 252
    29a2:	24 91       	lpm	r18, Z+
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	22 23       	and	r18, r18
    29a8:	99 f7       	brne	.-26     	; 0x2990 <ShowSweep+0x1c>

 // Display title
 PutStr_ROM(0, (U8*)ModeNames[KS_Sweep]);

 // Show Trig Control state
 if(TrigCtrl == '*') {
    29aa:	80 91 b8 01 	lds	r24, 0x01B8
    29ae:	8a 32       	cpi	r24, 0x2A	; 42
    29b0:	11 f4       	brne	.+4      	; 0x29b6 <ShowSweep+0x42>
	DispBuf[6] = '*';
    29b2:	80 93 06 01 	sts	0x0106, r24
 	}
 // Show Sweep direction mode
 DispBuf[7] = miniDDS.SweepDir;
    29b6:	80 91 b5 01 	lds	r24, 0x01B5
    29ba:	80 93 07 01 	sts	0x0107, r24

 // Display wavefore type
 ShowType();
    29be:	0e 94 9d 0a 	call	0x153a	; 0x153a <ShowType>
 
 // Display parameter name
 PutStr_ROM(16, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
    29c2:	40 91 b9 01 	lds	r20, 0x01B9
    29c6:	24 2f       	mov	r18, r20
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	c9 01       	movw	r24, r18
    29cc:	b3 e0       	ldi	r27, 0x03	; 3
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	ba 95       	dec	r27
    29d4:	e1 f7       	brne	.-8      	; 0x29ce <ShowSweep+0x5a>
    29d6:	82 1b       	sub	r24, r18
    29d8:	93 0b       	sbc	r25, r19
    29da:	81 53       	subi	r24, 0x31	; 49
    29dc:	9c 4f       	sbci	r25, 0xFC	; 252
    29de:	60 e1       	ldi	r22, 0x10	; 16
    29e0:	06 c0       	rjmp	.+12     	; 0x29ee <ShowSweep+0x7a>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    29e2:	e6 2f       	mov	r30, r22
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	e0 50       	subi	r30, 0x00	; 0
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	70 83       	st	Z, r23
    29ec:	6f 5f       	subi	r22, 0xFF	; 255
    29ee:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	74 91       	lpm	r23, Z+
    29f4:	77 23       	and	r23, r23
    29f6:	a9 f7       	brne	.-22     	; 0x29e2 <ShowSweep+0x6e>
 
 // Display parameter name
 PutStr_ROM(16, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
 
 // Display parameter unit
 if((CurrFocus >= FC_SW_StartFreq) && (CurrFocus <= FC_SW_Tstep)) {
    29f8:	84 2f       	mov	r24, r20
    29fa:	86 50       	subi	r24, 0x06	; 6
    29fc:	84 30       	cpi	r24, 0x04	; 4
    29fe:	f8 f4       	brcc	.+62     	; 0x2a3e <ShowSweep+0xca>
 	PutStr_ROM(30, (U8*)SweepParamUnit[CurrFocus - FC_SW_StartFreq]);
    2a00:	c9 01       	movw	r24, r18
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	82 0f       	add	r24, r18
    2a08:	93 1f       	adc	r25, r19
    2a0a:	8f 5e       	subi	r24, 0xEF	; 239
    2a0c:	9b 4f       	sbci	r25, 0xFB	; 251
    2a0e:	2e e1       	ldi	r18, 0x1E	; 30
    2a10:	06 c0       	rjmp	.+12     	; 0x2a1e <ShowSweep+0xaa>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    2a12:	e2 2f       	mov	r30, r18
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	e0 50       	subi	r30, 0x00	; 0
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	30 83       	st	Z, r19
    2a1c:	2f 5f       	subi	r18, 0xFF	; 255
    2a1e:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    2a20:	01 96       	adiw	r24, 0x01	; 1
    2a22:	34 91       	lpm	r19, Z+
    2a24:	33 23       	and	r19, r19
    2a26:	a9 f7       	brne	.-22     	; 0x2a12 <ShowSweep+0x9e>
 PutStr_ROM(16, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
 
 // Display parameter unit
 if((CurrFocus >= FC_SW_StartFreq) && (CurrFocus <= FC_SW_Tstep)) {
 	PutStr_ROM(30, (U8*)SweepParamUnit[CurrFocus - FC_SW_StartFreq]);
 	DispWholeNum(22, 7, (U32 *)((U8 *)&miniDDS.SweepStartFreq + (CurrFocus - FC_SW_StartFreq) * 4));
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	44 0f       	add	r20, r20
    2a2c:	55 1f       	adc	r21, r21
    2a2e:	44 0f       	add	r20, r20
    2a30:	55 1f       	adc	r21, r21
    2a32:	43 57       	subi	r20, 0x73	; 115
    2a34:	5e 4f       	sbci	r21, 0xFE	; 254
    2a36:	86 e1       	ldi	r24, 0x16	; 22
    2a38:	67 e0       	ldi	r22, 0x07	; 7
    2a3a:	0e 94 94 0b 	call	0x1728	; 0x1728 <DispWholeNum>
 	}

 if(CurrFocus == FC_SW_Amp) {
    2a3e:	80 91 b9 01 	lds	r24, 0x01B9
    2a42:	8a 30       	cpi	r24, 0x0A	; 10
    2a44:	21 f4       	brne	.+8      	; 0x2a4e <ShowSweep+0xda>
 	ShowAmp(AmpPos_Sweep);
    2a46:	85 e1       	ldi	r24, 0x15	; 21
    2a48:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
    2a4c:	17 c0       	rjmp	.+46     	; 0x2a7c <ShowSweep+0x108>

 	}
 else {
	// Set amplitude
 	SetDigitalPot((U8)((miniDDS.Amp * 100)/AMPmax)); 
    2a4e:	60 91 80 01 	lds	r22, 0x0180
    2a52:	70 91 81 01 	lds	r23, 0x0181
    2a56:	80 91 82 01 	lds	r24, 0x0182
    2a5a:	90 91 83 01 	lds	r25, 0x0183
    2a5e:	24 e6       	ldi	r18, 0x64	; 100
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    2a6a:	20 e1       	ldi	r18, 0x10	; 16
    2a6c:	37 e2       	ldi	r19, 0x27	; 39
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    2a76:	82 2f       	mov	r24, r18
    2a78:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>
 	}
 
 if(CurrFocus == FC_SW_Ofs) {
    2a7c:	80 91 b9 01 	lds	r24, 0x01B9
    2a80:	8b 30       	cpi	r24, 0x0B	; 11
    2a82:	21 f4       	brne	.+8      	; 0x2a8c <ShowSweep+0x118>
 	ShowOfs(OfsPos_Sweep);
    2a84:	84 e1       	ldi	r24, 0x14	; 20
    2a86:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
    2a8a:	0a c0       	rjmp	.+20     	; 0x2aa0 <ShowSweep+0x12c>

 	}
 else {
	// Set offset
	UpdateOfs(miniDDS.Ofs);
    2a8c:	60 91 84 01 	lds	r22, 0x0184
    2a90:	70 91 85 01 	lds	r23, 0x0185
    2a94:	80 91 86 01 	lds	r24, 0x0186
    2a98:	90 91 87 01 	lds	r25, 0x0187
    2a9c:	0e 94 7d 05 	call	0xafa	; 0xafa <UpdateOfs>
 	}

 BitSet8(Flags, (1 << Flags_DispUpdate));
    2aa0:	80 91 4d 01 	lds	r24, 0x014D
    2aa4:	80 68       	ori	r24, 0x80	; 128
    2aa6:	80 93 4d 01 	sts	0x014D, r24

 SendSweep();
    2aaa:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <SendSweep>
}
    2aae:	08 95       	ret

00002ab0 <ToggleSweepDir>:
 
}

void	ToggleSweepDir(void)
{
 if(miniDDS.SweepDir == ' ') {
    2ab0:	80 91 b5 01 	lds	r24, 0x01B5
    2ab4:	80 32       	cpi	r24, 0x20	; 32
    2ab6:	11 f4       	brne	.+4      	; 0x2abc <ToggleSweepDir+0xc>
 	miniDDS.SweepDir = 'B';		// Trig Contral enabled
    2ab8:	82 e4       	ldi	r24, 0x42	; 66
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <ToggleSweepDir+0xe>
 	}
 else {
 	miniDDS.SweepDir = ' ';
    2abc:	80 e2       	ldi	r24, 0x20	; 32
    2abe:	80 93 b5 01 	sts	0x01B5, r24
 	}

 EE_Write((U16)&miniDDS_EE.SweepDir, miniDDS.SweepDir);
    2ac2:	8f e3       	ldi	r24, 0x3F	; 63
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	60 91 b5 01 	lds	r22, 0x01B5
    2aca:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>

 ShowSweep();
    2ace:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>

 BitSet8(Flags, (1 << Flags_DispUpdate));
    2ad2:	80 91 4d 01 	lds	r24, 0x014D
    2ad6:	80 68       	ori	r24, 0x80	; 128
    2ad8:	80 93 4d 01 	sts	0x014D, r24
}
    2adc:	08 95       	ret

00002ade <ToggleTrigCtrl>:
 
}

void	ToggleTrigCtrl(void)
{
 if(TrigCtrl == '>') {
    2ade:	80 91 b8 01 	lds	r24, 0x01B8
    2ae2:	8e 33       	cpi	r24, 0x3E	; 62
    2ae4:	11 f4       	brne	.+4      	; 0x2aea <ToggleTrigCtrl+0xc>
 	TrigCtrl = '*';		// Trig Contral enabled
    2ae6:	8a e2       	ldi	r24, 0x2A	; 42
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <ToggleTrigCtrl+0xe>
 	}
 else {
 	TrigCtrl = '>';
    2aea:	8e e3       	ldi	r24, 0x3E	; 62
    2aec:	80 93 b8 01 	sts	0x01B8, r24
 	}

 switch(SysState.CurrState) {
    2af0:	80 91 5e 01 	lds	r24, 0x015E
    2af4:	88 23       	and	r24, r24
    2af6:	19 f0       	breq	.+6      	; 0x2afe <ToggleTrigCtrl+0x20>
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	41 f4       	brne	.+16     	; 0x2b0c <ToggleTrigCtrl+0x2e>
    2afc:	05 c0       	rjmp	.+10     	; 0x2b08 <ToggleTrigCtrl+0x2a>
 	case KS_CW:
 		ShowFocus();
    2afe:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
 		SendDDS();
    2b02:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <SendDDS>
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <ToggleTrigCtrl+0x2e>
		break;
		
	case KS_Sweep:
		ShowSweep();
    2b08:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
	default:
		break;
 	}
 
 BitSet8(Flags, (1 << Flags_DispUpdate));
    2b0c:	80 91 4d 01 	lds	r24, 0x014D
    2b10:	80 68       	ori	r24, 0x80	; 128
    2b12:	80 93 4d 01 	sts	0x014D, r24
 
}
    2b16:	08 95       	ret

00002b18 <SweepParamInputHandle>:
 SaveSetting();
 ShowFreqPeroid();			
}

void	SweepParamInputHandle(void)
{
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	0f 92       	push	r0
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
 U32 tmp;
 U8	SetType, SetUnit;

 tmp = *(U32 *)((U8 *)&miniDDS.SweepStartFreq + (CurrFocus - FC_SW_StartFreq) * 4);
    2b2a:	80 91 b9 01 	lds	r24, 0x01B9
    2b2e:	e8 2f       	mov	r30, r24
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	ee 0f       	add	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	ee 0f       	add	r30, r30
    2b38:	ff 1f       	adc	r31, r31
    2b3a:	e3 57       	subi	r30, 0x73	; 115
    2b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b3e:	e0 80       	ld	r14, Z
    2b40:	f1 80       	ldd	r15, Z+1	; 0x01
    2b42:	02 81       	ldd	r16, Z+2	; 0x02
    2b44:	13 81       	ldd	r17, Z+3	; 0x03
 switch(NumInput.EndKey) {
    2b46:	90 91 75 01 	lds	r25, 0x0175
    2b4a:	9f 30       	cpi	r25, 0x0F	; 15
    2b4c:	21 f0       	breq	.+8      	; 0x2b56 <SweepParamInputHandle+0x3e>
    2b4e:	90 31       	cpi	r25, 0x10	; 16
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <SweepParamInputHandle+0x3c>
    2b52:	64 c0       	rjmp	.+200    	; 0x2c1c <SweepParamInputHandle+0x104>
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <SweepParamInputHandle+0x46>
	case KC_Hz:
		if((CurrFocus >= FC_SW_StartFreq) && (CurrFocus <= FC_SW_StopFreq)) {
    2b56:	86 50       	subi	r24, 0x06	; 6
    2b58:	82 30       	cpi	r24, 0x02	; 2
    2b5a:	50 f4       	brcc	.+20     	; 0x2b70 <SweepParamInputHandle+0x58>
    2b5c:	10 c0       	rjmp	.+32     	; 0x2b7e <SweepParamInputHandle+0x66>
			SetUnit = Unit_Sec;
			}
		break;
		
	case KC_KHz:
		if((CurrFocus >= FC_SW_StartFreq) && (CurrFocus <= FC_SW_StopFreq)) {
    2b5e:	86 50       	subi	r24, 0x06	; 6
    2b60:	82 30       	cpi	r24, 0x02	; 2
    2b62:	18 f0       	brcs	.+6      	; 0x2b6a <SweepParamInputHandle+0x52>
    2b64:	21 e0       	ldi	r18, 0x01	; 1
    2b66:	29 83       	std	Y+1, r18	; 0x01
    2b68:	0b c0       	rjmp	.+22     	; 0x2b80 <SweepParamInputHandle+0x68>
    2b6a:	19 82       	std	Y+1, r1	; 0x01
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <SweepParamInputHandle+0x5e>
		break;
		
	case KC_ESC:
	default:
 		ShowSweep();	
		return;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	89 83       	std	Y+1, r24	; 0x01
    2b74:	82 e0       	ldi	r24, 0x02	; 2
	// Take whole part only
	if(CalWholePart()) {
		tmp = NumInput.DataValue;
		}
	}
 else if((SetUnit == Unit_KHz) || (SetUnit == Unit_Sec)){
    2b76:	81 50       	subi	r24, 0x01	; 1
    2b78:	82 30       	cpi	r24, 0x02	; 2
    2b7a:	88 f4       	brcc	.+34     	; 0x2b9e <SweepParamInputHandle+0x86>
    2b7c:	04 c0       	rjmp	.+8      	; 0x2b86 <SweepParamInputHandle+0x6e>
    2b7e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

 if((SetUnit == Unit_Hz) || (SetUnit == Unit_mSec)) {
	// Take whole part only
	if(CalWholePart()) {
    2b80:	0e 94 ee 08 	call	0x11dc	; 0x11dc <CalWholePart>
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <SweepParamInputHandle+0x72>
		tmp = NumInput.DataValue;
		}
	}
 else if((SetUnit == Unit_KHz) || (SetUnit == Unit_Sec)){
	// Take whole part and decimal
	if(CalValue()) {
    2b86:	0e 94 26 09 	call	0x124c	; 0x124c <CalValue>
    2b8a:	88 23       	and	r24, r24
    2b8c:	41 f0       	breq	.+16     	; 0x2b9e <SweepParamInputHandle+0x86>
		tmp = NumInput.DataValue;
    2b8e:	e0 90 71 01 	lds	r14, 0x0171
    2b92:	f0 90 72 01 	lds	r15, 0x0172
    2b96:	00 91 73 01 	lds	r16, 0x0173
    2b9a:	10 91 74 01 	lds	r17, 0x0174
		}
	}

 // Do not change if 0 was entered for time
 // Values (including Sweep Time) are limited by FreqMax and FreqMin in PutFreq()
 if((SetType != SetType_Period) || (tmp != 0)) {
    2b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba0:	e1 30       	cpi	r30, 0x01	; 1
    2ba2:	29 f4       	brne	.+10     	; 0x2bae <SweepParamInputHandle+0x96>
    2ba4:	e1 14       	cp	r14, r1
    2ba6:	f1 04       	cpc	r15, r1
    2ba8:	01 05       	cpc	r16, r1
    2baa:	11 05       	cpc	r17, r1
    2bac:	e1 f0       	breq	.+56     	; 0x2be6 <SweepParamInputHandle+0xce>
 	freq = FreqMax;
 	}
 if(freq < FreqMin) {
 	freq = FreqMin;
 	}
 *item = freq;
    2bae:	80 91 b9 01 	lds	r24, 0x01B9
    2bb2:	e8 2f       	mov	r30, r24
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	ee 0f       	add	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	e3 57       	subi	r30, 0x73	; 115
    2bc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc2:	d8 01       	movw	r26, r16
    2bc4:	c7 01       	movw	r24, r14
    2bc6:	80 34       	cpi	r24, 0x40	; 64
    2bc8:	22 e4       	ldi	r18, 0x42	; 66
    2bca:	92 07       	cpc	r25, r18
    2bcc:	2f e0       	ldi	r18, 0x0F	; 15
    2bce:	a2 07       	cpc	r26, r18
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	b2 07       	cpc	r27, r18
    2bd4:	20 f0       	brcs	.+8      	; 0x2bde <SweepParamInputHandle+0xc6>
    2bd6:	8f e3       	ldi	r24, 0x3F	; 63
    2bd8:	92 e4       	ldi	r25, 0x42	; 66
    2bda:	af e0       	ldi	r26, 0x0F	; 15
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	80 83       	st	Z, r24
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	a2 83       	std	Z+2, r26	; 0x02
    2be4:	b3 83       	std	Z+3, r27	; 0x03
 if((SetType != SetType_Period) || (tmp != 0)) {
 	PutFreq((U32 *)((U8 *)&miniDDS.SweepStartFreq + (CurrFocus - FC_SW_StartFreq) * 4), tmp);
// 	*(U32 *)((U8 *)&miniDDS.SweepStartFreq + (CurrFocus - FC_SW_StartFreq) * 4) = tmp;
 	}

 if(miniDDS.SweepTswStep > 0x0000FFFF) {
    2be6:	80 91 b1 01 	lds	r24, 0x01B1
    2bea:	90 91 b2 01 	lds	r25, 0x01B2
    2bee:	a0 91 b3 01 	lds	r26, 0x01B3
    2bf2:	b0 91 b4 01 	lds	r27, 0x01B4
    2bf6:	80 50       	subi	r24, 0x00	; 0
    2bf8:	90 40       	sbci	r25, 0x00	; 0
    2bfa:	a1 40       	sbci	r26, 0x01	; 1
    2bfc:	b0 40       	sbci	r27, 0x00	; 0
    2bfe:	60 f0       	brcs	.+24     	; 0x2c18 <SweepParamInputHandle+0x100>
 	miniDDS.SweepTswStep = 0x0000FFFF;
    2c00:	8f ef       	ldi	r24, 0xFF	; 255
    2c02:	9f ef       	ldi	r25, 0xFF	; 255
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	80 93 b1 01 	sts	0x01B1, r24
    2c0c:	90 93 b2 01 	sts	0x01B2, r25
    2c10:	a0 93 b3 01 	sts	0x01B3, r26
    2c14:	b0 93 b4 01 	sts	0x01B4, r27
 	}
 
 SaveSetting();
    2c18:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 ShowSweep();			
    2c1c:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
}
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	08 95       	ret

00002c30 <Dec>:
 	}
}

void	Dec(void)
{
 if(SysState.CurrState == KS_CW) {
    2c30:	80 91 5e 01 	lds	r24, 0x015E
    2c34:	88 23       	and	r24, r24
    2c36:	09 f0       	breq	.+2      	; 0x2c3a <Dec+0xa>
    2c38:	84 c0       	rjmp	.+264    	; 0x2d42 <Dec+0x112>
 	switch(CurrFocus) {
    2c3a:	80 91 b9 01 	lds	r24, 0x01B9
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <Dec+0x14>
    2c42:	44 c0       	rjmp	.+136    	; 0x2ccc <Dec+0x9c>
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	20 f0       	brcs	.+8      	; 0x2c50 <Dec+0x20>
    2c48:	82 30       	cpi	r24, 0x02	; 2
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <Dec+0x1e>
    2c4c:	78 c0       	rjmp	.+240    	; 0x2d3e <Dec+0x10e>
    2c4e:	5b c0       	rjmp	.+182    	; 0x2d06 <Dec+0xd6>
		case FC_Freq:
			if(miniDDS.SetType == SetType_Freq) {
    2c50:	80 91 7e 01 	lds	r24, 0x017E
    2c54:	88 23       	and	r24, r24
    2c56:	b1 f4       	brne	.+44     	; 0x2c84 <Dec+0x54>
				if(miniDDS.Freq >= miniDDS.FreqIncStep) {
    2c58:	80 91 7a 01 	lds	r24, 0x017A
    2c5c:	90 91 7b 01 	lds	r25, 0x017B
    2c60:	a0 91 7c 01 	lds	r26, 0x017C
    2c64:	b0 91 7d 01 	lds	r27, 0x017D
    2c68:	20 91 89 01 	lds	r18, 0x0189
    2c6c:	30 91 8a 01 	lds	r19, 0x018A
    2c70:	40 91 8b 01 	lds	r20, 0x018B
    2c74:	50 91 8c 01 	lds	r21, 0x018C
    2c78:	82 17       	cp	r24, r18
    2c7a:	93 07       	cpc	r25, r19
    2c7c:	a4 07       	cpc	r26, r20
    2c7e:	b5 07       	cpc	r27, r21
    2c80:	10 f1       	brcs	.+68     	; 0x2cc6 <Dec+0x96>
    2c82:	15 c0       	rjmp	.+42     	; 0x2cae <Dec+0x7e>
					miniDDS.Freq -= miniDDS.FreqIncStep;
					}
				}
			else {
				if(miniDDS.Freq > miniDDS.CycleIncStep) {
    2c84:	80 91 7a 01 	lds	r24, 0x017A
    2c88:	90 91 7b 01 	lds	r25, 0x017B
    2c8c:	a0 91 7c 01 	lds	r26, 0x017C
    2c90:	b0 91 7d 01 	lds	r27, 0x017D
    2c94:	20 91 8d 01 	lds	r18, 0x018D
    2c98:	30 91 8e 01 	lds	r19, 0x018E
    2c9c:	40 91 8f 01 	lds	r20, 0x018F
    2ca0:	50 91 90 01 	lds	r21, 0x0190
    2ca4:	28 17       	cp	r18, r24
    2ca6:	39 07       	cpc	r19, r25
    2ca8:	4a 07       	cpc	r20, r26
    2caa:	5b 07       	cpc	r21, r27
    2cac:	60 f4       	brcc	.+24     	; 0x2cc6 <Dec+0x96>
					miniDDS.Freq -= miniDDS.CycleIncStep;
    2cae:	82 1b       	sub	r24, r18
    2cb0:	93 0b       	sbc	r25, r19
    2cb2:	a4 0b       	sbc	r26, r20
    2cb4:	b5 0b       	sbc	r27, r21
    2cb6:	80 93 7a 01 	sts	0x017A, r24
    2cba:	90 93 7b 01 	sts	0x017B, r25
    2cbe:	a0 93 7c 01 	sts	0x017C, r26
    2cc2:	b0 93 7d 01 	sts	0x017D, r27
					}
				}
 			ShowFreqPeroid();
    2cc6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ShowFreqPeroid>
    2cca:	39 c0       	rjmp	.+114    	; 0x2d3e <Dec+0x10e>
			break;

		case FC_Amp:
 			if(miniDDS.Amp >= 100) {
    2ccc:	80 91 80 01 	lds	r24, 0x0180
    2cd0:	90 91 81 01 	lds	r25, 0x0181
    2cd4:	a0 91 82 01 	lds	r26, 0x0182
    2cd8:	b0 91 83 01 	lds	r27, 0x0183
    2cdc:	84 36       	cpi	r24, 0x64	; 100
    2cde:	91 05       	cpc	r25, r1
    2ce0:	a1 05       	cpc	r26, r1
    2ce2:	b1 05       	cpc	r27, r1
    2ce4:	60 f0       	brcs	.+24     	; 0x2cfe <Dec+0xce>
				miniDDS.Amp -= 100;
    2ce6:	84 56       	subi	r24, 0x64	; 100
    2ce8:	90 40       	sbci	r25, 0x00	; 0
    2cea:	a0 40       	sbci	r26, 0x00	; 0
    2cec:	b0 40       	sbci	r27, 0x00	; 0
    2cee:	80 93 80 01 	sts	0x0180, r24
    2cf2:	90 93 81 01 	sts	0x0181, r25
    2cf6:	a0 93 82 01 	sts	0x0182, r26
    2cfa:	b0 93 83 01 	sts	0x0183, r27
				}
 			ShowAmp(AmpPos_CW);
    2cfe:	81 e1       	ldi	r24, 0x11	; 17
    2d00:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
    2d04:	1c c0       	rjmp	.+56     	; 0x2d3e <Dec+0x10e>
			break;

		case FC_Ofs:
 			if(miniDDS.Ofs >= 100) {
    2d06:	80 91 84 01 	lds	r24, 0x0184
    2d0a:	90 91 85 01 	lds	r25, 0x0185
    2d0e:	a0 91 86 01 	lds	r26, 0x0186
    2d12:	b0 91 87 01 	lds	r27, 0x0187
    2d16:	84 36       	cpi	r24, 0x64	; 100
    2d18:	91 05       	cpc	r25, r1
    2d1a:	a1 05       	cpc	r26, r1
    2d1c:	b1 05       	cpc	r27, r1
    2d1e:	60 f0       	brcs	.+24     	; 0x2d38 <Dec+0x108>
				miniDDS.Ofs -= 100;
    2d20:	84 56       	subi	r24, 0x64	; 100
    2d22:	90 40       	sbci	r25, 0x00	; 0
    2d24:	a0 40       	sbci	r26, 0x00	; 0
    2d26:	b0 40       	sbci	r27, 0x00	; 0
    2d28:	80 93 84 01 	sts	0x0184, r24
    2d2c:	90 93 85 01 	sts	0x0185, r25
    2d30:	a0 93 86 01 	sts	0x0186, r26
    2d34:	b0 93 87 01 	sts	0x0187, r27
				}
 			ShowOfs(OfsPos_CW);
    2d38:	88 e1       	ldi	r24, 0x18	; 24
    2d3a:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
		default:
			break;
 		}
	SaveSetting();
    2d3e:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 	}

 if((SysState.CurrState == KS_Sweep) && (CurrFocus >= FC_SW_StartFreq) && (CurrFocus <= FC_SW_Tstep)) {
    2d42:	80 91 5e 01 	lds	r24, 0x015E
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	81 f4       	brne	.+32     	; 0x2d6a <Dec+0x13a>
    2d4a:	80 91 b9 01 	lds	r24, 0x01B9
    2d4e:	86 30       	cpi	r24, 0x06	; 6
    2d50:	60 f0       	brcs	.+24     	; 0x2d6a <Dec+0x13a>
    2d52:	8a 30       	cpi	r24, 0x0A	; 10
    2d54:	50 f4       	brcc	.+20     	; 0x2d6a <Dec+0x13a>
 	CurrFocus--;
    2d56:	81 50       	subi	r24, 0x01	; 1
    2d58:	80 93 b9 01 	sts	0x01B9, r24
	if(CurrFocus < FC_SW_StartFreq) {
    2d5c:	85 30       	cpi	r24, 0x05	; 5
    2d5e:	19 f4       	brne	.+6      	; 0x2d66 <Dec+0x136>
		CurrFocus = FC_SW_StartFreq;
    2d60:	86 e0       	ldi	r24, 0x06	; 6
    2d62:	80 93 b9 01 	sts	0x01B9, r24
		}
	ShowSweep();
    2d66:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
 	}

 if(SysState.CurrState == KS_ServoPos) {
    2d6a:	80 91 5e 01 	lds	r24, 0x015E
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	e9 f5       	brne	.+122    	; 0x2dec <Dec+0x1bc>
 	switch(CurrFocus) {
    2d72:	80 91 b9 01 	lds	r24, 0x01B9
    2d76:	83 30       	cpi	r24, 0x03	; 3
    2d78:	19 f0       	breq	.+6      	; 0x2d80 <Dec+0x150>
    2d7a:	84 30       	cpi	r24, 0x04	; 4
    2d7c:	a9 f5       	brne	.+106    	; 0x2de8 <Dec+0x1b8>
    2d7e:	20 c0       	rjmp	.+64     	; 0x2dc0 <Dec+0x190>
		case FC_ServoPW:
			if(miniDDS.ServoPWcurr > miniDDS.ServoPWmin + miniDDS.ServoPWinc) {
    2d80:	20 91 91 01 	lds	r18, 0x0191
    2d84:	30 91 92 01 	lds	r19, 0x0192
    2d88:	60 91 95 01 	lds	r22, 0x0195
    2d8c:	70 91 96 01 	lds	r23, 0x0196
    2d90:	40 91 9b 01 	lds	r20, 0x019B
    2d94:	50 91 9c 01 	lds	r21, 0x019C
    2d98:	ca 01       	movw	r24, r20
    2d9a:	86 0f       	add	r24, r22
    2d9c:	97 1f       	adc	r25, r23
    2d9e:	82 17       	cp	r24, r18
    2da0:	93 07       	cpc	r25, r19
    2da2:	38 f4       	brcc	.+14     	; 0x2db2 <Dec+0x182>
				miniDDS.ServoPWcurr -= miniDDS.ServoPWinc;
    2da4:	24 1b       	sub	r18, r20
    2da6:	35 0b       	sbc	r19, r21
    2da8:	30 93 92 01 	sts	0x0192, r19
    2dac:	20 93 91 01 	sts	0x0191, r18
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <Dec+0x18a>
				}
			else {
				miniDDS.ServoPWcurr = miniDDS.ServoPWmin;
    2db2:	70 93 92 01 	sts	0x0192, r23
    2db6:	60 93 91 01 	sts	0x0191, r22
				}
			ShowPW();
    2dba:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <ShowPW>
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <Dec+0x1b8>
			break;

		case FC_ServoAmp:
			if(miniDDS.ServoAMPcurr > 100) {
    2dc0:	80 91 93 01 	lds	r24, 0x0193
    2dc4:	90 91 94 01 	lds	r25, 0x0194
    2dc8:	85 36       	cpi	r24, 0x65	; 101
    2dca:	91 05       	cpc	r25, r1
    2dcc:	38 f0       	brcs	.+14     	; 0x2ddc <Dec+0x1ac>
				miniDDS.ServoAMPcurr -= 100;
    2dce:	84 56       	subi	r24, 0x64	; 100
    2dd0:	90 40       	sbci	r25, 0x00	; 0
    2dd2:	90 93 94 01 	sts	0x0194, r25
    2dd6:	80 93 93 01 	sts	0x0193, r24
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <Dec+0x1b4>
				}
			else {
				miniDDS.ServoAMPcurr = 0;
    2ddc:	10 92 94 01 	sts	0x0194, r1
    2de0:	10 92 93 01 	sts	0x0193, r1
				}
			ShowServoAmp();
    2de4:	0e 94 ca 12 	call	0x2594	; 0x2594 <ShowServoAmp>
		default:
			break;
 		}
	SaveSetting();
    2de8:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 	}

 if(SysState.CurrState == KS_ServoParam) {
    2dec:	80 91 5e 01 	lds	r24, 0x015E
    2df0:	84 30       	cpi	r24, 0x04	; 4
    2df2:	49 f4       	brne	.+18     	; 0x2e06 <Dec+0x1d6>
	if(CurrParam > 0) {
    2df4:	80 91 b7 01 	lds	r24, 0x01B7
    2df8:	88 23       	and	r24, r24
    2dfa:	19 f0       	breq	.+6      	; 0x2e02 <Dec+0x1d2>
		CurrParam--;
    2dfc:	81 50       	subi	r24, 0x01	; 1
    2dfe:	80 93 b7 01 	sts	0x01B7, r24
		}
	ShowSVParam();
    2e02:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <ShowSVParam>
 	}

 if(SysState.CurrState == KS_ModeSel) {
    2e06:	80 91 5e 01 	lds	r24, 0x015E
    2e0a:	85 30       	cpi	r24, 0x05	; 5
    2e0c:	49 f4       	brne	.+18     	; 0x2e20 <Dec+0x1f0>
	if(CurrMode > 0) {
    2e0e:	80 91 ba 01 	lds	r24, 0x01BA
    2e12:	88 23       	and	r24, r24
    2e14:	29 f0       	breq	.+10     	; 0x2e20 <Dec+0x1f0>
		CurrMode--;
    2e16:	81 50       	subi	r24, 0x01	; 1
    2e18:	80 93 ba 01 	sts	0x01BA, r24
		ShowMode();
    2e1c:	0e 94 42 0a 	call	0x1484	; 0x1484 <ShowMode>
    2e20:	08 95       	ret

00002e22 <Inc>:
 DisplayInputBuf();
}

void	Inc(void)
{
 if(SysState.CurrState == KS_CW) {
    2e22:	80 91 5e 01 	lds	r24, 0x015E
    2e26:	88 23       	and	r24, r24
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <Inc+0xa>
    2e2a:	89 c0       	rjmp	.+274    	; 0x2f3e <Inc+0x11c>
 	switch(CurrFocus) {
    2e2c:	80 91 b9 01 	lds	r24, 0x01B9
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	91 f1       	breq	.+100    	; 0x2e98 <Inc+0x76>
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	20 f0       	brcs	.+8      	; 0x2e40 <Inc+0x1e>
    2e38:	82 30       	cpi	r24, 0x02	; 2
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <Inc+0x1c>
    2e3c:	7e c0       	rjmp	.+252    	; 0x2f3a <Inc+0x118>
    2e3e:	55 c0       	rjmp	.+170    	; 0x2eea <Inc+0xc8>
		case FC_Freq:
			if(miniDDS.SetType == SetType_Freq) {
    2e40:	80 91 7e 01 	lds	r24, 0x017E
    2e44:	88 23       	and	r24, r24
    2e46:	49 f4       	brne	.+18     	; 0x2e5a <Inc+0x38>
 				miniDDS.Freq += miniDDS.FreqIncStep;
    2e48:	80 91 89 01 	lds	r24, 0x0189
    2e4c:	90 91 8a 01 	lds	r25, 0x018A
    2e50:	a0 91 8b 01 	lds	r26, 0x018B
    2e54:	b0 91 8c 01 	lds	r27, 0x018C
    2e58:	08 c0       	rjmp	.+16     	; 0x2e6a <Inc+0x48>
				}
			else {
 				miniDDS.Freq += miniDDS.CycleIncStep;
    2e5a:	80 91 8d 01 	lds	r24, 0x018D
    2e5e:	90 91 8e 01 	lds	r25, 0x018E
    2e62:	a0 91 8f 01 	lds	r26, 0x018F
    2e66:	b0 91 90 01 	lds	r27, 0x0190
    2e6a:	20 91 7a 01 	lds	r18, 0x017A
    2e6e:	30 91 7b 01 	lds	r19, 0x017B
    2e72:	40 91 7c 01 	lds	r20, 0x017C
    2e76:	50 91 7d 01 	lds	r21, 0x017D
    2e7a:	82 0f       	add	r24, r18
    2e7c:	93 1f       	adc	r25, r19
    2e7e:	a4 1f       	adc	r26, r20
    2e80:	b5 1f       	adc	r27, r21
    2e82:	80 93 7a 01 	sts	0x017A, r24
    2e86:	90 93 7b 01 	sts	0x017B, r25
    2e8a:	a0 93 7c 01 	sts	0x017C, r26
    2e8e:	b0 93 7d 01 	sts	0x017D, r27
				}
 			ShowFreqPeroid();
    2e92:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ShowFreqPeroid>
    2e96:	51 c0       	rjmp	.+162    	; 0x2f3a <Inc+0x118>
			break;

		case FC_Amp:
 			miniDDS.Amp += 100;
    2e98:	80 91 80 01 	lds	r24, 0x0180
    2e9c:	90 91 81 01 	lds	r25, 0x0181
    2ea0:	a0 91 82 01 	lds	r26, 0x0182
    2ea4:	b0 91 83 01 	lds	r27, 0x0183
    2ea8:	8c 59       	subi	r24, 0x9C	; 156
    2eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2eac:	af 4f       	sbci	r26, 0xFF	; 255
    2eae:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb0:	80 93 80 01 	sts	0x0180, r24
    2eb4:	90 93 81 01 	sts	0x0181, r25
    2eb8:	a0 93 82 01 	sts	0x0182, r26
    2ebc:	b0 93 83 01 	sts	0x0183, r27
 			if(miniDDS.Amp > AMPmax) {
    2ec0:	81 51       	subi	r24, 0x11	; 17
    2ec2:	97 42       	sbci	r25, 0x27	; 39
    2ec4:	a0 40       	sbci	r26, 0x00	; 0
    2ec6:	b0 40       	sbci	r27, 0x00	; 0
    2ec8:	60 f0       	brcs	.+24     	; 0x2ee2 <Inc+0xc0>
				miniDDS.Amp = AMPmax;
    2eca:	80 e1       	ldi	r24, 0x10	; 16
    2ecc:	97 e2       	ldi	r25, 0x27	; 39
    2ece:	a0 e0       	ldi	r26, 0x00	; 0
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	80 93 80 01 	sts	0x0180, r24
    2ed6:	90 93 81 01 	sts	0x0181, r25
    2eda:	a0 93 82 01 	sts	0x0182, r26
    2ede:	b0 93 83 01 	sts	0x0183, r27
				}
 			ShowAmp(AmpPos_CW);
    2ee2:	81 e1       	ldi	r24, 0x11	; 17
    2ee4:	0e 94 b7 11 	call	0x236e	; 0x236e <ShowAmp>
    2ee8:	28 c0       	rjmp	.+80     	; 0x2f3a <Inc+0x118>
			break;

		case FC_Ofs:
 			miniDDS.Ofs += 100;
    2eea:	80 91 84 01 	lds	r24, 0x0184
    2eee:	90 91 85 01 	lds	r25, 0x0185
    2ef2:	a0 91 86 01 	lds	r26, 0x0186
    2ef6:	b0 91 87 01 	lds	r27, 0x0187
    2efa:	8c 59       	subi	r24, 0x9C	; 156
    2efc:	9f 4f       	sbci	r25, 0xFF	; 255
    2efe:	af 4f       	sbci	r26, 0xFF	; 255
    2f00:	bf 4f       	sbci	r27, 0xFF	; 255
    2f02:	80 93 84 01 	sts	0x0184, r24
    2f06:	90 93 85 01 	sts	0x0185, r25
    2f0a:	a0 93 86 01 	sts	0x0186, r26
    2f0e:	b0 93 87 01 	sts	0x0187, r27
 			if(miniDDS.Ofs > OFSmax) {
    2f12:	81 51       	subi	r24, 0x11	; 17
    2f14:	97 42       	sbci	r25, 0x27	; 39
    2f16:	a0 40       	sbci	r26, 0x00	; 0
    2f18:	b0 40       	sbci	r27, 0x00	; 0
    2f1a:	60 f0       	brcs	.+24     	; 0x2f34 <Inc+0x112>
				miniDDS.Ofs = OFSmax;
    2f1c:	80 e1       	ldi	r24, 0x10	; 16
    2f1e:	97 e2       	ldi	r25, 0x27	; 39
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	80 93 84 01 	sts	0x0184, r24
    2f28:	90 93 85 01 	sts	0x0185, r25
    2f2c:	a0 93 86 01 	sts	0x0186, r26
    2f30:	b0 93 87 01 	sts	0x0187, r27
				}
 			ShowOfs(OfsPos_CW);
    2f34:	88 e1       	ldi	r24, 0x18	; 24
    2f36:	0e 94 87 13 	call	0x270e	; 0x270e <ShowOfs>
		default:
			break;
 		}
	SaveSetting();
    2f3a:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 	}

 if((SysState.CurrState == KS_Sweep) && (CurrFocus >= FC_SW_StartFreq) && (CurrFocus <= FC_SW_Tstep)) {
    2f3e:	80 91 5e 01 	lds	r24, 0x015E
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	81 f4       	brne	.+32     	; 0x2f66 <Inc+0x144>
    2f46:	80 91 b9 01 	lds	r24, 0x01B9
    2f4a:	86 30       	cpi	r24, 0x06	; 6
    2f4c:	60 f0       	brcs	.+24     	; 0x2f66 <Inc+0x144>
    2f4e:	8a 30       	cpi	r24, 0x0A	; 10
    2f50:	50 f4       	brcc	.+20     	; 0x2f66 <Inc+0x144>
 	CurrFocus++;
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	80 93 b9 01 	sts	0x01B9, r24
	if(CurrFocus >= FC_SW_Tstep + 1) {
    2f58:	8a 30       	cpi	r24, 0x0A	; 10
    2f5a:	19 f4       	brne	.+6      	; 0x2f62 <Inc+0x140>
		CurrFocus = FC_SW_Tstep;
    2f5c:	89 e0       	ldi	r24, 0x09	; 9
    2f5e:	80 93 b9 01 	sts	0x01B9, r24
		}
	ShowSweep();
    2f62:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
 	}

 if(SysState.CurrState == KS_ServoPos) {
    2f66:	80 91 5e 01 	lds	r24, 0x015E
    2f6a:	82 30       	cpi	r24, 0x02	; 2
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <Inc+0x14e>
    2f6e:	40 c0       	rjmp	.+128    	; 0x2ff0 <Inc+0x1ce>
 	switch(CurrFocus) {
    2f70:	80 91 b9 01 	lds	r24, 0x01B9
    2f74:	83 30       	cpi	r24, 0x03	; 3
    2f76:	19 f0       	breq	.+6      	; 0x2f7e <Inc+0x15c>
    2f78:	84 30       	cpi	r24, 0x04	; 4
    2f7a:	c1 f5       	brne	.+112    	; 0x2fec <Inc+0x1ca>
    2f7c:	1c c0       	rjmp	.+56     	; 0x2fb6 <Inc+0x194>
		case FC_ServoPW:
			miniDDS.ServoPWcurr += miniDDS.ServoPWinc;
    2f7e:	80 91 9b 01 	lds	r24, 0x019B
    2f82:	90 91 9c 01 	lds	r25, 0x019C
    2f86:	20 91 91 01 	lds	r18, 0x0191
    2f8a:	30 91 92 01 	lds	r19, 0x0192
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	90 93 92 01 	sts	0x0192, r25
    2f96:	80 93 91 01 	sts	0x0191, r24
			if(miniDDS.ServoPWcurr > miniDDS.ServoPWmax) {
    2f9a:	20 91 97 01 	lds	r18, 0x0197
    2f9e:	30 91 98 01 	lds	r19, 0x0198
    2fa2:	28 17       	cp	r18, r24
    2fa4:	39 07       	cpc	r19, r25
    2fa6:	20 f4       	brcc	.+8      	; 0x2fb0 <Inc+0x18e>
				miniDDS.ServoPWcurr = miniDDS.ServoPWmax;
    2fa8:	30 93 92 01 	sts	0x0192, r19
    2fac:	20 93 91 01 	sts	0x0191, r18
				}
			ShowPW();
    2fb0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <ShowPW>
    2fb4:	1b c0       	rjmp	.+54     	; 0x2fec <Inc+0x1ca>
			break;

		case FC_ServoAmp:
			if(miniDDS.ServoAMPcurr < miniDDS.ServoAMPmax - 100) {
    2fb6:	20 91 93 01 	lds	r18, 0x0193
    2fba:	30 91 94 01 	lds	r19, 0x0194
    2fbe:	40 91 a3 01 	lds	r20, 0x01A3
    2fc2:	50 91 a4 01 	lds	r21, 0x01A4
    2fc6:	ca 01       	movw	r24, r20
    2fc8:	84 56       	subi	r24, 0x64	; 100
    2fca:	90 40       	sbci	r25, 0x00	; 0
    2fcc:	28 17       	cp	r18, r24
    2fce:	39 07       	cpc	r19, r25
    2fd0:	38 f4       	brcc	.+14     	; 0x2fe0 <Inc+0x1be>
				miniDDS.ServoAMPcurr += 100;
    2fd2:	2c 59       	subi	r18, 0x9C	; 156
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	30 93 94 01 	sts	0x0194, r19
    2fda:	20 93 93 01 	sts	0x0193, r18
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <Inc+0x1c6>
				}
			else {
				miniDDS.ServoAMPcurr = miniDDS.ServoAMPmax;
    2fe0:	50 93 94 01 	sts	0x0194, r21
    2fe4:	40 93 93 01 	sts	0x0193, r20
				}
			ShowServoAmp();
    2fe8:	0e 94 ca 12 	call	0x2594	; 0x2594 <ShowServoAmp>
		default:
			break;
 		}
	SaveSetting();
    2fec:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 	}

 if(SysState.CurrState == KS_ServoParam) {
    2ff0:	80 91 5e 01 	lds	r24, 0x015E
    2ff4:	84 30       	cpi	r24, 0x04	; 4
    2ff6:	61 f4       	brne	.+24     	; 0x3010 <Inc+0x1ee>
	CurrParam++;
    2ff8:	80 91 b7 01 	lds	r24, 0x01B7
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	80 93 b7 01 	sts	0x01B7, r24
	if(CurrParam >= ServoParamNumber) {
    3002:	89 30       	cpi	r24, 0x09	; 9
    3004:	18 f0       	brcs	.+6      	; 0x300c <Inc+0x1ea>
		CurrParam = ServoParamNumber - 1;
    3006:	88 e0       	ldi	r24, 0x08	; 8
    3008:	80 93 b7 01 	sts	0x01B7, r24
		}
	ShowSVParam();
    300c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <ShowSVParam>
 	}
 
 if(SysState.CurrState == KS_ModeSel) {
    3010:	80 91 5e 01 	lds	r24, 0x015E
    3014:	85 30       	cpi	r24, 0x05	; 5
    3016:	61 f4       	brne	.+24     	; 0x3030 <Inc+0x20e>
	CurrMode++;
    3018:	80 91 ba 01 	lds	r24, 0x01BA
    301c:	8f 5f       	subi	r24, 0xFF	; 255
    301e:	80 93 ba 01 	sts	0x01BA, r24
	if(CurrMode >= ModeNumber) {
    3022:	84 30       	cpi	r24, 0x04	; 4
    3024:	18 f0       	brcs	.+6      	; 0x302c <Inc+0x20a>
		CurrMode = ModeNumber - 1;
    3026:	83 e0       	ldi	r24, 0x03	; 3
    3028:	80 93 ba 01 	sts	0x01BA, r24
		}
	ShowMode();
    302c:	0e 94 42 0a 	call	0x1484	; 0x1484 <ShowMode>
    3030:	08 95       	ret

00003032 <SetSweepAmp>:
}

void	SetSweepAmp(void)
{
 // Set focus if not previously at sweep param
 if((CurrFocus != FC_SW_Amp)) {
    3032:	80 91 b9 01 	lds	r24, 0x01B9
    3036:	8a 30       	cpi	r24, 0x0A	; 10
    3038:	31 f0       	breq	.+12     	; 0x3046 <SetSweepAmp+0x14>
	CurrFocus = FC_SW_Amp;
    303a:	8a e0       	ldi	r24, 0x0A	; 10
    303c:	80 93 b9 01 	sts	0x01B9, r24
	ShowSweep();
    3040:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
    3044:	08 95       	ret
	return;
 	}
// SysState.CurrState = KS_DigitInput;

 // Accept input
 NumInputSetup(SwAmp_DispStart + SwAmp_DigitOfs, SwAmp_InputBufSize, KS_Sweep, AmpInputHandle);
    3046:	86 e1       	ldi	r24, 0x16	; 22
    3048:	66 e0       	ldi	r22, 0x06	; 6
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	2e e2       	ldi	r18, 0x2E	; 46
    304e:	32 e1       	ldi	r19, 0x12	; 18
    3050:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_Sweep;
 NumInput.ExitAction = AmpInputHandle;
 
 ClearInputBuf();
*/
 DisplayInputBuf();
    3054:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    3058:	08 95       	ret

0000305a <QuickSweepParam>:
 DisplayInputBuf();
}

void	QuickSweepParam(void)
{
 if((CurrFocus - FC_SW_StartFreq + 1) != (KeyParam & 0x0F)) {
    305a:	e0 91 b9 01 	lds	r30, 0x01B9
    305e:	40 91 26 01 	lds	r20, 0x0126
    3062:	2e 2f       	mov	r18, r30
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	25 50       	subi	r18, 0x05	; 5
    3068:	30 40       	sbci	r19, 0x00	; 0
    306a:	84 2f       	mov	r24, r20
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	8f 70       	andi	r24, 0x0F	; 15
    3070:	90 70       	andi	r25, 0x00	; 0
    3072:	28 17       	cp	r18, r24
    3074:	39 07       	cpc	r19, r25
    3076:	39 f0       	breq	.+14     	; 0x3086 <QuickSweepParam+0x2c>
	CurrFocus = FC_SW_StartFreq - 1 + (KeyParam & 0x0F);
    3078:	4f 70       	andi	r20, 0x0F	; 15
    307a:	4b 5f       	subi	r20, 0xFB	; 251
    307c:	40 93 b9 01 	sts	0x01B9, r20
	ShowSweep();
    3080:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
    3084:	08 95       	ret
	return;
 	}
 
// SysState.CurrState = KS_DigitInput;
 PutStr_ROM( SwParam_DispStart, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
    3086:	87 e0       	ldi	r24, 0x07	; 7
    3088:	e8 9f       	mul	r30, r24
    308a:	90 01       	movw	r18, r0
    308c:	11 24       	eor	r1, r1
    308e:	21 53       	subi	r18, 0x31	; 49
    3090:	3c 4f       	sbci	r19, 0xFC	; 252
    3092:	80 e1       	ldi	r24, 0x10	; 16
    3094:	06 c0       	rjmp	.+12     	; 0x30a2 <QuickSweepParam+0x48>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    3096:	e8 2f       	mov	r30, r24
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	e0 50       	subi	r30, 0x00	; 0
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	90 83       	st	Z, r25
    30a0:	8f 5f       	subi	r24, 0xFF	; 255
    30a2:	f9 01       	movw	r30, r18
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    30a4:	2f 5f       	subi	r18, 0xFF	; 255
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	94 91       	lpm	r25, Z+
    30aa:	99 23       	and	r25, r25
    30ac:	a1 f7       	brne	.-24     	; 0x3096 <QuickSweepParam+0x3c>
 
// SysState.CurrState = KS_DigitInput;
 PutStr_ROM( SwParam_DispStart, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
 
 // Accept input
 NumInputSetup(SwParam_DispStart + SwParam_DigitOfs, SwParam_InputBufSize, KS_Sweep, SweepParamInputHandle);
    30ae:	87 e1       	ldi	r24, 0x17	; 23
    30b0:	69 e0       	ldi	r22, 0x09	; 9
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	2c e8       	ldi	r18, 0x8C	; 140
    30b6:	35 e1       	ldi	r19, 0x15	; 21
    30b8:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 DisplayInputBuf();
    30bc:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    30c0:	08 95       	ret

000030c2 <SetSweepParam>:
}

void	SetSweepParam(void)
{
 // Set focus if not previously at sweep param
 if((CurrFocus < FC_SW_StartFreq) || (CurrFocus > FC_SW_Tstep)) {
    30c2:	e0 91 b9 01 	lds	r30, 0x01B9
    30c6:	8e 2f       	mov	r24, r30
    30c8:	86 50       	subi	r24, 0x06	; 6
    30ca:	84 30       	cpi	r24, 0x04	; 4
    30cc:	30 f0       	brcs	.+12     	; 0x30da <SetSweepParam+0x18>
	CurrFocus = FC_SW_StartFreq;
    30ce:	86 e0       	ldi	r24, 0x06	; 6
    30d0:	80 93 b9 01 	sts	0x01B9, r24
	ShowSweep();
    30d4:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
    30d8:	08 95       	ret
	return;
 	}
 
// SysState.CurrState = KS_DigitInput;
 PutStr_ROM( SwParam_DispStart, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
    30da:	87 e0       	ldi	r24, 0x07	; 7
    30dc:	e8 9f       	mul	r30, r24
    30de:	c0 01       	movw	r24, r0
    30e0:	11 24       	eor	r1, r1
    30e2:	81 53       	subi	r24, 0x31	; 49
    30e4:	9c 4f       	sbci	r25, 0xFC	; 252
    30e6:	20 e1       	ldi	r18, 0x10	; 16
    30e8:	06 c0       	rjmp	.+12     	; 0x30f6 <SetSweepParam+0x34>
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = tmp;
    30ea:	e2 2f       	mov	r30, r18
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	e0 50       	subi	r30, 0x00	; 0
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	30 83       	st	Z, r19
    30f4:	2f 5f       	subi	r18, 0xFF	; 255
    30f6:	fc 01       	movw	r30, r24
//	
void PutStr_ROM(U8 loc, U8 *str)
{
 U8 tmp;

 while((tmp = pgm_read_byte(str++))) {
    30f8:	01 96       	adiw	r24, 0x01	; 1
    30fa:	34 91       	lpm	r19, Z+
    30fc:	33 23       	and	r19, r19
    30fe:	a9 f7       	brne	.-22     	; 0x30ea <SetSweepParam+0x28>
 
// SysState.CurrState = KS_DigitInput;
 PutStr_ROM( SwParam_DispStart, (U8*)SweepParams[CurrFocus - FC_SW_StartFreq]);
 
 // Accept input
 NumInputSetup(SwParam_DispStart + SwParam_DigitOfs, SwParam_InputBufSize, KS_Sweep, SweepParamInputHandle);
    3100:	87 e1       	ldi	r24, 0x17	; 23
    3102:	69 e0       	ldi	r22, 0x09	; 9
    3104:	41 e0       	ldi	r20, 0x01	; 1
    3106:	2c e8       	ldi	r18, 0x8C	; 140
    3108:	35 e1       	ldi	r19, 0x15	; 21
    310a:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 DisplayInputBuf();
    310e:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    3112:	08 95       	ret

00003114 <FreqKey>:

}

void	FreqKey(void)
{
 if((miniDDS.Mode == KS_CW) && (NumInput.ExitAction == FreqInputHandle)) {
    3114:	80 91 79 01 	lds	r24, 0x0179
    3118:	88 23       	and	r24, r24
    311a:	49 f4       	brne	.+18     	; 0x312e <FreqKey+0x1a>
    311c:	80 91 77 01 	lds	r24, 0x0177
    3120:	90 91 78 01 	lds	r25, 0x0178
    3124:	8e 50       	subi	r24, 0x0E	; 14
    3126:	9f 40       	sbci	r25, 0x0F	; 15
    3128:	11 f4       	brne	.+4      	; 0x312e <FreqKey+0x1a>
 	SetFreqCW();
    312a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SetFreqCW>
 	}
 if(miniDDS.Mode == KS_Sweep) {
    312e:	80 91 79 01 	lds	r24, 0x0179
    3132:	81 30       	cpi	r24, 0x01	; 1
    3134:	61 f4       	brne	.+24     	; 0x314e <FreqKey+0x3a>
 	// Scroll focus to next parameter
 	CurrFocus++;
    3136:	80 91 b9 01 	lds	r24, 0x01B9
    313a:	8f 5f       	subi	r24, 0xFF	; 255
    313c:	80 93 b9 01 	sts	0x01B9, r24
 	if(CurrFocus > FC_SW_Time) {
    3140:	89 30       	cpi	r24, 0x09	; 9
    3142:	18 f0       	brcs	.+6      	; 0x314a <FreqKey+0x36>
 		CurrFocus = FC_SW_StartFreq;
    3144:	86 e0       	ldi	r24, 0x06	; 6
    3146:	80 93 b9 01 	sts	0x01B9, r24
 		}
 	SetSweepParam();
    314a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <SetSweepParam>
    314e:	08 95       	ret

00003150 <SweepInit>:
 ShowFocus();
}

void	SweepInit(void)
{
 SysState.CurrState = KS_Sweep;
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	80 93 5e 01 	sts	0x015E, r24
 CurrMode = KS_Sweep;
    3156:	80 93 ba 01 	sts	0x01BA, r24
 CurrFocus = FC_SW_StartFreq;
    315a:	86 e0       	ldi	r24, 0x06	; 6
    315c:	80 93 b9 01 	sts	0x01B9, r24
 TrigCtrl = '>';	
    3160:	8e e3       	ldi	r24, 0x3E	; 62
    3162:	80 93 b8 01 	sts	0x01B8, r24
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
	DispBuf[startpos + tmp] = symbol;
    316a:	20 e2       	ldi	r18, 0x20	; 32
    316c:	fc 01       	movw	r30, r24
    316e:	e0 50       	subi	r30, 0x00	; 0
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	20 83       	st	Z, r18
    3174:	01 96       	adiw	r24, 0x01	; 1
void	FillDisp(U8 startpos, U8 len, U8 symbol)
{
 U8 tmp;
 
 tmp = 0;
 while(tmp < len) {
    3176:	80 32       	cpi	r24, 0x20	; 32
    3178:	91 05       	cpc	r25, r1
    317a:	c1 f7       	brne	.-16     	; 0x316c <SweepInit+0x1c>
 CurrMode = KS_Sweep;
 CurrFocus = FC_SW_StartFreq;
 TrigCtrl = '>';	

 ClearDisp();
 ShowSweep();
    317c:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
}
    3180:	08 95       	ret

00003182 <ServoRunInit>:
 ShowPW();
}

void	ServoRunInit(void)
{
 SysState.CurrState = KS_ServoRun;
    3182:	83 e0       	ldi	r24, 0x03	; 3
    3184:	80 93 5e 01 	sts	0x015E, r24
 CurrMode = KS_ServoRun;
    3188:	80 93 ba 01 	sts	0x01BA, r24
 CurrFocus = ServoState_Ready;
    318c:	10 92 b9 01 	sts	0x01B9, r1

 SetDigitalPot((U8)(((U32)miniDDS.ServoAMPcurr * 100)/ServoAmpMax)); 
    3190:	60 91 93 01 	lds	r22, 0x0193
    3194:	70 91 94 01 	lds	r23, 0x0194
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	24 e6       	ldi	r18, 0x64	; 100
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    31a8:	20 e1       	ldi	r18, 0x10	; 16
    31aa:	37 e2       	ldi	r19, 0x27	; 39
    31ac:	40 e0       	ldi	r20, 0x00	; 0
    31ae:	50 e0       	ldi	r21, 0x00	; 0
    31b0:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    31b4:	82 2f       	mov	r24, r18
    31b6:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>
 
 // Set offset to half of Servo Amp
 UpdateOfs((U32)miniDDS.ServoAMPcurr/2 + OFSmax/2);
    31ba:	60 91 93 01 	lds	r22, 0x0193
    31be:	70 91 94 01 	lds	r23, 0x0194
    31c2:	76 95       	lsr	r23
    31c4:	67 95       	ror	r22
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	68 57       	subi	r22, 0x78	; 120
    31cc:	7c 4e       	sbci	r23, 0xEC	; 236
    31ce:	8f 4f       	sbci	r24, 0xFF	; 255
    31d0:	9f 4f       	sbci	r25, 0xFF	; 255
    31d2:	0e 94 7d 05 	call	0xafa	; 0xafa <UpdateOfs>

 ShowServoRun();
    31d6:	0e 94 90 0c 	call	0x1920	; 0x1920 <ShowServoRun>
}
    31da:	08 95       	ret

000031dc <ServoPosInit>:
 ShowSweep();
}

void	ServoPosInit(void)
{
 SysState.CurrState = KS_ServoPos;
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	80 93 5e 01 	sts	0x015E, r24
 CurrMode = KS_ServoPos;
    31e2:	80 93 ba 01 	sts	0x01BA, r24
 CurrFocus = FC_ServoPW;
    31e6:	83 e0       	ldi	r24, 0x03	; 3
    31e8:	80 93 b9 01 	sts	0x01B9, r24

 SetDigitalPot((U8)(((U32)miniDDS.ServoAMPcurr * 100)/ServoAmpMax)); 
    31ec:	60 91 93 01 	lds	r22, 0x0193
    31f0:	70 91 94 01 	lds	r23, 0x0194
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	24 e6       	ldi	r18, 0x64	; 100
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    3204:	20 e1       	ldi	r18, 0x10	; 16
    3206:	37 e2       	ldi	r19, 0x27	; 39
    3208:	40 e0       	ldi	r20, 0x00	; 0
    320a:	50 e0       	ldi	r21, 0x00	; 0
    320c:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    3210:	82 2f       	mov	r24, r18
    3212:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>
 
 // Set offset to half of Servo Amp
 UpdateOfs((U32)miniDDS.ServoAMPcurr/2 + OFSmax/2);
    3216:	60 91 93 01 	lds	r22, 0x0193
    321a:	70 91 94 01 	lds	r23, 0x0194
    321e:	76 95       	lsr	r23
    3220:	67 95       	ror	r22
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	68 57       	subi	r22, 0x78	; 120
    3228:	7c 4e       	sbci	r23, 0xEC	; 236
    322a:	8f 4f       	sbci	r24, 0xFF	; 255
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	0e 94 7d 05 	call	0xafa	; 0xafa <UpdateOfs>

// ClearDisp();
// PutStr_ROM(ServoPos_DispStart, (U8 *)ServoPos);
 ShowPW();
    3232:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <ShowPW>
}
    3236:	08 95       	ret

00003238 <TYPE>:
}


void	TYPE(void)
{
 miniDDS.CurrWave++;
    3238:	80 91 88 01 	lds	r24, 0x0188
    323c:	8f 5f       	subi	r24, 0xFF	; 255
    323e:	80 93 88 01 	sts	0x0188, r24
 if(miniDDS.CurrWave >= WaveMax) {
    3242:	88 30       	cpi	r24, 0x08	; 8
    3244:	10 f0       	brcs	.+4      	; 0x324a <TYPE+0x12>
 	miniDDS.CurrWave = 0;
    3246:	10 92 88 01 	sts	0x0188, r1
 	}

 EE_Write((U16)&miniDDS_EE.CurrWave, miniDDS.CurrWave);
    324a:	82 e1       	ldi	r24, 0x12	; 18
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	60 91 88 01 	lds	r22, 0x0188
    3252:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
 
 ShowType();
    3256:	0e 94 9d 0a 	call	0x153a	; 0x153a <ShowType>

 // Update display first because load user waveform may take time
 UpdateLCD(0);
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>
// BitSet8(Flags, (1 << Flags_DispUpdate));

 if(miniDDS.CurrWave == WaveMax - 1) {
    3260:	80 91 88 01 	lds	r24, 0x0188
    3264:	87 30       	cpi	r24, 0x07	; 7
    3266:	11 f4       	brne	.+4      	; 0x326c <TYPE+0x34>
 	// Load user waveform
	LoadUserWaveform();
    3268:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <LoadUserWaveform>
	}

 if(miniDDS.Mode == KS_CW) {
    326c:	80 91 79 01 	lds	r24, 0x0179
    3270:	88 23       	and	r24, r24
    3272:	11 f4       	brne	.+4      	; 0x3278 <TYPE+0x40>
 	SendDDS();
    3274:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <SendDDS>
 	}
 if(miniDDS.Mode == KS_Sweep) {
    3278:	80 91 79 01 	lds	r24, 0x0179
    327c:	81 30       	cpi	r24, 0x01	; 1
    327e:	11 f4       	brne	.+4      	; 0x3284 <TYPE+0x4c>
 	SendSweep();
    3280:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <SendSweep>
    3284:	08 95       	ret

00003286 <CAN>:
void	CAN(void)
{
 U8	tmp;
 
 // Backspace if digit entered
 if(NumInput.DigitCnt > 0) {
    3286:	80 91 6e 01 	lds	r24, 0x016E
    328a:	88 23       	and	r24, r24
    328c:	c9 f0       	breq	.+50     	; 0x32c0 <CAN+0x3a>
 	NumInput.DigitCnt--;
    328e:	81 50       	subi	r24, 0x01	; 1
    3290:	80 93 6e 01 	sts	0x016E, r24
 	// Shift right1 digit
 	tmp = NumInput.DispLen - 1;
    3294:	90 91 6d 01 	lds	r25, 0x016D
    3298:	08 c0       	rjmp	.+16     	; 0x32aa <CAN+0x24>
 	while(tmp) {
 		*(NumInput.InBuf + tmp + 1) = *(NumInput.InBuf + tmp);
    329a:	e0 91 6a 01 	lds	r30, 0x016A
    329e:	f0 91 6b 01 	lds	r31, 0x016B
    32a2:	e9 0f       	add	r30, r25
    32a4:	f1 1d       	adc	r31, r1
    32a6:	80 81       	ld	r24, Z
    32a8:	81 83       	std	Z+1, r24	; 0x01
		tmp--;
    32aa:	91 50       	subi	r25, 0x01	; 1
 // Backspace if digit entered
 if(NumInput.DigitCnt > 0) {
 	NumInput.DigitCnt--;
 	// Shift right1 digit
 	tmp = NumInput.DispLen - 1;
 	while(tmp) {
    32ac:	b1 f7       	brne	.-20     	; 0x329a <CAN+0x14>
 		*(NumInput.InBuf + tmp + 1) = *(NumInput.InBuf + tmp);
		tmp--;
 		}

 	// Make first digit blank
 	*(NumInput.InBuf) = Char_Blank;
    32ae:	e0 91 6a 01 	lds	r30, 0x016A
    32b2:	f0 91 6b 01 	lds	r31, 0x016B
    32b6:	8f e5       	ldi	r24, 0x5F	; 95
    32b8:	80 83       	st	Z, r24
	DisplayInputBuf();
    32ba:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    32be:	08 95       	ret
	return;
 	}

 PutStr_ROM_coded();
    32c0:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>
 
 NumInput.EndKey = KC_ESC;
    32c4:	8d e0       	ldi	r24, 0x0D	; 13
    32c6:	80 93 75 01 	sts	0x0175, r24

 SysState.CurrState = NumInput.ExitTo;
    32ca:	80 91 76 01 	lds	r24, 0x0176
    32ce:	80 93 5e 01 	sts	0x015E, r24

 // Execute handling function
 (*(void (*)(void))(NumInput.ExitAction))();
    32d2:	e0 91 77 01 	lds	r30, 0x0177
    32d6:	f0 91 78 01 	lds	r31, 0x0178
    32da:	09 95       	icall
    32dc:	08 95       	ret

000032de <StartStop>:
 ClearInputBuf();
}

void	StartStop(void)
{
 if(CurrFocus == 0x01) {
    32de:	80 91 b9 01 	lds	r24, 0x01B9
    32e2:	81 30       	cpi	r24, 0x01	; 1
    32e4:	11 f4       	brne	.+4      	; 0x32ea <StartStop+0xc>
 	// Already in running state. Change to hold state`
 	CurrFocus = 0x02;
    32e6:	82 e0       	ldi	r24, 0x02	; 2
    32e8:	01 c0       	rjmp	.+2      	; 0x32ec <StartStop+0xe>
 	}
 else {
 	// Set to running state
 	CurrFocus = 0x01;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	80 93 b9 01 	sts	0x01B9, r24
 	}
// CurrFocus ^= 0x01;

 PutStr_ROM_coded();
    32f0:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>

 ShowServoRun();
    32f4:	0e 94 90 0c 	call	0x1920	; 0x1920 <ShowServoRun>
}
    32f8:	08 95       	ret

000032fa <SetSVAmp>:
}

void	SetSVAmp(void)
{
 // Set focus 
 if(CurrFocus != FC_ServoAmp) {
    32fa:	80 91 b9 01 	lds	r24, 0x01B9
    32fe:	84 30       	cpi	r24, 0x04	; 4
    3300:	31 f0       	breq	.+12     	; 0x330e <SetSVAmp+0x14>
 	CurrFocus = FC_ServoAmp;
    3302:	84 e0       	ldi	r24, 0x04	; 4
    3304:	80 93 b9 01 	sts	0x01B9, r24
	ShowServoAmp();
    3308:	0e 94 ca 12 	call	0x2594	; 0x2594 <ShowServoAmp>
    330c:	08 95       	ret
//	SysState.CurrState = SysState.PrevState;
	return;
 	}

 // Accept input
 NumInputSetup(ServoPosAmp_DispStart + ServoPosAmp_DigitOfs,  ServoPosAmp_InputBufSize, KS_ServoPos, ServoAmpInputHandle);
    330e:	85 e1       	ldi	r24, 0x15	; 21
    3310:	65 e0       	ldi	r22, 0x05	; 5
    3312:	42 e0       	ldi	r20, 0x02	; 2
    3314:	2d e6       	ldi	r18, 0x6D	; 109
    3316:	33 e1       	ldi	r19, 0x13	; 19
    3318:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_ServoPos;
 NumInput.ExitAction = ServoAmpInputHandle;
 
 ClearInputBuf();
*/
 PutStr_ROM_coded();
    331c:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>

 DisplayInputBuf();
    3320:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    3324:	08 95       	ret

00003326 <SetSweepOfs>:
}

void	SetSweepOfs(void)
{
 // Set focus if not previously at sweep param
 if((CurrFocus != FC_SW_Ofs)) {
    3326:	80 91 b9 01 	lds	r24, 0x01B9
    332a:	8b 30       	cpi	r24, 0x0B	; 11
    332c:	31 f0       	breq	.+12     	; 0x333a <SetSweepOfs+0x14>
	CurrFocus = FC_SW_Ofs;
    332e:	8b e0       	ldi	r24, 0x0B	; 11
    3330:	80 93 b9 01 	sts	0x01B9, r24
	ShowSweep();
    3334:	0e 94 ba 14 	call	0x2974	; 0x2974 <ShowSweep>
    3338:	08 95       	ret
	return;
 	}
// SysState.CurrState = KS_DigitInput;

 // Accept input
 NumInputSetup(SwOfs_DispStart + SwOfs_DigitOfs, SwOfs_InputBufSize, KS_Sweep, OfsInputHandle);
    333a:	86 e1       	ldi	r24, 0x16	; 22
    333c:	66 e0       	ldi	r22, 0x06	; 6
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	2c e3       	ldi	r18, 0x3C	; 60
    3342:	34 e1       	ldi	r19, 0x14	; 20
    3344:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_Sweep;
 NumInput.ExitAction = OfsInputHandle;
 
 ClearInputBuf();
*/
 PutStr_ROM_coded();
    3348:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>

 DisplayInputBuf();
    334c:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
    3350:	08 95       	ret

00003352 <SelectMode>:
 ShowMode();
}

void	SelectMode(void)
{
 miniDDS.Mode = CurrMode;
    3352:	80 91 ba 01 	lds	r24, 0x01BA
    3356:	80 93 79 01 	sts	0x0179, r24
 SaveSetting();
    335a:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>

 PutStr_ROM_coded();
    335e:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>
 
 // Execute initialization based on Mode
 (*(void (*)(void))(pgm_read_word(&InitFuncTab[miniDDS.Mode])))();
    3362:	80 91 79 01 	lds	r24, 0x0179
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	8f 5a       	subi	r24, 0xAF	; 175
    336e:	9c 4f       	sbci	r25, 0xFC	; 252
    3370:	fc 01       	movw	r30, r24
    3372:	25 91       	lpm	r18, Z+
    3374:	34 91       	lpm	r19, Z+
    3376:	f9 01       	movw	r30, r18
    3378:	09 95       	icall

}
    337a:	08 95       	ret

0000337c <SetSVParam>:
}

void	SetSVParam(void)
{
 // Accept input
 NumInputSetup(ServoParam_DispStart + ServoParam_DigitOfs,  ServoParam_InputBufSize, KS_ServoParam, ServoParamInputHandle);
    337c:	81 e1       	ldi	r24, 0x11	; 17
    337e:	65 e0       	ldi	r22, 0x05	; 5
    3380:	44 e0       	ldi	r20, 0x04	; 4
    3382:	23 ec       	ldi	r18, 0xC3	; 195
    3384:	30 e1       	ldi	r19, 0x10	; 16
    3386:	0e 94 a5 08 	call	0x114a	; 0x114a <NumInputSetup>
 NumInput.ExitTo = KS_ServoParam;
 NumInput.ExitAction = ServoParamInputHandle;
 
 ClearInputBuf();
*/
 PutStr_ROM_coded();
    338a:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>

 DisplayInputBuf();
    338e:	0e 94 a8 09 	call	0x1350	; 0x1350 <DisplayInputBuf>
}
    3392:	08 95       	ret

00003394 <ChangeSVParam>:
 ShowServoRun();
}

void	ChangeSVParam(void)
{
 PutStr_ROM_coded();
    3394:	0e 94 0e 1a 	call	0x341c	; 0x341c <PutStr_ROM_coded>

 CurrParam = 0;
    3398:	10 92 b7 01 	sts	0x01B7, r1
 ShowSVParam();
    339c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <ShowSVParam>
}
    33a0:	08 95       	ret

000033a2 <SVParamDefault>:

void	SVParamDefault(void)
{
 U8 tmp, tmp1;

 if(CurrParam != ServoParamNumber - 1) {
    33a2:	80 91 b7 01 	lds	r24, 0x01B7
    33a6:	88 30       	cpi	r24, 0x08	; 8
    33a8:	a1 f4       	brne	.+40     	; 0x33d2 <SVParamDefault+0x30>
 	return;
 	}
 
 // Servo parameter size
 tmp1 = (U16)&miniDDS.ServoAMPmax - (U16)&miniDDS.ServoPWcurr + 2;
 u0putc(tmp1);
    33aa:	84 e1       	ldi	r24, 0x14	; 20
    33ac:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <u0putc>
    33b0:	27 eb       	ldi	r18, 0xB7	; 183
    33b2:	35 e0       	ldi	r19, 0x05	; 5
    33b4:	a1 e9       	ldi	r26, 0x91	; 145
    33b6:	b1 e0       	ldi	r27, 0x01	; 1
 
 // Load setting from Flash
 tmp = 0;
 while(tmp < tmp1) {
		*((U8*)&miniDDS.ServoPWcurr + tmp) 
			= pgm_read_byte((U8 *)&miniDDS_ROM.ServoPWcurr + tmp);
    33b8:	f9 01       	movw	r30, r18
    33ba:	84 91       	lpm	r24, Z+
 u0putc(tmp1);
 
 // Load setting from Flash
 tmp = 0;
 while(tmp < tmp1) {
		*((U8*)&miniDDS.ServoPWcurr + tmp) 
    33bc:	8d 93       	st	X+, r24
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
 tmp1 = (U16)&miniDDS.ServoAMPmax - (U16)&miniDDS.ServoPWcurr + 2;
 u0putc(tmp1);
 
 // Load setting from Flash
 tmp = 0;
 while(tmp < tmp1) {
    33c2:	f1 e0       	ldi	r31, 0x01	; 1
    33c4:	a5 3a       	cpi	r26, 0xA5	; 165
    33c6:	bf 07       	cpc	r27, r31
    33c8:	b9 f7       	brne	.-18     	; 0x33b8 <SVParamDefault+0x16>
			= pgm_read_byte((U8 *)&miniDDS_ROM.ServoPWcurr + tmp);
		tmp++;
		}

 // Setup EEPROM
 SaveSetting();
    33ca:	0e 94 80 0b 	call	0x1700	; 0x1700 <SaveSetting>
 ServoPosInit();
    33ce:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ServoPosInit>
    33d2:	08 95       	ret

000033d4 <DiagKeyCheck>:
 BitSet8(Flags, (1 << Flags_DispUpdate));
}

void	DiagKeyCheck(void)
{
 if(KeyCode < KC_CW) {
    33d4:	e0 91 29 01 	lds	r30, 0x0129
    33d8:	e6 31       	cpi	r30, 0x16	; 22
    33da:	38 f4       	brcc	.+14     	; 0x33ea <DiagKeyCheck+0x16>
 	DispBuf[KeyCode - 1] = KeyParam;
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 91 26 01 	lds	r24, 0x0126
    33e2:	e1 50       	subi	r30, 0x01	; 1
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 83       	st	Z, r24
    33e8:	13 c0       	rjmp	.+38     	; 0x3410 <DiagKeyCheck+0x3c>
 	}
 else if(KeyCode == KC_CW) {
    33ea:	e6 31       	cpi	r30, 0x16	; 22
    33ec:	39 f4       	brne	.+14     	; 0x33fc <DiagKeyCheck+0x28>
	DispBuf[22] = 'C';
    33ee:	83 e4       	ldi	r24, 0x43	; 67
    33f0:	80 93 16 01 	sts	0x0116, r24
	DispBuf[23] = 'W';
    33f4:	87 e5       	ldi	r24, 0x57	; 87
    33f6:	80 93 17 01 	sts	0x0117, r24
    33fa:	0a c0       	rjmp	.+20     	; 0x3410 <DiagKeyCheck+0x3c>
 	}
 else if(KeyCode == KC_CCW) {
    33fc:	e7 31       	cpi	r30, 0x17	; 23
    33fe:	41 f4       	brne	.+16     	; 0x3410 <DiagKeyCheck+0x3c>
	DispBuf[25] = 'C';
    3400:	83 e4       	ldi	r24, 0x43	; 67
    3402:	80 93 19 01 	sts	0x0119, r24
	DispBuf[26] = 'C';
    3406:	80 93 1a 01 	sts	0x011A, r24
	DispBuf[27] = 'W';
    340a:	87 e5       	ldi	r24, 0x57	; 87
    340c:	80 93 1b 01 	sts	0x011B, r24
 	}
 
 BitSet8(Flags, (1 << Flags_DispUpdate));
    3410:	80 91 4d 01 	lds	r24, 0x014D
    3414:	80 68       	ori	r24, 0x80	; 128
    3416:	80 93 4d 01 	sts	0x014D, r24
}
    341a:	08 95       	ret

0000341c <PutStr_ROM_coded>:
	0x00

	};

void PutStr_ROM_coded(void)
{
    341c:	1f 93       	push	r17
 U8 tmp;
 U8 *ptmp1, *ptmp2;
 CmdFuncPointer fptmp;

 if(DispBuf[34] == 0) {
    341e:	80 91 22 01 	lds	r24, 0x0122
    3422:	88 23       	and	r24, r24
    3424:	09 f4       	brne	.+2      	; 0x3428 <PutStr_ROM_coded+0xc>
    3426:	5f c0       	rjmp	.+190    	; 0x34e6 <PutStr_ROM_coded+0xca>
 	return;
 	}

 tmp = EE_Read(EE_counter);
    3428:	8f e7       	ldi	r24, 0x7F	; 127
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 8c 05 	call	0xb18	; 0xb18 <EE_Read>
 tmp--;
    3430:	18 2f       	mov	r17, r24
    3432:	11 50       	subi	r17, 0x01	; 1
 EE_Write(EE_counter, tmp);
    3434:	8f e7       	ldi	r24, 0x7F	; 127
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	61 2f       	mov	r22, r17
    343a:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
 if(tmp != 0) {
    343e:	11 23       	and	r17, r17
    3440:	09 f0       	breq	.+2      	; 0x3444 <PutStr_ROM_coded+0x28>
    3442:	51 c0       	rjmp	.+162    	; 0x34e6 <PutStr_ROM_coded+0xca>
 	return;
 	}
 
 tmp &= 0x0F;
 EE_Write(EE_counter, tmp);
    3444:	8f e7       	ldi	r24, 0x7F	; 127
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
    344e:	a8 e1       	ldi	r26, 0x18	; 24
    3450:	b4 e0       	ldi	r27, 0x04	; 4
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0

 ptmp1 = (U8 *)DispBuf;
 ptmp2 = (U8 *)Txbuf;
 tmp = 0;
 while(tmp < 32) {
 	*ptmp2++ = *ptmp1++;
    3456:	f9 01       	movw	r30, r18
    3458:	e0 50       	subi	r30, 0x00	; 0
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	80 81       	ld	r24, Z
    345e:	8d 93       	st	X+, r24
    3460:	2f 5f       	subi	r18, 0xFF	; 255
    3462:	3f 4f       	sbci	r19, 0xFF	; 255
 EE_Write(EE_counter, tmp);

 ptmp1 = (U8 *)DispBuf;
 ptmp2 = (U8 *)Txbuf;
 tmp = 0;
 while(tmp < 32) {
    3464:	84 e0       	ldi	r24, 0x04	; 4
    3466:	a8 33       	cpi	r26, 0x38	; 56
    3468:	b8 07       	cpc	r27, r24
    346a:	a9 f7       	brne	.-22     	; 0x3456 <PutStr_ROM_coded+0x3a>
 	*ptmp2++ = *ptmp1++;
	tmp++;
 	}
 ptmp1 = (U8 *)DispBuf;
 FillDisp(0, 32, ' ');
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	60 e2       	ldi	r22, 0x20	; 32
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <FillDisp>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	05 c0       	rjmp	.+10     	; 0x3486 <PutStr_ROM_coded+0x6a>
 ptmp2 = (U8 *)MfgID_coded;
 
 while((tmp = pgm_read_byte((U8 *)ptmp2++))) {
 	*ptmp1++ = ~tmp;
    347c:	fc 01       	movw	r30, r24
    347e:	e1 50       	subi	r30, 0x01	; 1
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	20 95       	com	r18
    3484:	20 83       	st	Z, r18
    3486:	ac 01       	movw	r20, r24
    3488:	40 50       	subi	r20, 0x00	; 0
    348a:	5f 4f       	sbci	r21, 0xFF	; 255
 	}
 ptmp1 = (U8 *)DispBuf;
 FillDisp(0, 32, ' ');
 ptmp2 = (U8 *)MfgID_coded;
 
 while((tmp = pgm_read_byte((U8 *)ptmp2++))) {
    348c:	fc 01       	movw	r30, r24
    348e:	e7 51       	subi	r30, 0x17	; 23
    3490:	f9 4f       	sbci	r31, 0xF9	; 249
    3492:	24 91       	lpm	r18, Z+
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	22 23       	and	r18, r18
    3498:	89 f7       	brne	.-30     	; 0x347c <PutStr_ROM_coded+0x60>
    349a:	da 01       	movw	r26, r20
    349c:	82 ef       	ldi	r24, 0xF2	; 242
    349e:	96 e0       	ldi	r25, 0x06	; 6
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <PutStr_ROM_coded+0x8e>

 ptmp1 += 8;
 ptmp2 = (U8 *)Web_coded;
 
 while((tmp = pgm_read_byte((U8 *)ptmp2++))) {
 	*ptmp1++ = ~tmp;
    34a2:	20 95       	com	r18
    34a4:	17 96       	adiw	r26, 0x07	; 7
    34a6:	2c 93       	st	X, r18
    34a8:	17 97       	sbiw	r26, 0x07	; 7
    34aa:	fc 01       	movw	r30, r24
 	}

 ptmp1 += 8;
 ptmp2 = (U8 *)Web_coded;
 
 while((tmp = pgm_read_byte((U8 *)ptmp2++))) {
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	24 91       	lpm	r18, Z+
    34b0:	11 96       	adiw	r26, 0x01	; 1
    34b2:	22 23       	and	r18, r18
    34b4:	b1 f7       	brne	.-20     	; 0x34a2 <PutStr_ROM_coded+0x86>
 	*ptmp1++ = ~tmp;
 	}

 fptmp = (U8 *)UpdateLCD;
 (*fptmp)();
    34b6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>
    34ba:	12 e3       	ldi	r17, 0x32	; 50
// UpdateLCD();

 tmp = 50;
 while(tmp) {
 	Delay(60000);
    34bc:	80 e6       	ldi	r24, 0x60	; 96
    34be:	9a ee       	ldi	r25, 0xEA	; 234
    34c0:	0e 94 0f 08 	call	0x101e	; 0x101e <Delay>
	tmp--;
    34c4:	11 50       	subi	r17, 0x01	; 1
 fptmp = (U8 *)UpdateLCD;
 (*fptmp)();
// UpdateLCD();

 tmp = 50;
 while(tmp) {
    34c6:	d1 f7       	brne	.-12     	; 0x34bc <PutStr_ROM_coded+0xa0>
    34c8:	a8 e1       	ldi	r26, 0x18	; 24
    34ca:	b4 e0       	ldi	r27, 0x04	; 4
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
 
 ptmp1 = (U8 *)DispBuf;
 ptmp2 = (U8 *)Txbuf;
 tmp = 0;
 while(tmp < 32) {
 	*ptmp1++ = *ptmp2++;
    34d0:	f9 01       	movw	r30, r18
    34d2:	e0 50       	subi	r30, 0x00	; 0
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	8d 91       	ld	r24, X+
    34d8:	80 83       	st	Z, r24
    34da:	2f 5f       	subi	r18, 0xFF	; 255
    34dc:	3f 4f       	sbci	r19, 0xFF	; 255
 	}
 
 ptmp1 = (U8 *)DispBuf;
 ptmp2 = (U8 *)Txbuf;
 tmp = 0;
 while(tmp < 32) {
    34de:	84 e0       	ldi	r24, 0x04	; 4
    34e0:	a8 33       	cpi	r26, 0x38	; 56
    34e2:	b8 07       	cpc	r27, r24
    34e4:	a9 f7       	brne	.-22     	; 0x34d0 <PutStr_ROM_coded+0xb4>
 	*ptmp1++ = *ptmp2++;
	tmp++;
 	}
}
    34e6:	1f 91       	pop	r17
    34e8:	08 95       	ret

000034ea <DiagEEPROM>:

void	DiagEEPROM(void)
{
 U8 tmp;
 
 ClearDisp();
    34ea:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <ClearDisp>
 PutStr_ROM(0, (U8 *)EepromCheck);
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	62 e0       	ldi	r22, 0x02	; 2
    34f2:	76 e0       	ldi	r23, 0x06	; 6
    34f4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 UpdateLCD('t');
    34f8:	84 e7       	ldi	r24, 0x74	; 116
    34fa:	0e 94 fe 06 	call	0xdfc	; 0xdfc <UpdateLCD>

// return;
 
 // Send EEPROM test command
 Strbuf[0] = KS_DiagEEPROM;
    34fe:	89 e0       	ldi	r24, 0x09	; 9
    3500:	80 93 33 01 	sts	0x0133, r24
 Strbuf[8] = 0;
 Strbuf[9] = 0;
 Strbuf[10] = 0;
 Strbuf[11] = 0;
*/
 SendBuf((U8*)Strbuf);
    3504:	83 e3       	ldi	r24, 0x33	; 51
    3506:	91 e0       	ldi	r25, 0x01	; 1
    3508:	0e 94 ad 06 	call	0xd5a	; 0xd5a <SendBuf>

 
 // Receive result
 tmp = 0; 
 GTimer = 40000;
    350c:	80 e4       	ldi	r24, 0x40	; 64
    350e:	9c e9       	ldi	r25, 0x9C	; 156
    3510:	90 93 31 01 	sts	0x0131, r25
    3514:	80 93 30 01 	sts	0x0130, r24
    3518:	07 c0       	rjmp	.+14     	; 0x3528 <DiagEEPROM+0x3e>
 while(GTimer) {
	if(!BitTest8(COMM_RXD_Port, (1 << COMM_RXD_Bit))) {
    351a:	4a 99       	sbic	0x09, 2	; 9
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <DiagEEPROM+0x3e>
		// Detected low at RXD Pin
		tmp = RecvByte();
    351e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <RecvByte>
//		u0putc(tmp);
		if(tmp != '=') {
    3522:	8d 33       	cpi	r24, 0x3D	; 61
    3524:	39 f4       	brne	.+14     	; 0x3534 <DiagEEPROM+0x4a>
    3526:	11 c0       	rjmp	.+34     	; 0x354a <DiagEEPROM+0x60>

 
 // Receive result
 tmp = 0; 
 GTimer = 40000;
 while(GTimer) {
    3528:	80 91 30 01 	lds	r24, 0x0130
    352c:	90 91 31 01 	lds	r25, 0x0131
    3530:	89 2b       	or	r24, r25
    3532:	99 f7       	brne	.-26     	; 0x351a <DiagEEPROM+0x30>
 if(tmp) {
 	// Test Good
 	PutStr_ROM(16, (U8 *)Good);
 	}
 else {
 	PutStr_ROM(16, (U8 *)Failed);
    3534:	80 e1       	ldi	r24, 0x10	; 16
    3536:	67 e1       	ldi	r22, 0x17	; 23
    3538:	76 e0       	ldi	r23, 0x06	; 6
    353a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 	}
 BitSet8(Flags, (1 << Flags_DispUpdate));
    353e:	80 91 4d 01 	lds	r24, 0x014D
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	80 93 4d 01 	sts	0x014D, r24
}
    3548:	08 95       	ret
 	}
 
 // Display result
 if(tmp) {
 	// Test Good
 	PutStr_ROM(16, (U8 *)Good);
    354a:	80 e1       	ldi	r24, 0x10	; 16
    354c:	62 e1       	ldi	r22, 0x12	; 18
    354e:	76 e0       	ldi	r23, 0x06	; 6
    3550:	f4 cf       	rjmp	.-24     	; 0x353a <DiagEEPROM+0x50>

00003552 <OutputTestSignal>:
 
 BitSet8(Flags, (1 << Flags_DispUpdate));
}

void	OutputTestSignal(void)
{
    3552:	1f 93       	push	r17
 U32	tmp;

 // Ensure trig control is turned off
 TrigCtrl = '>';
    3554:	8e e3       	ldi	r24, 0x3E	; 62
    3556:	80 93 b8 01 	sts	0x01B8, r24
 
 // Set frequency
 miniDDS.Freq = pgm_read_dword((U32 *)(TestSignalParam + CurrFocus*3));
    355a:	80 91 b9 01 	lds	r24, 0x01B9
    355e:	1c e0       	ldi	r17, 0x0C	; 12
    3560:	81 9f       	mul	r24, r17
    3562:	f0 01       	movw	r30, r0
    3564:	11 24       	eor	r1, r1
    3566:	eb 56       	subi	r30, 0x6B	; 107
    3568:	f9 4f       	sbci	r31, 0xF9	; 249
    356a:	85 91       	lpm	r24, Z+
    356c:	95 91       	lpm	r25, Z+
    356e:	a5 91       	lpm	r26, Z+
    3570:	b4 91       	lpm	r27, Z+
    3572:	80 93 7a 01 	sts	0x017A, r24
    3576:	90 93 7b 01 	sts	0x017B, r25
    357a:	a0 93 7c 01 	sts	0x017C, r26
    357e:	b0 93 7d 01 	sts	0x017D, r27
 miniDDS.SetType = SetType_Freq;
    3582:	10 92 7e 01 	sts	0x017E, r1
 SendDDS();
    3586:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <SendDDS>

 // Set amplitude
 tmp = pgm_read_dword((U32 *)(TestSignalParam + CurrFocus*3 + 1));
    358a:	90 91 b9 01 	lds	r25, 0x01B9
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	98 9f       	mul	r25, r24
    3592:	f0 01       	movw	r30, r0
    3594:	11 24       	eor	r1, r1
    3596:	ee 0f       	add	r30, r30
    3598:	ff 1f       	adc	r31, r31
    359a:	ee 0f       	add	r30, r30
    359c:	ff 1f       	adc	r31, r31
    359e:	e7 56       	subi	r30, 0x67	; 103
    35a0:	f9 4f       	sbci	r31, 0xF9	; 249
    35a2:	65 91       	lpm	r22, Z+
    35a4:	75 91       	lpm	r23, Z+
    35a6:	85 91       	lpm	r24, Z+
    35a8:	94 91       	lpm	r25, Z+
 SetDigitalPot((U8)((tmp * 100)/AMPmax)); 
    35aa:	24 e6       	ldi	r18, 0x64	; 100
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__mulsi3>
    35b6:	20 e1       	ldi	r18, 0x10	; 16
    35b8:	37 e2       	ldi	r19, 0x27	; 39
    35ba:	40 e0       	ldi	r20, 0x00	; 0
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <__udivmodsi4>
    35c2:	82 2f       	mov	r24, r18
    35c4:	0e 94 77 06 	call	0xcee	; 0xcee <SetDigitalPot>

 // Set offset
 tmp = pgm_read_dword((U32 *)(TestSignalParam + CurrFocus*3) + 2);
    35c8:	80 91 b9 01 	lds	r24, 0x01B9
    35cc:	81 9f       	mul	r24, r17
    35ce:	f0 01       	movw	r30, r0
    35d0:	11 24       	eor	r1, r1
    35d2:	e3 56       	subi	r30, 0x63	; 99
    35d4:	f9 4f       	sbci	r31, 0xF9	; 249
    35d6:	65 91       	lpm	r22, Z+
    35d8:	75 91       	lpm	r23, Z+
    35da:	85 91       	lpm	r24, Z+
    35dc:	94 91       	lpm	r25, Z+
 UpdateOfs(tmp);
    35de:	0e 94 7d 05 	call	0xafa	; 0xafa <UpdateOfs>

 ClearDisp();
    35e2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <ClearDisp>
 DispBuf[0] = CurrFocus | 0x30;
    35e6:	80 91 b9 01 	lds	r24, 0x01B9
    35ea:	80 63       	ori	r24, 0x30	; 48
    35ec:	80 93 00 01 	sts	0x0100, r24
 if(CurrMode == 0) {
    35f0:	80 91 ba 01 	lds	r24, 0x01BA
    35f4:	88 23       	and	r24, r24
    35f6:	29 f4       	brne	.+10     	; 0x3602 <OutputTestSignal+0xb0>
	// Show "AUTO"
	PutStr_ROM(12, (U8 *)DummyString3);
    35f8:	8c e0       	ldi	r24, 0x0C	; 12
    35fa:	6d ef       	ldi	r22, 0xFD	; 253
    35fc:	75 e0       	ldi	r23, 0x05	; 5
    35fe:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 	}
 PutStr_ROM(16, (U8 *)TestSignal[CurrFocus]);
    3602:	60 91 b9 01 	lds	r22, 0x01B9
    3606:	81 e1       	ldi	r24, 0x11	; 17
    3608:	68 9f       	mul	r22, r24
    360a:	b0 01       	movw	r22, r0
    360c:	11 24       	eor	r1, r1
    360e:	62 5e       	subi	r22, 0xE2	; 226
    3610:	79 4f       	sbci	r23, 0xF9	; 249
    3612:	80 e1       	ldi	r24, 0x10	; 16
    3614:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 BitSet8(Flags, (1 << Flags_DispUpdate));
    3618:	80 91 4d 01 	lds	r24, 0x014D
    361c:	80 68       	ori	r24, 0x80	; 128
    361e:	80 93 4d 01 	sts	0x014D, r24
 
}
    3622:	1f 91       	pop	r17
    3624:	08 95       	ret

00003626 <DiagDDS>:
 BitSet8(Flags, (1 << Flags_DispUpdate));
}

void	DiagDDS(void)
{
 if((KeyParam == 'E') || (KeyParam == '0')) {
    3626:	90 91 26 01 	lds	r25, 0x0126
    362a:	95 34       	cpi	r25, 0x45	; 69
    362c:	11 f0       	breq	.+4      	; 0x3632 <DiagDDS+0xc>
    362e:	90 33       	cpi	r25, 0x30	; 48
    3630:	31 f4       	brne	.+12     	; 0x363e <DiagDDS+0x18>
 	// Entered from previous state
 	CurrMode = 1;
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	80 93 ba 01 	sts	0x01BA, r24
	CurrFocus = 0;
    3638:	10 92 b9 01 	sts	0x01B9, r1
    363c:	13 c0       	rjmp	.+38     	; 0x3664 <DiagDDS+0x3e>
 	}
 else {
 	// Key selection
 	if(KeyParam == '9') {
    363e:	99 33       	cpi	r25, 0x39	; 57
    3640:	59 f4       	brne	.+22     	; 0x3658 <DiagDDS+0x32>
		// Auto mode
 		CurrMode = 0;
    3642:	10 92 ba 01 	sts	0x01BA, r1
		CurrFocus = 0;
    3646:	10 92 b9 01 	sts	0x01B9, r1
		GTimer = TestSignalDuration;
    364a:	80 e5       	ldi	r24, 0x50	; 80
    364c:	93 ec       	ldi	r25, 0xC3	; 195
    364e:	90 93 31 01 	sts	0x0131, r25
    3652:	80 93 30 01 	sts	0x0130, r24
    3656:	06 c0       	rjmp	.+12     	; 0x3664 <DiagDDS+0x3e>
 		}
	else {
 		// Output specific test signal 
 		CurrMode = 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	80 93 ba 01 	sts	0x01BA, r24
		CurrFocus = KeyParam & 0x0F;
    365e:	9f 70       	andi	r25, 0x0F	; 15
    3660:	90 93 b9 01 	sts	0x01B9, r25
		}
 	}
 OutputTestSignal();
    3664:	0e 94 a9 1a 	call	0x3552	; 0x3552 <OutputTestSignal>
}
    3668:	08 95       	ret

0000366a <DiagKeypad>:
}

void	DiagKeypad(void)
{
 // Clear display buffer
 ClrDispBuf();
    366a:	0e 94 71 05 	call	0xae2	; 0xae2 <ClrDispBuf>
 BitSet8(Flags, (1 << Flags_DispUpdate));
    366e:	80 91 4d 01 	lds	r24, 0x014D
    3672:	80 68       	ori	r24, 0x80	; 128
    3674:	80 93 4d 01 	sts	0x014D, r24
}
    3678:	08 95       	ret

0000367a <DiagDisplay>:
// ==========================================================
//
void	DiagDisplay(void)
{
 // Clear display buffer
 ClrDispBuf();
    367a:	0e 94 71 05 	call	0xae2	; 0xae2 <ClrDispBuf>

 // Show given contents
 PutStr_ROM(0, DummyString1);
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	6d ed       	ldi	r22, 0xDD	; 221
    3682:	75 e0       	ldi	r23, 0x05	; 5
    3684:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 PutStr_ROM(16, DummyString2);
    3688:	80 e1       	ldi	r24, 0x10	; 16
    368a:	6d ee       	ldi	r22, 0xED	; 237
    368c:	75 e0       	ldi	r23, 0x05	; 5
    368e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <PutStr_ROM>
 BitSet8(Flags, (1 << Flags_DispUpdate));
    3692:	80 91 4d 01 	lds	r24, 0x014D
    3696:	80 68       	ori	r24, 0x80	; 128
    3698:	80 93 4d 01 	sts	0x014D, r24
}
    369c:	08 95       	ret

0000369e <u0RxBufInit>:
// ========================================================
// Setup Uart 0 Rx buffer
//
void	u0RxBufInit(void)
{
 u0RxQueueHead = Uart0RxBuf;
    369e:	8d eb       	ldi	r24, 0xBD	; 189
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	90 93 4b 04 	sts	0x044B, r25
    36a6:	80 93 4a 04 	sts	0x044A, r24
 u0RxQueueTail = Uart0RxBuf;
    36aa:	90 93 bc 01 	sts	0x01BC, r25
    36ae:	80 93 bb 01 	sts	0x01BB, r24
}
    36b2:	08 95       	ret

000036b4 <Uart0RxBufAdd>:
// ========================================================
// Insert one character to Uart0Rxbuf queue. Returns non-zero if success,
//	otherwise returns 0.
// 
U8	Uart0RxBufAdd(U8 *ChPtr)
{
    36b4:	fc 01       	movw	r30, r24
 // Store the char
 *u0RxQueueTail = *ChPtr;	
    36b6:	a0 91 bb 01 	lds	r26, 0x01BB
    36ba:	b0 91 bc 01 	lds	r27, 0x01BC
    36be:	80 81       	ld	r24, Z
    36c0:	8c 93       	st	X, r24

 // Advance pointer
 if(u0RxQueueTail + 1 >= Uart0RxBuf + Uart0RxBufSize) {
    36c2:	80 91 bb 01 	lds	r24, 0x01BB
    36c6:	90 91 bc 01 	lds	r25, 0x01BC
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	22 e0       	ldi	r18, 0x02	; 2
    36ce:	89 3e       	cpi	r24, 0xE9	; 233
    36d0:	92 07       	cpc	r25, r18
    36d2:	18 f0       	brcs	.+6      	; 0x36da <Uart0RxBufAdd+0x26>
    36d4:	2d eb       	ldi	r18, 0xBD	; 189
    36d6:	31 e0       	ldi	r19, 0x01	; 1
    36d8:	01 c0       	rjmp	.+2      	; 0x36dc <Uart0RxBufAdd+0x28>
 	// Roll over
 	ChPtr = (U8 *)Uart0RxBuf;
 	}
 else {
 	ChPtr = (U8 *)(u0RxQueueTail + 1);
    36da:	9c 01       	movw	r18, r24
 	}

 if(ChPtr == u0RxQueueHead) {
    36dc:	80 91 4a 04 	lds	r24, 0x044A
    36e0:	90 91 4b 04 	lds	r25, 0x044B
    36e4:	28 17       	cp	r18, r24
    36e6:	39 07       	cpc	r19, r25
    36e8:	11 f4       	brne	.+4      	; 0x36ee <Uart0RxBufAdd+0x3a>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	08 95       	ret
 	// Queue full. Insertion failed
 	return 0;
 	}
 else {
 	// Successful
 	u0RxQueueTail = ChPtr;
    36ee:	30 93 bc 01 	sts	0x01BC, r19
    36f2:	20 93 bb 01 	sts	0x01BB, r18
    36f6:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
 	}

}
    36f8:	08 95       	ret

000036fa <Uart0RxBufDelete>:
// Delet one character from Uart0RxBuf and save it to location pointed by "Ch". 
//	Returns non-zero if success, otherwise returns 0.
// 

U8	Uart0RxBufDelete(U8 *ChPtr)
{
    36fa:	dc 01       	movw	r26, r24
 
}

U8 	IsUart0RxBufEmpty(void)
{
 return (u0RxQueueHead == u0RxQueueTail);
    36fc:	e0 91 4a 04 	lds	r30, 0x044A
    3700:	f0 91 4b 04 	lds	r31, 0x044B
//	Returns non-zero if success, otherwise returns 0.
// 

U8	Uart0RxBufDelete(U8 *ChPtr)
{
 if(IsUart0RxBufEmpty()) {
    3704:	80 91 bb 01 	lds	r24, 0x01BB
    3708:	90 91 bc 01 	lds	r25, 0x01BC
    370c:	e8 17       	cp	r30, r24
    370e:	f9 07       	cpc	r31, r25
    3710:	11 f4       	brne	.+4      	; 0x3716 <Uart0RxBufDelete+0x1c>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	08 95       	ret
 	// Queue empty
 	return 0;
 	}
 // Retrieve one character from queue
 *ChPtr = *u0RxQueueHead;
    3716:	80 81       	ld	r24, Z
    3718:	8c 93       	st	X, r24
 // Advance pointer
 if(u0RxQueueHead + 1 >= Uart0RxBuf + Uart0RxBufSize) {
    371a:	80 91 4a 04 	lds	r24, 0x044A
    371e:	90 91 4b 04 	lds	r25, 0x044B
    3722:	01 96       	adiw	r24, 0x01	; 1
    3724:	22 e0       	ldi	r18, 0x02	; 2
    3726:	89 3e       	cpi	r24, 0xE9	; 233
    3728:	92 07       	cpc	r25, r18
    372a:	40 f0       	brcs	.+16     	; 0x373c <Uart0RxBufDelete+0x42>
 	u0RxQueueHead = Uart0RxBuf;
    372c:	8d eb       	ldi	r24, 0xBD	; 189
    372e:	91 e0       	ldi	r25, 0x01	; 1
    3730:	90 93 4b 04 	sts	0x044B, r25
    3734:	80 93 4a 04 	sts	0x044A, r24
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	08 95       	ret
 	}
 else {
 	u0RxQueueHead++;
    373c:	90 93 4b 04 	sts	0x044B, r25
    3740:	80 93 4a 04 	sts	0x044A, r24
    3744:	81 e0       	ldi	r24, 0x01	; 1
 	}
 return 1;
 
}
    3746:	08 95       	ret

00003748 <IsUart0RxBufEmpty>:

U8 	IsUart0RxBufEmpty(void)
{
    3748:	40 e0       	ldi	r20, 0x00	; 0
    374a:	20 91 4a 04 	lds	r18, 0x044A
    374e:	30 91 4b 04 	lds	r19, 0x044B
    3752:	80 91 bb 01 	lds	r24, 0x01BB
    3756:	90 91 bc 01 	lds	r25, 0x01BC
    375a:	28 17       	cp	r18, r24
    375c:	39 07       	cpc	r19, r25
    375e:	09 f4       	brne	.+2      	; 0x3762 <IsUart0RxBufEmpty+0x1a>
    3760:	41 e0       	ldi	r20, 0x01	; 1
 return (u0RxQueueHead == u0RxQueueTail);
}
    3762:	84 2f       	mov	r24, r20
    3764:	08 95       	ret

00003766 <CommInit>:
// ========================================================
// Setup Uart 0 Rx buffer
//
void	u0RxBufInit(void)
{
 u0RxQueueHead = Uart0RxBuf;
    3766:	8d eb       	ldi	r24, 0xBD	; 189
    3768:	91 e0       	ldi	r25, 0x01	; 1
    376a:	90 93 4b 04 	sts	0x044B, r25
    376e:	80 93 4a 04 	sts	0x044A, r24
 u0RxQueueTail = Uart0RxBuf;
    3772:	90 93 bc 01 	sts	0x01BC, r25
    3776:	80 93 bb 01 	sts	0x01BB, r24
void	CommInit(void)
{
 u0RxBufInit();
// u0TxBufInit();
 
 CommStatus = 0x00;
    377a:	10 92 15 04 	sts	0x0415, r1
//rameIndex = 0;

 // -- Enable receiver interrupt
 // -- Enable receiver
 // -- Enable transmitter
 UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)
    377e:	88 e9       	ldi	r24, 0x98	; 152
    3780:	80 93 c1 00 	sts	0x00C1, r24
 			|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);

// Setup baudrate for 115200 bps
 UBRR0H = 0;
    3784:	10 92 c5 00 	sts	0x00C5, r1
 UBRR0L = 21;
    3788:	85 e1       	ldi	r24, 0x15	; 21
    378a:	80 93 c4 00 	sts	0x00C4, r24
 UCSR0A = (0<<TXC0)|(1<<U2X0)|(0<<MPCM0);
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	80 93 c0 00 	sts	0x00C0, r24
 
}
    3794:	08 95       	ret

00003796 <IsFrame>:

U8		IsFrame(U8 FrameID)
{
 U8 tmp0 = 0;
 
 switch(FrameID) {
    3796:	83 3e       	cpi	r24, 0xE3	; 227
    3798:	48 f4       	brcc	.+18     	; 0x37ac <IsFrame+0x16>
    379a:	81 3e       	cpi	r24, 0xE1	; 225
    379c:	50 f4       	brcc	.+20     	; 0x37b2 <IsFrame+0x1c>
    379e:	80 31       	cpi	r24, 0x10	; 16
    37a0:	50 f0       	brcs	.+20     	; 0x37b6 <IsFrame+0x20>
    37a2:	82 31       	cpi	r24, 0x12	; 18
    37a4:	30 f0       	brcs	.+12     	; 0x37b2 <IsFrame+0x1c>
    37a6:	84 31       	cpi	r24, 0x14	; 20
    37a8:	31 f4       	brne	.+12     	; 0x37b6 <IsFrame+0x20>
    37aa:	03 c0       	rjmp	.+6      	; 0x37b2 <IsFrame+0x1c>
    37ac:	88 5f       	subi	r24, 0xF8	; 248
    37ae:	84 30       	cpi	r24, 0x04	; 4
    37b0:	10 f4       	brcc	.+4      	; 0x37b6 <IsFrame+0x20>
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	08 95       	ret
    37b6:	80 e0       	ldi	r24, 0x00	; 0
	default:
		break;
	}

 return(tmp0);
}
    37b8:	08 95       	ret

000037ba <__vector_18>:
		break;
 	}
}

ISR(SIG_USART_RECV)
{
    37ba:	1f 92       	push	r1
    37bc:	0f 92       	push	r0
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	0f 92       	push	r0
    37c2:	11 24       	eor	r1, r1
    37c4:	2f 93       	push	r18
    37c6:	3f 93       	push	r19
    37c8:	4f 93       	push	r20
    37ca:	5f 93       	push	r21
    37cc:	6f 93       	push	r22
    37ce:	7f 93       	push	r23
    37d0:	8f 93       	push	r24
    37d2:	9f 93       	push	r25
    37d4:	af 93       	push	r26
    37d6:	bf 93       	push	r27
    37d8:	ef 93       	push	r30
    37da:	ff 93       	push	r31
    37dc:	df 93       	push	r29
    37de:	cf 93       	push	r28
    37e0:	0f 92       	push	r0
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
 U8 tmp0;

 tmp0 = UDR0;
    37e6:	80 91 c6 00 	lds	r24, 0x00C6
    37ea:	89 83       	std	Y+1, r24	; 0x01
 Uart0RxBufAdd(&tmp0);
    37ec:	ce 01       	movw	r24, r28
    37ee:	01 96       	adiw	r24, 0x01	; 1
    37f0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <Uart0RxBufAdd>
 
 }
    37f4:	0f 90       	pop	r0
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	ff 91       	pop	r31
    37fc:	ef 91       	pop	r30
    37fe:	bf 91       	pop	r27
    3800:	af 91       	pop	r26
    3802:	9f 91       	pop	r25
    3804:	8f 91       	pop	r24
    3806:	7f 91       	pop	r23
    3808:	6f 91       	pop	r22
    380a:	5f 91       	pop	r21
    380c:	4f 91       	pop	r20
    380e:	3f 91       	pop	r19
    3810:	2f 91       	pop	r18
    3812:	0f 90       	pop	r0
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	0f 90       	pop	r0
    3818:	1f 90       	pop	r1
    381a:	18 95       	reti

0000381c <PutStr_ROM_coded1>:

// ==============================================
// Store a ROM string "str" to the "loc" location of DispBuf
//	
void PutStr_ROM_coded1(U8 loc, U8 *str)
{
    381c:	98 2f       	mov	r25, r24
 U8 tmp;

 DispBuf[32] = 'l';
    381e:	8c e6       	ldi	r24, 0x6C	; 108
    3820:	80 93 20 01 	sts	0x0120, r24
 while((tmp = pgm_read_byte(str++))) {
 	DispBuf[loc++] = 0x0F ^ tmp;
    3824:	2f e0       	ldi	r18, 0x0F	; 15
    3826:	07 c0       	rjmp	.+14     	; 0x3836 <PutStr_ROM_coded1+0x1a>
    3828:	e9 2f       	mov	r30, r25
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	82 27       	eor	r24, r18
    382e:	e0 50       	subi	r30, 0x00	; 0
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 83       	st	Z, r24
    3834:	9f 5f       	subi	r25, 0xFF	; 255
    3836:	fb 01       	movw	r30, r22
void PutStr_ROM_coded1(U8 loc, U8 *str)
{
 U8 tmp;

 DispBuf[32] = 'l';
 while((tmp = pgm_read_byte(str++))) {
    3838:	6f 5f       	subi	r22, 0xFF	; 255
    383a:	7f 4f       	sbci	r23, 0xFF	; 255
    383c:	84 91       	lpm	r24, Z+
    383e:	88 23       	and	r24, r24
    3840:	99 f7       	brne	.-26     	; 0x3828 <PutStr_ROM_coded1+0xc>
 	DispBuf[loc++] = 0x0F ^ tmp;
 	}
}
    3842:	08 95       	ret

00003844 <CommTx>:
 
}

// Send data in 'buf' of 'len' bytes
void CommTx(U8 *buf, U16 len)
{
    3844:	ef 92       	push	r14
    3846:	ff 92       	push	r15
    3848:	1f 93       	push	r17
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	7c 01       	movw	r14, r24
    3850:	eb 01       	movw	r28, r22
 U8 tmp0;
 
 if(len == 0) {
    3852:	61 15       	cp	r22, r1
    3854:	71 05       	cpc	r23, r1
    3856:	81 f0       	breq	.+32     	; 0x3878 <CommTx+0x34>
 	return;
 	}

 u0putc(SynCh);
    3858:	8e ef       	ldi	r24, 0xFE	; 254
    385a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <u0putc>
 
 while(len) {
	u0putc(tmp0 = *buf++);
    385e:	f7 01       	movw	r30, r14
    3860:	11 91       	ld	r17, Z+
    3862:	7f 01       	movw	r14, r30
    3864:	81 2f       	mov	r24, r17
    3866:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <u0putc>
	if(tmp0 == SynCh) {
    386a:	1e 3f       	cpi	r17, 0xFE	; 254
    386c:	19 f4       	brne	.+6      	; 0x3874 <CommTx+0x30>
		u0putc(0x00);
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <u0putc>
		}
	len--;
    3874:	21 97       	sbiw	r28, 0x01	; 1
 	return;
 	}

 u0putc(SynCh);
 
 while(len) {
    3876:	99 f7       	brne	.-26     	; 0x385e <CommTx+0x1a>
	if(tmp0 == SynCh) {
		u0putc(0x00);
		}
	len--;
 	}
}
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	1f 91       	pop	r17
    387e:	ff 90       	pop	r15
    3880:	ef 90       	pop	r14
    3882:	08 95       	ret

00003884 <CmdProc>:


void	CmdProc(void) 
{
    3884:	ef 92       	push	r14
    3886:	ff 92       	push	r15
    3888:	0f 93       	push	r16
    388a:	1f 93       	push	r17
    388c:	cf 93       	push	r28
    388e:	df 93       	push	r29
 U8	tmp;
 U16 tmp0, tmp1, tmp2;
 
 switch(FrameBuf[0]) {
    3890:	80 91 e9 02 	lds	r24, 0x02E9
    3894:	81 3e       	cpi	r24, 0xE1	; 225
    3896:	09 f4       	brne	.+2      	; 0x389a <CmdProc+0x16>
    3898:	c0 c0       	rjmp	.+384    	; 0x3a1a <CmdProc+0x196>
    389a:	82 3e       	cpi	r24, 0xE2	; 226
    389c:	50 f4       	brcc	.+20     	; 0x38b2 <CmdProc+0x2e>
    389e:	81 31       	cpi	r24, 0x11	; 17
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <CmdProc+0x20>
    38a2:	73 c0       	rjmp	.+230    	; 0x398a <CmdProc+0x106>
    38a4:	84 31       	cpi	r24, 0x14	; 20
    38a6:	09 f4       	brne	.+2      	; 0x38aa <CmdProc+0x26>
    38a8:	90 c0       	rjmp	.+288    	; 0x39ca <CmdProc+0x146>
    38aa:	80 31       	cpi	r24, 0x10	; 16
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <CmdProc+0x2c>
    38ae:	cc c0       	rjmp	.+408    	; 0x3a48 <CmdProc+0x1c4>
    38b0:	ce c0       	rjmp	.+412    	; 0x3a4e <CmdProc+0x1ca>
    38b2:	89 3f       	cpi	r24, 0xF9	; 249
    38b4:	e1 f0       	breq	.+56     	; 0x38ee <CmdProc+0x6a>
    38b6:	8a 3f       	cpi	r24, 0xFA	; 250
    38b8:	20 f4       	brcc	.+8      	; 0x38c2 <CmdProc+0x3e>
    38ba:	88 3f       	cpi	r24, 0xF8	; 248
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <CmdProc+0x3c>
    38be:	c4 c0       	rjmp	.+392    	; 0x3a48 <CmdProc+0x1c4>
    38c0:	06 c0       	rjmp	.+12     	; 0x38ce <CmdProc+0x4a>
    38c2:	8a 3f       	cpi	r24, 0xFA	; 250
    38c4:	d1 f1       	breq	.+116    	; 0x393a <CmdProc+0xb6>
    38c6:	8b 3f       	cpi	r24, 0xFB	; 251
    38c8:	09 f0       	breq	.+2      	; 0x38cc <CmdProc+0x48>
    38ca:	be c0       	rjmp	.+380    	; 0x3a48 <CmdProc+0x1c4>
    38cc:	20 c0       	rjmp	.+64     	; 0x390e <CmdProc+0x8a>
    38ce:	c0 e8       	ldi	r28, 0x80	; 128
    38d0:	d0 e0       	ldi	r29, 0x00	; 0
	case FID_SetVendorName:
		tmp = 0;
		while(tmp < 34) {
 			EE_Write((U16)(EE_VendorID + tmp), ~FrameBuf[3 + tmp]);	// Write inverted data for encryption
    38d2:	fe 01       	movw	r30, r28
    38d4:	e4 59       	subi	r30, 0x94	; 148
    38d6:	fd 4f       	sbci	r31, 0xFD	; 253
    38d8:	60 81       	ld	r22, Z
    38da:	60 95       	com	r22
    38dc:	ce 01       	movw	r24, r28
    38de:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
    38e2:	21 96       	adiw	r28, 0x01	; 1
 U16 tmp0, tmp1, tmp2;
 
 switch(FrameBuf[0]) {
	case FID_SetVendorName:
		tmp = 0;
		while(tmp < 34) {
    38e4:	c2 3a       	cpi	r28, 0xA2	; 162
    38e6:	d1 05       	cpc	r29, r1
    38e8:	a1 f7       	brne	.-24     	; 0x38d2 <CmdProc+0x4e>
 			EE_Write((U16)(EE_VendorID + tmp), ~FrameBuf[3 + tmp]);	// Write inverted data for encryption
			tmp++;
			}
		Ackownledge:
		u0putc('G');
    38ea:	87 e4       	ldi	r24, 0x47	; 71
    38ec:	ae c0       	rjmp	.+348    	; 0x3a4a <CmdProc+0x1c6>
		break;
		
	case FID_RestoreMfgName:
		if((FrameBuf[3] == 'J') && (FrameBuf[4] == 'Y')) {
    38ee:	80 91 ec 02 	lds	r24, 0x02EC
    38f2:	8a 34       	cpi	r24, 0x4A	; 74
    38f4:	09 f0       	breq	.+2      	; 0x38f8 <CmdProc+0x74>
    38f6:	ab c0       	rjmp	.+342    	; 0x3a4e <CmdProc+0x1ca>
    38f8:	80 91 ed 02 	lds	r24, 0x02ED
    38fc:	89 35       	cpi	r24, 0x59	; 89
    38fe:	09 f0       	breq	.+2      	; 0x3902 <CmdProc+0x7e>
    3900:	a6 c0       	rjmp	.+332    	; 0x3a4e <CmdProc+0x1ca>
			EE_Write((U16)(EE_VendorID), 0xFF);
    3902:	80 e8       	ldi	r24, 0x80	; 128
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	6f ef       	ldi	r22, 0xFF	; 255
    3908:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
    390c:	ee cf       	rjmp	.-36     	; 0x38ea <CmdProc+0x66>
		goto Ackownledge;
//		u0putc('G');
//		break;

	case FID_Keycode:
		switch(FrameBuf[3]) {
    390e:	80 91 ec 02 	lds	r24, 0x02EC
    3912:	81 3a       	cpi	r24, 0xA1	; 161
    3914:	91 f0       	breq	.+36     	; 0x393a <CmdProc+0xb6>
    3916:	82 3a       	cpi	r24, 0xA2	; 162
    3918:	28 f4       	brcc	.+10     	; 0x3924 <CmdProc+0xa0>
    391a:	88 31       	cpi	r24, 0x18	; 24
    391c:	31 f3       	breq	.-52     	; 0x38ea <CmdProc+0x66>
    391e:	80 3a       	cpi	r24, 0xA0	; 160
    3920:	59 f5       	brne	.+86     	; 0x3978 <CmdProc+0xf4>
    3922:	05 c0       	rjmp	.+10     	; 0x392e <CmdProc+0xaa>
    3924:	82 3a       	cpi	r24, 0xA2	; 162
    3926:	69 f0       	breq	.+26     	; 0x3942 <CmdProc+0xbe>
    3928:	83 3a       	cpi	r24, 0xA3	; 163
    392a:	31 f5       	brne	.+76     	; 0x3978 <CmdProc+0xf4>
    392c:	17 c0       	rjmp	.+46     	; 0x395c <CmdProc+0xd8>
			case KC_Aux_ESC:
				goto Ackownledge;

			case 0xA0:
				// Turn No-Overwrite off
				BitClr8(Flags, (1 << Flags_NoOverwrite));
    392e:	80 91 4d 01 	lds	r24, 0x014D
    3932:	8f 7b       	andi	r24, 0xBF	; 191
    3934:	80 93 4d 01 	sts	0x014D, r24
    3938:	d8 cf       	rjmp	.-80     	; 0x38ea <CmdProc+0x66>
				goto Ackownledge;

			case 0xA1:
				// Turn No-Overwrite on
				BitSet8(Flags, (1 << Flags_NoOverwrite));
    393a:	80 91 4d 01 	lds	r24, 0x014D
    393e:	80 64       	ori	r24, 0x40	; 64
    3940:	f9 cf       	rjmp	.-14     	; 0x3934 <CmdProc+0xb0>
				goto Ackownledge;

			case 0xA2:
				// Set cursor position
				if(SysState.CurrState == KS_CW) {
    3942:	80 91 5e 01 	lds	r24, 0x015E
    3946:	88 23       	and	r24, r24
    3948:	81 f6       	brne	.-96     	; 0x38ea <CmdProc+0x66>
					// Only process this code under CW mode
					if(FrameBuf[4] < 3) {
    394a:	80 91 ed 02 	lds	r24, 0x02ED
    394e:	83 30       	cpi	r24, 0x03	; 3
    3950:	60 f6       	brcc	.-104    	; 0x38ea <CmdProc+0x66>
						// Place cursor to location indicated by FrameBuf[4]
						CurrFocus = FrameBuf[4];
    3952:	80 93 b9 01 	sts	0x01B9, r24
						ShowFocus();
    3956:	0e 94 b3 0a 	call	0x1566	; 0x1566 <ShowFocus>
    395a:	c7 cf       	rjmp	.-114    	; 0x38ea <CmdProc+0x66>
					}
				goto Ackownledge;
				
			case 0xA3:
				// Set waveform
				if((SysState.CurrState == KS_CW) ||(SysState.CurrState == KS_Sweep)) {
    395c:	80 91 5e 01 	lds	r24, 0x015E
    3960:	82 30       	cpi	r24, 0x02	; 2
    3962:	18 f6       	brcc	.-122    	; 0x38ea <CmdProc+0x66>
					// Only process this code under CW mode or Sweep mode

					// Set waveform indicated by FrameBuf[4]
					//	Decrease waveform number by 1 first because it will be added
					//	back in TYPE();
					tmp = FrameBuf[4] - 1;
    3964:	80 91 ed 02 	lds	r24, 0x02ED
    3968:	81 50       	subi	r24, 0x01	; 1
    396a:	08 f4       	brcc	.+2      	; 0x396e <CmdProc+0xea>
					if(tmp == 0xFF) {
    396c:	87 e0       	ldi	r24, 0x07	; 7
						tmp = WaveMax - 1;
						}
					miniDDS.CurrWave = tmp;
    396e:	80 93 88 01 	sts	0x0188, r24
					TYPE();			// For any number greater than WaveMax Sine will be used.
    3972:	0e 94 1c 19 	call	0x3238	; 0x3238 <TYPE>
    3976:	b9 cf       	rjmp	.-142    	; 0x38ea <CmdProc+0x66>
					}
				goto Ackownledge;
				
			default:
				KeyCode = FrameBuf[3];
    3978:	80 93 29 01 	sts	0x0129, r24
				KeyCodeBuf = KeyCode;	// Keep a copy to determine handling in
    397c:	80 93 2b 01 	sts	0x012B, r24
										//	UnitButton()
				KeyParam = FrameBuf[4];
    3980:	80 91 ed 02 	lds	r24, 0x02ED
    3984:	80 93 26 01 	sts	0x0126, r24
    3988:	b0 cf       	rjmp	.-160    	; 0x38ea <CmdProc+0x66>
*/		
	case FID_ReadRequest:
		break;

	case FID_WriteRequest:
		if((FrameBuf[3] & 0xC0) == 0x80) {
    398a:	80 91 ec 02 	lds	r24, 0x02EC
    398e:	80 7c       	andi	r24, 0xC0	; 192
    3990:	80 38       	cpi	r24, 0x80	; 128
    3992:	09 f0       	breq	.+2      	; 0x3996 <CmdProc+0x112>
    3994:	5c c0       	rjmp	.+184    	; 0x3a4e <CmdProc+0x1ca>
			// Write internal EEPROM
			tmp1 = *((U16 *)&FrameBuf[6]);	// start address
    3996:	e0 90 ef 02 	lds	r14, 0x02EF
    399a:	f0 90 f0 02 	lds	r15, 0x02F0
			tmp2 = *((U16 *)&FrameBuf[10]);	// Write size
    399e:	00 91 f3 02 	lds	r16, 0x02F3
    39a2:	10 91 f4 02 	lds	r17, 0x02F4
    39a6:	c9 ee       	ldi	r28, 0xE9	; 233
    39a8:	d2 e0       	ldi	r29, 0x02	; 2
			tmp0 = 0;
			while(tmp0 < tmp2) {
    39aa:	0c 0f       	add	r16, r28
    39ac:	1d 1f       	adc	r17, r29
    39ae:	09 c0       	rjmp	.+18     	; 0x39c2 <CmdProc+0x13e>
 				EE_Write(tmp1, ~(FrameBuf[14 + tmp0]));	// Data are reversed before writing
    39b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    39b2:	60 95       	com	r22
    39b4:	c7 01       	movw	r24, r14
    39b6:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
				tmp1++;
    39ba:	08 94       	sec
    39bc:	e1 1c       	adc	r14, r1
    39be:	f1 1c       	adc	r15, r1
    39c0:	21 96       	adiw	r28, 0x01	; 1
		if((FrameBuf[3] & 0xC0) == 0x80) {
			// Write internal EEPROM
			tmp1 = *((U16 *)&FrameBuf[6]);	// start address
			tmp2 = *((U16 *)&FrameBuf[10]);	// Write size
			tmp0 = 0;
			while(tmp0 < tmp2) {
    39c2:	c0 17       	cp	r28, r16
    39c4:	d1 07       	cpc	r29, r17
    39c6:	a1 f7       	brne	.-24     	; 0x39b0 <CmdProc+0x12c>
    39c8:	1c c0       	rjmp	.+56     	; 0x3a02 <CmdProc+0x17e>
		break;
		
	case FID_WriteWaveform:
		// Write waveform to EEPROM address 0x0100
		tmp1 = 0x0100;	// start address
		tmp2 = *((U16 *)&FrameBuf[4]);	// Write size
    39ca:	80 91 ed 02 	lds	r24, 0x02ED
    39ce:	90 91 ee 02 	lds	r25, 0x02EE
    39d2:	9c 01       	movw	r18, r24
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	21 30       	cpi	r18, 0x01	; 1
    39d8:	38 07       	cpc	r19, r24
    39da:	10 f0       	brcs	.+4      	; 0x39e0 <CmdProc+0x15c>
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	31 e0       	ldi	r19, 0x01	; 1
    39e0:	c0 e0       	ldi	r28, 0x00	; 0
    39e2:	d1 e0       	ldi	r29, 0x01	; 1
		if(tmp2 > 256) {
			tmp2 = 256;
			}
		tmp0 = 0;
		while(tmp0 < tmp2) {
    39e4:	89 01       	movw	r16, r18
    39e6:	00 50       	subi	r16, 0x00	; 0
    39e8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ea:	08 c0       	rjmp	.+16     	; 0x39fc <CmdProc+0x178>
 			EE_Write(tmp1, FrameBuf[14 + tmp0]);
    39ec:	fe 01       	movw	r30, r28
    39ee:	e9 50       	subi	r30, 0x09	; 9
    39f0:	fe 4f       	sbci	r31, 0xFE	; 254
    39f2:	ce 01       	movw	r24, r28
    39f4:	60 81       	ld	r22, Z
    39f6:	0e 94 93 05 	call	0xb26	; 0xb26 <EE_Write>
			tmp1++;
    39fa:	21 96       	adiw	r28, 0x01	; 1
		tmp2 = *((U16 *)&FrameBuf[4]);	// Write size
		if(tmp2 > 256) {
			tmp2 = 256;
			}
		tmp0 = 0;
		while(tmp0 < tmp2) {
    39fc:	c0 17       	cp	r28, r16
    39fe:	d1 07       	cpc	r29, r17
    3a00:	a9 f7       	brne	.-22     	; 0x39ec <CmdProc+0x168>
 			EE_Write(tmp1, FrameBuf[14 + tmp0]);
			tmp1++;
			tmp0++;
			}
		// Send acknowledgement
		Txbuf[0] = FID_WriteReturn;
    3a02:	83 e1       	ldi	r24, 0x13	; 19
    3a04:	80 93 18 04 	sts	0x0418, r24
		Txbuf[1] = 0x06;
    3a08:	86 e0       	ldi	r24, 0x06	; 6
    3a0a:	80 93 19 04 	sts	0x0419, r24
		Txbuf[2] = 0;
    3a0e:	10 92 1a 04 	sts	0x041A, r1
		Txbuf[3] = 0x80;	// Echo write type, i.e. Internal EEPROM write
    3a12:	80 e8       	ldi	r24, 0x80	; 128
    3a14:	80 93 1b 04 	sts	0x041B, r24
    3a18:	0e c0       	rjmp	.+28     	; 0x3a36 <CmdProc+0x1b2>
		CommTx(Txbuf, *((U16 *)&Txbuf[1]));
		break;

	case FID_Connect:
		// Send confirm
		Txbuf[0] = FID_Confirm;
    3a1a:	82 ee       	ldi	r24, 0xE2	; 226
    3a1c:	80 93 18 04 	sts	0x0418, r24
		Txbuf[1] = 0x09;
    3a20:	89 e0       	ldi	r24, 0x09	; 9
    3a22:	80 93 19 04 	sts	0x0419, r24
		Txbuf[2] = 0;
    3a26:	10 92 1a 04 	sts	0x041A, r1
		Txbuf[3] = 'G';	// Device type. 'G' for signal generator
    3a2a:	87 e4       	ldi	r24, 0x47	; 71
    3a2c:	80 93 1b 04 	sts	0x041B, r24
		Txbuf[4] = 1;	// Model. 1 for 085
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	80 93 1c 04 	sts	0x041C, r24
		CommTx(Txbuf, *((U16 *)&Txbuf[1]));
    3a36:	60 91 19 04 	lds	r22, 0x0419
    3a3a:	70 91 1a 04 	lds	r23, 0x041A
    3a3e:	88 e1       	ldi	r24, 0x18	; 24
    3a40:	94 e0       	ldi	r25, 0x04	; 4
    3a42:	0e 94 22 1c 	call	0x3844	; 0x3844 <CommTx>
    3a46:	03 c0       	rjmp	.+6      	; 0x3a4e <CmdProc+0x1ca>
		break;		
	default:
		u0putc('?');
    3a48:	8f e3       	ldi	r24, 0x3F	; 63
    3a4a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <u0putc>
		break;
 	}
}
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	08 95       	ret

00003a5c <CommRx>:

 return(tmp0);
}

void	CommRx(void)
{
    3a5c:	8f 92       	push	r8
    3a5e:	9f 92       	push	r9
    3a60:	af 92       	push	r10
    3a62:	bf 92       	push	r11
    3a64:	cf 92       	push	r12
    3a66:	df 92       	push	r13
    3a68:	ef 92       	push	r14
    3a6a:	ff 92       	push	r15
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	0f 92       	push	r0
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
		// Do not receive if current keycode has not been processed
		break;
	 	}

	// Get one byte
	Uart0RxBufDelete(&tmp0);
    3a7a:	5e 01       	movw	r10, r28
    3a7c:	08 94       	sec
    3a7e:	a1 1c       	adc	r10, r1
    3a80:	b1 1c       	adc	r11, r1
			// Rxing not valid or the byte following SynCh is not 0x00.
			// Check for frame ID
			if(IsFrame(tmp0)) {
				// Initialize a freme
				FrameBuf[0] = tmp0;
				FrameBuf[2] = 0xFF;	// Make sure correct frame length check (byte1 & byte 2 are frame length)
    3a82:	88 24       	eor	r8, r8
    3a84:	8a 94       	dec	r8
				RxCnt = 1;
    3a86:	91 e0       	ldi	r25, 0x01	; 1
    3a88:	c9 2e       	mov	r12, r25
    3a8a:	d1 2c       	mov	r13, r1
		BitClr8(CommStatus, (1 << CS_SynCh1Found));	// Clear SynCh_Found flag first
		// The previous byte was SynCh. If Rxing is valid and the byte following SynCh is 0x00
		//	then the SynCh was a data byte. Otherwise check for frame ID. 
		if((BitTest8(CommStatus, (1 << CS_Rxing))) && (tmp0 == 0x00)) {
			// Frame receiving in process and the current byte is 0x00. Save SynCh as data
			FrameBuf[RxCnt++] = SynCh;
    3a8c:	8e ef       	ldi	r24, 0xFE	; 254
    3a8e:	98 2e       	mov	r9, r24
    3a90:	61 c0       	rjmp	.+194    	; 0x3b54 <CommRx+0xf8>
 U8	tmp0;

 // Check and get a byte from Uart0RxBuf
// while(Uart0RxBufDelete(&tmp0)) {
 while(!IsUart0RxBufEmpty()) {
	 if((BitTest8(Flags, (1 << Flags_NoOverwrite))) && (KeyCode != 0)) {
    3a92:	80 91 4d 01 	lds	r24, 0x014D
    3a96:	86 ff       	sbrs	r24, 6
    3a98:	05 c0       	rjmp	.+10     	; 0x3aa4 <CommRx+0x48>
    3a9a:	80 91 29 01 	lds	r24, 0x0129
    3a9e:	88 23       	and	r24, r24
    3aa0:	09 f0       	breq	.+2      	; 0x3aa4 <CommRx+0x48>
    3aa2:	64 c0       	rjmp	.+200    	; 0x3b6c <CommRx+0x110>
		// Do not receive if current keycode has not been processed
		break;
	 	}

	// Get one byte
	Uart0RxBufDelete(&tmp0);
    3aa4:	c5 01       	movw	r24, r10
    3aa6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <Uart0RxBufDelete>
	// Check for SynCh
	if(tmp0 == SynCh) {
    3aaa:	09 81       	ldd	r16, Y+1	; 0x01
    3aac:	80 91 15 04 	lds	r24, 0x0415
    3ab0:	0e 3f       	cpi	r16, 0xFE	; 254
    3ab2:	11 f4       	brne	.+4      	; 0x3ab8 <CommRx+0x5c>
		// Mark it if SycCh found
		BitSet8(CommStatus, (1 << CS_SynCh1Found));
    3ab4:	80 68       	ori	r24, 0x80	; 128
    3ab6:	4c c0       	rjmp	.+152    	; 0x3b50 <CommRx+0xf4>
		continue;
		}

 	if(BitTest8(CommStatus, (1 << CS_SynCh1Found))) {
    3ab8:	87 ff       	sbrs	r24, 7
    3aba:	24 c0       	rjmp	.+72     	; 0x3b04 <CommRx+0xa8>
		// Process the byte following SynCh
		BitClr8(CommStatus, (1 << CS_SynCh1Found));	// Clear SynCh_Found flag first
    3abc:	18 2f       	mov	r17, r24
    3abe:	1f 77       	andi	r17, 0x7F	; 127
    3ac0:	10 93 15 04 	sts	0x0415, r17
		// The previous byte was SynCh. If Rxing is valid and the byte following SynCh is 0x00
		//	then the SynCh was a data byte. Otherwise check for frame ID. 
		if((BitTest8(CommStatus, (1 << CS_Rxing))) && (tmp0 == 0x00)) {
    3ac4:	15 ff       	sbrs	r17, 5
    3ac6:	0b c0       	rjmp	.+22     	; 0x3ade <CommRx+0x82>
    3ac8:	00 23       	and	r16, r16
    3aca:	49 f4       	brne	.+18     	; 0x3ade <CommRx+0x82>
			// Frame receiving in process and the current byte is 0x00. Save SynCh as data
			FrameBuf[RxCnt++] = SynCh;
    3acc:	80 91 16 04 	lds	r24, 0x0416
    3ad0:	90 91 17 04 	lds	r25, 0x0417
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	e7 51       	subi	r30, 0x17	; 23
    3ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    3ada:	90 82       	st	Z, r9
    3adc:	1d c0       	rjmp	.+58     	; 0x3b18 <CommRx+0xbc>
			goto FrameEndCheck;
			}
		else {
			// Rxing not valid or the byte following SynCh is not 0x00.
			// Check for frame ID
			if(IsFrame(tmp0)) {
    3ade:	80 2f       	mov	r24, r16
    3ae0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <IsFrame>
    3ae4:	88 23       	and	r24, r24
    3ae6:	51 f0       	breq	.+20     	; 0x3afc <CommRx+0xa0>
				// Initialize a freme
				FrameBuf[0] = tmp0;
    3ae8:	00 93 e9 02 	sts	0x02E9, r16
				FrameBuf[2] = 0xFF;	// Make sure correct frame length check (byte1 & byte 2 are frame length)
    3aec:	80 92 eb 02 	sts	0x02EB, r8
				RxCnt = 1;
    3af0:	d0 92 17 04 	sts	0x0417, r13
    3af4:	c0 92 16 04 	sts	0x0416, r12
				BitSet8(CommStatus, (1 << CS_Rxing));
    3af8:	10 62       	ori	r17, 0x20	; 32
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <CommRx+0xa2>
				}
			else {
				// Clear Rxing anyway. This is to prevent error at Rxing being valid but
				//	SynCh is not followed by frame ID or 0x00.
				BitClr8(CommStatus, (1 << CS_Rxing));
    3afc:	1f 7d       	andi	r17, 0xDF	; 223
    3afe:	10 93 15 04 	sts	0x0415, r17
    3b02:	28 c0       	rjmp	.+80     	; 0x3b54 <CommRx+0xf8>
				}
			}
 		}
	else {
		// Normal byte processing. Save bytes if Rxing is valid
		if(BitTest8(CommStatus, (1 << CS_Rxing))) {
    3b04:	85 ff       	sbrs	r24, 5
    3b06:	26 c0       	rjmp	.+76     	; 0x3b54 <CommRx+0xf8>
			FrameBuf[RxCnt++] = tmp0;
    3b08:	80 91 16 04 	lds	r24, 0x0416
    3b0c:	90 91 17 04 	lds	r25, 0x0417
    3b10:	fc 01       	movw	r30, r24
    3b12:	e7 51       	subi	r30, 0x17	; 23
    3b14:	fd 4f       	sbci	r31, 0xFD	; 253
    3b16:	00 83       	st	Z, r16
    3b18:	01 96       	adiw	r24, 0x01	; 1
    3b1a:	90 93 17 04 	sts	0x0417, r25
    3b1e:	80 93 16 04 	sts	0x0416, r24
			FrameEndCheck:
			if((RxCnt >= (((U16)FrameBuf[2] << 8) | (U16)FrameBuf[1])) ||(RxCnt > FrameSizeMax)) {
    3b22:	20 91 16 04 	lds	r18, 0x0416
    3b26:	30 91 17 04 	lds	r19, 0x0417
    3b2a:	f0 90 eb 02 	lds	r15, 0x02EB
    3b2e:	ee 24       	eor	r14, r14
    3b30:	80 91 ea 02 	lds	r24, 0x02EA
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	8e 29       	or	r24, r14
    3b38:	9f 29       	or	r25, r15
    3b3a:	28 17       	cp	r18, r24
    3b3c:	39 07       	cpc	r19, r25
    3b3e:	18 f4       	brcc	.+6      	; 0x3b46 <CommRx+0xea>
    3b40:	2d 52       	subi	r18, 0x2D	; 45
    3b42:	31 40       	sbci	r19, 0x01	; 1
    3b44:	38 f0       	brcs	.+14     	; 0x3b54 <CommRx+0xf8>
				CmdProc();
    3b46:	0e 94 42 1c 	call	0x3884	; 0x3884 <CmdProc>
				BitClr8(CommStatus, (1 << CS_Rxing));
    3b4a:	80 91 15 04 	lds	r24, 0x0415
    3b4e:	8f 7d       	andi	r24, 0xDF	; 223
    3b50:	80 93 15 04 	sts	0x0415, r24
{
 U8	tmp0;

 // Check and get a byte from Uart0RxBuf
// while(Uart0RxBufDelete(&tmp0)) {
 while(!IsUart0RxBufEmpty()) {
    3b54:	20 91 4a 04 	lds	r18, 0x044A
    3b58:	30 91 4b 04 	lds	r19, 0x044B
    3b5c:	80 91 bb 01 	lds	r24, 0x01BB
    3b60:	90 91 bc 01 	lds	r25, 0x01BC
    3b64:	28 17       	cp	r18, r24
    3b66:	39 07       	cpc	r19, r25
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <CommRx+0x110>
    3b6a:	93 cf       	rjmp	.-218    	; 0x3a92 <CommRx+0x36>
				}
			}
 		}
 	}
 
}
    3b6c:	0f 90       	pop	r0
    3b6e:	cf 91       	pop	r28
    3b70:	df 91       	pop	r29
    3b72:	1f 91       	pop	r17
    3b74:	0f 91       	pop	r16
    3b76:	ff 90       	pop	r15
    3b78:	ef 90       	pop	r14
    3b7a:	df 90       	pop	r13
    3b7c:	cf 90       	pop	r12
    3b7e:	bf 90       	pop	r11
    3b80:	af 90       	pop	r10
    3b82:	9f 90       	pop	r9
    3b84:	8f 90       	pop	r8
    3b86:	08 95       	ret

00003b88 <Dly1us>:
        .section .text

 	.global	Dly1us
Dly1us: 	
 	
 	nop
    3b88:	00 00       	nop
 	nop
    3b8a:	00 00       	nop
 	nop
    3b8c:	00 00       	nop
 	nop
    3b8e:	00 00       	nop
 	nop
    3b90:	00 00       	nop
 	
 	nop
    3b92:	00 00       	nop
 	nop
    3b94:	00 00       	nop
 	nop
    3b96:	00 00       	nop
 	nop
    3b98:	00 00       	nop
 	nop
    3b9a:	00 00       	nop
 	
	ret 	
    3b9c:	08 95       	ret

00003b9e <RecvByte>:
#define	SBuf			r24

	; Receive into r24. r17 will be broken. (16 words)
	.global	RecvByte
RecvByte: 	
	cli
    3b9e:	f8 94       	cli
	push		r30
    3ba0:	ef 93       	push	r30

	; SET TXDpin to input mode
;	cbi		DDRB, TXDpin
	
	ldi		SBuf, 0x80		;Shift register for receive
    3ba2:	80 e8       	ldi	r24, 0x80	; 128
	ldi		BitTime, BPS_HALF	;Wait for half bit time
    3ba4:	e7 e5       	ldi	r30, 0x57	; 87

00003ba6 <RB0>:
RB0:
	dec		BitTime			;
    3ba6:	ea 95       	dec	r30
	brne		RB0				;/
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <RB0>

00003baa <RB1>:
RB1:
	ldi		BitTime, BPS		;Wait for full bit time
    3baa:	ee ea       	ldi	r30, 0xAE	; 174

00003bac <RB2>:
RB2:
	dec		BitTime			;
    3bac:	ea 95       	dec	r30
	brne		RB2				;/
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <RB2>
	lsr		SBuf				;Next bit
    3bb0:	86 95       	lsr	r24
	sbic		_SFR_IO_ADDR(RXDPort), RXDpin		
    3bb2:	4a 99       	sbic	0x09, 2	; 9
	ori		SBuf, 0x80		;/
    3bb4:	80 68       	ori	r24, 0x80	; 128
	brcc		RB1				;All bits received?  no, continue
    3bb6:	c8 f7       	brcc	.-14     	; 0x3baa <RB1>
				;                    yes, exit
	ldi		BitTime, BPS		;Wait for full bit time
    3bb8:	ee ea       	ldi	r30, 0xAE	; 174

00003bba <RB3>:
RB3:
	dec		BitTime			;
    3bba:	ea 95       	dec	r30
	brne		RB3				;/
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <RB3>

	; Set TXDpin to output mode
;	sbi		DDRB, TXDpin

	pop		r30
    3bbe:	ef 91       	pop	r30
	sei
    3bc0:	78 94       	sei
	ret       
    3bc2:	08 95       	ret

00003bc4 <SendByte>:

	.global	SendByte   
SendByte:
	cli
    3bc4:	f8 94       	cli
	push		r30
    3bc6:	ef 93       	push	r30
	push		r31
    3bc8:	ff 93       	push	r31
	
	; Set TXDpin to output mode
;	sbi		DDRB, TXDpin

	; Set TXDpin to HIGH for 2 bit time
	sbi		_SFR_IO_ADDR(TXDPort), TXDpin	
    3bca:	5b 9a       	sbi	0x0b, 3	; 11
	ldi		BitTime, BPS 	; Wait for full 2 bit time
    3bcc:	ee ea       	ldi	r30, 0xAE	; 174

00003bce <SB00>:
SB00:
	dec		BitTime		
    3bce:	ea 95       	dec	r30
	brne		SB00
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <SB00>
	
	ldi		BitTime, BPS 	; Wait for full 2 bit time
    3bd2:	ee ea       	ldi	r30, 0xAE	; 174

00003bd4 <SB0>:
SB0:
	dec		BitTime		
    3bd4:	ea 95       	dec	r30
	brne		SB0
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <SB0>

	ldi		BitCount, 9		; Bit count
    3bd8:	f9 e0       	ldi	r31, 0x09	; 9
	clc						; Pre-load start bit
    3bda:	88 94       	clc

00003bdc <SB1>:
SB1:
	; Send one bit
	brcs		SB2				
    3bdc:	10 f0       	brcs	.+4      	; 0x3be2 <SB2>
	cbi		_SFR_IO_ADDR(TXDPort), TXDpin
    3bde:	5b 98       	cbi	0x0b, 3	; 11
	rjmp		SB201
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <SB201>

00003be2 <SB2>:
SB2:
	sbi		_SFR_IO_ADDR(TXDPort), TXDpin
    3be2:	5b 9a       	sbi	0x0b, 3	; 11

00003be4 <SB201>:

SB201:
	ldi		BitTime, BPS - 1	; Wait for full bit time
    3be4:	ee ea       	ldi	r30, 0xAE	; 174

00003be6 <SB3>:
SB3:
	dec		BitTime		
    3be6:	ea 95       	dec	r30
	brne		SB3		
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <SB3>

	lsr		SBuf				; Next bit
    3bea:	86 95       	lsr	r24
	dec		BitCount			; All sent ?
    3bec:	fa 95       	dec	r31
	brne		SB1				; No, coutinue
    3bee:	b1 f7       	brne	.-20     	; 0x3bdc <SB1>

	; Send stop bit
	sbi		_SFR_IO_ADDR(TXDPort), TXDpin
    3bf0:	5b 9a       	sbi	0x0b, 3	; 11
	ldi		BitTime, BPS - 1	; Wait for full bit time
    3bf2:	ee ea       	ldi	r30, 0xAE	; 174

00003bf4 <SB4>:
SB4:
	dec		BitTime		
    3bf4:	ea 95       	dec	r30
	brne		SB4		
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <SB4>

	; Restore TXDpin to input mode
;	cbi		DDRB, TXDpin

	pop		r31
    3bf8:	ff 91       	pop	r31
	pop		r30
    3bfa:	ef 91       	pop	r30
	sei
    3bfc:	78 94       	sei
	ret
    3bfe:	08 95       	ret

00003c00 <__divsf3>:
    3c00:	0c d0       	rcall	.+24     	; 0x3c1a <__divsf3x>
    3c02:	eb c0       	rjmp	.+470    	; 0x3dda <__fp_round>
    3c04:	e3 d0       	rcall	.+454    	; 0x3dcc <__fp_pscB>
    3c06:	40 f0       	brcs	.+16     	; 0x3c18 <__divsf3+0x18>
    3c08:	da d0       	rcall	.+436    	; 0x3dbe <__fp_pscA>
    3c0a:	30 f0       	brcs	.+12     	; 0x3c18 <__divsf3+0x18>
    3c0c:	21 f4       	brne	.+8      	; 0x3c16 <__divsf3+0x16>
    3c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c10:	19 f0       	breq	.+6      	; 0x3c18 <__divsf3+0x18>
    3c12:	cc c0       	rjmp	.+408    	; 0x3dac <__fp_inf>
    3c14:	51 11       	cpse	r21, r1
    3c16:	15 c1       	rjmp	.+554    	; 0x3e42 <__fp_szero>
    3c18:	cf c0       	rjmp	.+414    	; 0x3db8 <__fp_nan>

00003c1a <__divsf3x>:
    3c1a:	f0 d0       	rcall	.+480    	; 0x3dfc <__fp_split3>
    3c1c:	98 f3       	brcs	.-26     	; 0x3c04 <__divsf3+0x4>

00003c1e <__divsf3_pse>:
    3c1e:	99 23       	and	r25, r25
    3c20:	c9 f3       	breq	.-14     	; 0x3c14 <__divsf3+0x14>
    3c22:	55 23       	and	r21, r21
    3c24:	b1 f3       	breq	.-20     	; 0x3c12 <__divsf3+0x12>
    3c26:	95 1b       	sub	r25, r21
    3c28:	55 0b       	sbc	r21, r21
    3c2a:	bb 27       	eor	r27, r27
    3c2c:	aa 27       	eor	r26, r26
    3c2e:	62 17       	cp	r22, r18
    3c30:	73 07       	cpc	r23, r19
    3c32:	84 07       	cpc	r24, r20
    3c34:	38 f0       	brcs	.+14     	; 0x3c44 <__divsf3_pse+0x26>
    3c36:	9f 5f       	subi	r25, 0xFF	; 255
    3c38:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3a:	22 0f       	add	r18, r18
    3c3c:	33 1f       	adc	r19, r19
    3c3e:	44 1f       	adc	r20, r20
    3c40:	aa 1f       	adc	r26, r26
    3c42:	a9 f3       	breq	.-22     	; 0x3c2e <__divsf3_pse+0x10>
    3c44:	33 d0       	rcall	.+102    	; 0x3cac <__divsf3_pse+0x8e>
    3c46:	0e 2e       	mov	r0, r30
    3c48:	3a f0       	brmi	.+14     	; 0x3c58 <__divsf3_pse+0x3a>
    3c4a:	e0 e8       	ldi	r30, 0x80	; 128
    3c4c:	30 d0       	rcall	.+96     	; 0x3cae <__divsf3_pse+0x90>
    3c4e:	91 50       	subi	r25, 0x01	; 1
    3c50:	50 40       	sbci	r21, 0x00	; 0
    3c52:	e6 95       	lsr	r30
    3c54:	00 1c       	adc	r0, r0
    3c56:	ca f7       	brpl	.-14     	; 0x3c4a <__divsf3_pse+0x2c>
    3c58:	29 d0       	rcall	.+82     	; 0x3cac <__divsf3_pse+0x8e>
    3c5a:	fe 2f       	mov	r31, r30
    3c5c:	27 d0       	rcall	.+78     	; 0x3cac <__divsf3_pse+0x8e>
    3c5e:	66 0f       	add	r22, r22
    3c60:	77 1f       	adc	r23, r23
    3c62:	88 1f       	adc	r24, r24
    3c64:	bb 1f       	adc	r27, r27
    3c66:	26 17       	cp	r18, r22
    3c68:	37 07       	cpc	r19, r23
    3c6a:	48 07       	cpc	r20, r24
    3c6c:	ab 07       	cpc	r26, r27
    3c6e:	b0 e8       	ldi	r27, 0x80	; 128
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <__divsf3_pse+0x56>
    3c72:	bb 0b       	sbc	r27, r27
    3c74:	80 2d       	mov	r24, r0
    3c76:	bf 01       	movw	r22, r30
    3c78:	ff 27       	eor	r31, r31
    3c7a:	93 58       	subi	r25, 0x83	; 131
    3c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7e:	2a f0       	brmi	.+10     	; 0x3c8a <__divsf3_pse+0x6c>
    3c80:	9e 3f       	cpi	r25, 0xFE	; 254
    3c82:	51 05       	cpc	r21, r1
    3c84:	68 f0       	brcs	.+26     	; 0x3ca0 <__divsf3_pse+0x82>
    3c86:	92 c0       	rjmp	.+292    	; 0x3dac <__fp_inf>
    3c88:	dc c0       	rjmp	.+440    	; 0x3e42 <__fp_szero>
    3c8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3c8c:	ec f3       	brlt	.-6      	; 0x3c88 <__divsf3_pse+0x6a>
    3c8e:	98 3e       	cpi	r25, 0xE8	; 232
    3c90:	dc f3       	brlt	.-10     	; 0x3c88 <__divsf3_pse+0x6a>
    3c92:	86 95       	lsr	r24
    3c94:	77 95       	ror	r23
    3c96:	67 95       	ror	r22
    3c98:	b7 95       	ror	r27
    3c9a:	f7 95       	ror	r31
    3c9c:	9f 5f       	subi	r25, 0xFF	; 255
    3c9e:	c9 f7       	brne	.-14     	; 0x3c92 <__divsf3_pse+0x74>
    3ca0:	88 0f       	add	r24, r24
    3ca2:	91 1d       	adc	r25, r1
    3ca4:	96 95       	lsr	r25
    3ca6:	87 95       	ror	r24
    3ca8:	97 f9       	bld	r25, 7
    3caa:	08 95       	ret
    3cac:	e1 e0       	ldi	r30, 0x01	; 1
    3cae:	66 0f       	add	r22, r22
    3cb0:	77 1f       	adc	r23, r23
    3cb2:	88 1f       	adc	r24, r24
    3cb4:	bb 1f       	adc	r27, r27
    3cb6:	62 17       	cp	r22, r18
    3cb8:	73 07       	cpc	r23, r19
    3cba:	84 07       	cpc	r24, r20
    3cbc:	ba 07       	cpc	r27, r26
    3cbe:	20 f0       	brcs	.+8      	; 0x3cc8 <__divsf3_pse+0xaa>
    3cc0:	62 1b       	sub	r22, r18
    3cc2:	73 0b       	sbc	r23, r19
    3cc4:	84 0b       	sbc	r24, r20
    3cc6:	ba 0b       	sbc	r27, r26
    3cc8:	ee 1f       	adc	r30, r30
    3cca:	88 f7       	brcc	.-30     	; 0x3cae <__divsf3_pse+0x90>
    3ccc:	e0 95       	com	r30
    3cce:	08 95       	ret

00003cd0 <__fixsfsi>:
    3cd0:	04 d0       	rcall	.+8      	; 0x3cda <__fixunssfsi>
    3cd2:	68 94       	set
    3cd4:	b1 11       	cpse	r27, r1
    3cd6:	b5 c0       	rjmp	.+362    	; 0x3e42 <__fp_szero>
    3cd8:	08 95       	ret

00003cda <__fixunssfsi>:
    3cda:	98 d0       	rcall	.+304    	; 0x3e0c <__fp_splitA>
    3cdc:	88 f0       	brcs	.+34     	; 0x3d00 <__fixunssfsi+0x26>
    3cde:	9f 57       	subi	r25, 0x7F	; 127
    3ce0:	90 f0       	brcs	.+36     	; 0x3d06 <__fixunssfsi+0x2c>
    3ce2:	b9 2f       	mov	r27, r25
    3ce4:	99 27       	eor	r25, r25
    3ce6:	b7 51       	subi	r27, 0x17	; 23
    3ce8:	a0 f0       	brcs	.+40     	; 0x3d12 <__fixunssfsi+0x38>
    3cea:	d1 f0       	breq	.+52     	; 0x3d20 <__fixunssfsi+0x46>
    3cec:	66 0f       	add	r22, r22
    3cee:	77 1f       	adc	r23, r23
    3cf0:	88 1f       	adc	r24, r24
    3cf2:	99 1f       	adc	r25, r25
    3cf4:	1a f0       	brmi	.+6      	; 0x3cfc <__fixunssfsi+0x22>
    3cf6:	ba 95       	dec	r27
    3cf8:	c9 f7       	brne	.-14     	; 0x3cec <__fixunssfsi+0x12>
    3cfa:	12 c0       	rjmp	.+36     	; 0x3d20 <__fixunssfsi+0x46>
    3cfc:	b1 30       	cpi	r27, 0x01	; 1
    3cfe:	81 f0       	breq	.+32     	; 0x3d20 <__fixunssfsi+0x46>
    3d00:	9f d0       	rcall	.+318    	; 0x3e40 <__fp_zero>
    3d02:	b1 e0       	ldi	r27, 0x01	; 1
    3d04:	08 95       	ret
    3d06:	9c c0       	rjmp	.+312    	; 0x3e40 <__fp_zero>
    3d08:	67 2f       	mov	r22, r23
    3d0a:	78 2f       	mov	r23, r24
    3d0c:	88 27       	eor	r24, r24
    3d0e:	b8 5f       	subi	r27, 0xF8	; 248
    3d10:	39 f0       	breq	.+14     	; 0x3d20 <__fixunssfsi+0x46>
    3d12:	b9 3f       	cpi	r27, 0xF9	; 249
    3d14:	cc f3       	brlt	.-14     	; 0x3d08 <__fixunssfsi+0x2e>
    3d16:	86 95       	lsr	r24
    3d18:	77 95       	ror	r23
    3d1a:	67 95       	ror	r22
    3d1c:	b3 95       	inc	r27
    3d1e:	d9 f7       	brne	.-10     	; 0x3d16 <__fixunssfsi+0x3c>
    3d20:	3e f4       	brtc	.+14     	; 0x3d30 <__fixunssfsi+0x56>
    3d22:	90 95       	com	r25
    3d24:	80 95       	com	r24
    3d26:	70 95       	com	r23
    3d28:	61 95       	neg	r22
    3d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	08 95       	ret

00003d32 <__floatunsisf>:
    3d32:	e8 94       	clt
    3d34:	09 c0       	rjmp	.+18     	; 0x3d48 <__floatsisf+0x12>

00003d36 <__floatsisf>:
    3d36:	97 fb       	bst	r25, 7
    3d38:	3e f4       	brtc	.+14     	; 0x3d48 <__floatsisf+0x12>
    3d3a:	90 95       	com	r25
    3d3c:	80 95       	com	r24
    3d3e:	70 95       	com	r23
    3d40:	61 95       	neg	r22
    3d42:	7f 4f       	sbci	r23, 0xFF	; 255
    3d44:	8f 4f       	sbci	r24, 0xFF	; 255
    3d46:	9f 4f       	sbci	r25, 0xFF	; 255
    3d48:	99 23       	and	r25, r25
    3d4a:	a9 f0       	breq	.+42     	; 0x3d76 <__floatsisf+0x40>
    3d4c:	f9 2f       	mov	r31, r25
    3d4e:	96 e9       	ldi	r25, 0x96	; 150
    3d50:	bb 27       	eor	r27, r27
    3d52:	93 95       	inc	r25
    3d54:	f6 95       	lsr	r31
    3d56:	87 95       	ror	r24
    3d58:	77 95       	ror	r23
    3d5a:	67 95       	ror	r22
    3d5c:	b7 95       	ror	r27
    3d5e:	f1 11       	cpse	r31, r1
    3d60:	f8 cf       	rjmp	.-16     	; 0x3d52 <__floatsisf+0x1c>
    3d62:	fa f4       	brpl	.+62     	; 0x3da2 <__floatsisf+0x6c>
    3d64:	bb 0f       	add	r27, r27
    3d66:	11 f4       	brne	.+4      	; 0x3d6c <__floatsisf+0x36>
    3d68:	60 ff       	sbrs	r22, 0
    3d6a:	1b c0       	rjmp	.+54     	; 0x3da2 <__floatsisf+0x6c>
    3d6c:	6f 5f       	subi	r22, 0xFF	; 255
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	8f 4f       	sbci	r24, 0xFF	; 255
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	16 c0       	rjmp	.+44     	; 0x3da2 <__floatsisf+0x6c>
    3d76:	88 23       	and	r24, r24
    3d78:	11 f0       	breq	.+4      	; 0x3d7e <__floatsisf+0x48>
    3d7a:	96 e9       	ldi	r25, 0x96	; 150
    3d7c:	11 c0       	rjmp	.+34     	; 0x3da0 <__floatsisf+0x6a>
    3d7e:	77 23       	and	r23, r23
    3d80:	21 f0       	breq	.+8      	; 0x3d8a <__floatsisf+0x54>
    3d82:	9e e8       	ldi	r25, 0x8E	; 142
    3d84:	87 2f       	mov	r24, r23
    3d86:	76 2f       	mov	r23, r22
    3d88:	05 c0       	rjmp	.+10     	; 0x3d94 <__floatsisf+0x5e>
    3d8a:	66 23       	and	r22, r22
    3d8c:	71 f0       	breq	.+28     	; 0x3daa <__floatsisf+0x74>
    3d8e:	96 e8       	ldi	r25, 0x86	; 134
    3d90:	86 2f       	mov	r24, r22
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	60 e0       	ldi	r22, 0x00	; 0
    3d96:	2a f0       	brmi	.+10     	; 0x3da2 <__floatsisf+0x6c>
    3d98:	9a 95       	dec	r25
    3d9a:	66 0f       	add	r22, r22
    3d9c:	77 1f       	adc	r23, r23
    3d9e:	88 1f       	adc	r24, r24
    3da0:	da f7       	brpl	.-10     	; 0x3d98 <__floatsisf+0x62>
    3da2:	88 0f       	add	r24, r24
    3da4:	96 95       	lsr	r25
    3da6:	87 95       	ror	r24
    3da8:	97 f9       	bld	r25, 7
    3daa:	08 95       	ret

00003dac <__fp_inf>:
    3dac:	97 f9       	bld	r25, 7
    3dae:	9f 67       	ori	r25, 0x7F	; 127
    3db0:	80 e8       	ldi	r24, 0x80	; 128
    3db2:	70 e0       	ldi	r23, 0x00	; 0
    3db4:	60 e0       	ldi	r22, 0x00	; 0
    3db6:	08 95       	ret

00003db8 <__fp_nan>:
    3db8:	9f ef       	ldi	r25, 0xFF	; 255
    3dba:	80 ec       	ldi	r24, 0xC0	; 192
    3dbc:	08 95       	ret

00003dbe <__fp_pscA>:
    3dbe:	00 24       	eor	r0, r0
    3dc0:	0a 94       	dec	r0
    3dc2:	16 16       	cp	r1, r22
    3dc4:	17 06       	cpc	r1, r23
    3dc6:	18 06       	cpc	r1, r24
    3dc8:	09 06       	cpc	r0, r25
    3dca:	08 95       	ret

00003dcc <__fp_pscB>:
    3dcc:	00 24       	eor	r0, r0
    3dce:	0a 94       	dec	r0
    3dd0:	12 16       	cp	r1, r18
    3dd2:	13 06       	cpc	r1, r19
    3dd4:	14 06       	cpc	r1, r20
    3dd6:	05 06       	cpc	r0, r21
    3dd8:	08 95       	ret

00003dda <__fp_round>:
    3dda:	09 2e       	mov	r0, r25
    3ddc:	03 94       	inc	r0
    3dde:	00 0c       	add	r0, r0
    3de0:	11 f4       	brne	.+4      	; 0x3de6 <__fp_round+0xc>
    3de2:	88 23       	and	r24, r24
    3de4:	52 f0       	brmi	.+20     	; 0x3dfa <__fp_round+0x20>
    3de6:	bb 0f       	add	r27, r27
    3de8:	40 f4       	brcc	.+16     	; 0x3dfa <__fp_round+0x20>
    3dea:	bf 2b       	or	r27, r31
    3dec:	11 f4       	brne	.+4      	; 0x3df2 <__fp_round+0x18>
    3dee:	60 ff       	sbrs	r22, 0
    3df0:	04 c0       	rjmp	.+8      	; 0x3dfa <__fp_round+0x20>
    3df2:	6f 5f       	subi	r22, 0xFF	; 255
    3df4:	7f 4f       	sbci	r23, 0xFF	; 255
    3df6:	8f 4f       	sbci	r24, 0xFF	; 255
    3df8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfa:	08 95       	ret

00003dfc <__fp_split3>:
    3dfc:	57 fd       	sbrc	r21, 7
    3dfe:	90 58       	subi	r25, 0x80	; 128
    3e00:	44 0f       	add	r20, r20
    3e02:	55 1f       	adc	r21, r21
    3e04:	59 f0       	breq	.+22     	; 0x3e1c <__fp_splitA+0x10>
    3e06:	5f 3f       	cpi	r21, 0xFF	; 255
    3e08:	71 f0       	breq	.+28     	; 0x3e26 <__fp_splitA+0x1a>
    3e0a:	47 95       	ror	r20

00003e0c <__fp_splitA>:
    3e0c:	88 0f       	add	r24, r24
    3e0e:	97 fb       	bst	r25, 7
    3e10:	99 1f       	adc	r25, r25
    3e12:	61 f0       	breq	.+24     	; 0x3e2c <__fp_splitA+0x20>
    3e14:	9f 3f       	cpi	r25, 0xFF	; 255
    3e16:	79 f0       	breq	.+30     	; 0x3e36 <__fp_splitA+0x2a>
    3e18:	87 95       	ror	r24
    3e1a:	08 95       	ret
    3e1c:	12 16       	cp	r1, r18
    3e1e:	13 06       	cpc	r1, r19
    3e20:	14 06       	cpc	r1, r20
    3e22:	55 1f       	adc	r21, r21
    3e24:	f2 cf       	rjmp	.-28     	; 0x3e0a <__fp_split3+0xe>
    3e26:	46 95       	lsr	r20
    3e28:	f1 df       	rcall	.-30     	; 0x3e0c <__fp_splitA>
    3e2a:	08 c0       	rjmp	.+16     	; 0x3e3c <__fp_splitA+0x30>
    3e2c:	16 16       	cp	r1, r22
    3e2e:	17 06       	cpc	r1, r23
    3e30:	18 06       	cpc	r1, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	f1 cf       	rjmp	.-30     	; 0x3e18 <__fp_splitA+0xc>
    3e36:	86 95       	lsr	r24
    3e38:	71 05       	cpc	r23, r1
    3e3a:	61 05       	cpc	r22, r1
    3e3c:	08 94       	sec
    3e3e:	08 95       	ret

00003e40 <__fp_zero>:
    3e40:	e8 94       	clt

00003e42 <__fp_szero>:
    3e42:	bb 27       	eor	r27, r27
    3e44:	66 27       	eor	r22, r22
    3e46:	77 27       	eor	r23, r23
    3e48:	cb 01       	movw	r24, r22
    3e4a:	97 f9       	bld	r25, 7
    3e4c:	08 95       	ret

00003e4e <__mulsf3>:
    3e4e:	0b d0       	rcall	.+22     	; 0x3e66 <__mulsf3x>
    3e50:	c4 cf       	rjmp	.-120    	; 0x3dda <__fp_round>
    3e52:	b5 df       	rcall	.-150    	; 0x3dbe <__fp_pscA>
    3e54:	28 f0       	brcs	.+10     	; 0x3e60 <__mulsf3+0x12>
    3e56:	ba df       	rcall	.-140    	; 0x3dcc <__fp_pscB>
    3e58:	18 f0       	brcs	.+6      	; 0x3e60 <__mulsf3+0x12>
    3e5a:	95 23       	and	r25, r21
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <__mulsf3+0x12>
    3e5e:	a6 cf       	rjmp	.-180    	; 0x3dac <__fp_inf>
    3e60:	ab cf       	rjmp	.-170    	; 0x3db8 <__fp_nan>
    3e62:	11 24       	eor	r1, r1
    3e64:	ee cf       	rjmp	.-36     	; 0x3e42 <__fp_szero>

00003e66 <__mulsf3x>:
    3e66:	ca df       	rcall	.-108    	; 0x3dfc <__fp_split3>
    3e68:	a0 f3       	brcs	.-24     	; 0x3e52 <__mulsf3+0x4>

00003e6a <__mulsf3_pse>:
    3e6a:	95 9f       	mul	r25, r21
    3e6c:	d1 f3       	breq	.-12     	; 0x3e62 <__mulsf3+0x14>
    3e6e:	95 0f       	add	r25, r21
    3e70:	50 e0       	ldi	r21, 0x00	; 0
    3e72:	55 1f       	adc	r21, r21
    3e74:	62 9f       	mul	r22, r18
    3e76:	f0 01       	movw	r30, r0
    3e78:	72 9f       	mul	r23, r18
    3e7a:	bb 27       	eor	r27, r27
    3e7c:	f0 0d       	add	r31, r0
    3e7e:	b1 1d       	adc	r27, r1
    3e80:	63 9f       	mul	r22, r19
    3e82:	aa 27       	eor	r26, r26
    3e84:	f0 0d       	add	r31, r0
    3e86:	b1 1d       	adc	r27, r1
    3e88:	aa 1f       	adc	r26, r26
    3e8a:	64 9f       	mul	r22, r20
    3e8c:	66 27       	eor	r22, r22
    3e8e:	b0 0d       	add	r27, r0
    3e90:	a1 1d       	adc	r26, r1
    3e92:	66 1f       	adc	r22, r22
    3e94:	82 9f       	mul	r24, r18
    3e96:	22 27       	eor	r18, r18
    3e98:	b0 0d       	add	r27, r0
    3e9a:	a1 1d       	adc	r26, r1
    3e9c:	62 1f       	adc	r22, r18
    3e9e:	73 9f       	mul	r23, r19
    3ea0:	b0 0d       	add	r27, r0
    3ea2:	a1 1d       	adc	r26, r1
    3ea4:	62 1f       	adc	r22, r18
    3ea6:	83 9f       	mul	r24, r19
    3ea8:	a0 0d       	add	r26, r0
    3eaa:	61 1d       	adc	r22, r1
    3eac:	22 1f       	adc	r18, r18
    3eae:	74 9f       	mul	r23, r20
    3eb0:	33 27       	eor	r19, r19
    3eb2:	a0 0d       	add	r26, r0
    3eb4:	61 1d       	adc	r22, r1
    3eb6:	23 1f       	adc	r18, r19
    3eb8:	84 9f       	mul	r24, r20
    3eba:	60 0d       	add	r22, r0
    3ebc:	21 1d       	adc	r18, r1
    3ebe:	82 2f       	mov	r24, r18
    3ec0:	76 2f       	mov	r23, r22
    3ec2:	6a 2f       	mov	r22, r26
    3ec4:	11 24       	eor	r1, r1
    3ec6:	9f 57       	subi	r25, 0x7F	; 127
    3ec8:	50 40       	sbci	r21, 0x00	; 0
    3eca:	8a f0       	brmi	.+34     	; 0x3eee <__mulsf3_pse+0x84>
    3ecc:	e1 f0       	breq	.+56     	; 0x3f06 <__mulsf3_pse+0x9c>
    3ece:	88 23       	and	r24, r24
    3ed0:	4a f0       	brmi	.+18     	; 0x3ee4 <__mulsf3_pse+0x7a>
    3ed2:	ee 0f       	add	r30, r30
    3ed4:	ff 1f       	adc	r31, r31
    3ed6:	bb 1f       	adc	r27, r27
    3ed8:	66 1f       	adc	r22, r22
    3eda:	77 1f       	adc	r23, r23
    3edc:	88 1f       	adc	r24, r24
    3ede:	91 50       	subi	r25, 0x01	; 1
    3ee0:	50 40       	sbci	r21, 0x00	; 0
    3ee2:	a9 f7       	brne	.-22     	; 0x3ece <__mulsf3_pse+0x64>
    3ee4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ee6:	51 05       	cpc	r21, r1
    3ee8:	70 f0       	brcs	.+28     	; 0x3f06 <__mulsf3_pse+0x9c>
    3eea:	60 cf       	rjmp	.-320    	; 0x3dac <__fp_inf>
    3eec:	aa cf       	rjmp	.-172    	; 0x3e42 <__fp_szero>
    3eee:	5f 3f       	cpi	r21, 0xFF	; 255
    3ef0:	ec f3       	brlt	.-6      	; 0x3eec <__mulsf3_pse+0x82>
    3ef2:	98 3e       	cpi	r25, 0xE8	; 232
    3ef4:	dc f3       	brlt	.-10     	; 0x3eec <__mulsf3_pse+0x82>
    3ef6:	86 95       	lsr	r24
    3ef8:	77 95       	ror	r23
    3efa:	67 95       	ror	r22
    3efc:	b7 95       	ror	r27
    3efe:	f7 95       	ror	r31
    3f00:	e7 95       	ror	r30
    3f02:	9f 5f       	subi	r25, 0xFF	; 255
    3f04:	c1 f7       	brne	.-16     	; 0x3ef6 <__mulsf3_pse+0x8c>
    3f06:	fe 2b       	or	r31, r30
    3f08:	88 0f       	add	r24, r24
    3f0a:	91 1d       	adc	r25, r1
    3f0c:	96 95       	lsr	r25
    3f0e:	87 95       	ror	r24
    3f10:	97 f9       	bld	r25, 7
    3f12:	08 95       	ret

00003f14 <__mulsi3>:
    3f14:	62 9f       	mul	r22, r18
    3f16:	d0 01       	movw	r26, r0
    3f18:	73 9f       	mul	r23, r19
    3f1a:	f0 01       	movw	r30, r0
    3f1c:	82 9f       	mul	r24, r18
    3f1e:	e0 0d       	add	r30, r0
    3f20:	f1 1d       	adc	r31, r1
    3f22:	64 9f       	mul	r22, r20
    3f24:	e0 0d       	add	r30, r0
    3f26:	f1 1d       	adc	r31, r1
    3f28:	92 9f       	mul	r25, r18
    3f2a:	f0 0d       	add	r31, r0
    3f2c:	83 9f       	mul	r24, r19
    3f2e:	f0 0d       	add	r31, r0
    3f30:	74 9f       	mul	r23, r20
    3f32:	f0 0d       	add	r31, r0
    3f34:	65 9f       	mul	r22, r21
    3f36:	f0 0d       	add	r31, r0
    3f38:	99 27       	eor	r25, r25
    3f3a:	72 9f       	mul	r23, r18
    3f3c:	b0 0d       	add	r27, r0
    3f3e:	e1 1d       	adc	r30, r1
    3f40:	f9 1f       	adc	r31, r25
    3f42:	63 9f       	mul	r22, r19
    3f44:	b0 0d       	add	r27, r0
    3f46:	e1 1d       	adc	r30, r1
    3f48:	f9 1f       	adc	r31, r25
    3f4a:	bd 01       	movw	r22, r26
    3f4c:	cf 01       	movw	r24, r30
    3f4e:	11 24       	eor	r1, r1
    3f50:	08 95       	ret

00003f52 <__udivmodhi4>:
    3f52:	aa 1b       	sub	r26, r26
    3f54:	bb 1b       	sub	r27, r27
    3f56:	51 e1       	ldi	r21, 0x11	; 17
    3f58:	07 c0       	rjmp	.+14     	; 0x3f68 <__udivmodhi4_ep>

00003f5a <__udivmodhi4_loop>:
    3f5a:	aa 1f       	adc	r26, r26
    3f5c:	bb 1f       	adc	r27, r27
    3f5e:	a6 17       	cp	r26, r22
    3f60:	b7 07       	cpc	r27, r23
    3f62:	10 f0       	brcs	.+4      	; 0x3f68 <__udivmodhi4_ep>
    3f64:	a6 1b       	sub	r26, r22
    3f66:	b7 0b       	sbc	r27, r23

00003f68 <__udivmodhi4_ep>:
    3f68:	88 1f       	adc	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	5a 95       	dec	r21
    3f6e:	a9 f7       	brne	.-22     	; 0x3f5a <__udivmodhi4_loop>
    3f70:	80 95       	com	r24
    3f72:	90 95       	com	r25
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	08 95       	ret

00003f7a <__udivmodsi4>:
    3f7a:	a1 e2       	ldi	r26, 0x21	; 33
    3f7c:	1a 2e       	mov	r1, r26
    3f7e:	aa 1b       	sub	r26, r26
    3f80:	bb 1b       	sub	r27, r27
    3f82:	fd 01       	movw	r30, r26
    3f84:	0d c0       	rjmp	.+26     	; 0x3fa0 <__udivmodsi4_ep>

00003f86 <__udivmodsi4_loop>:
    3f86:	aa 1f       	adc	r26, r26
    3f88:	bb 1f       	adc	r27, r27
    3f8a:	ee 1f       	adc	r30, r30
    3f8c:	ff 1f       	adc	r31, r31
    3f8e:	a2 17       	cp	r26, r18
    3f90:	b3 07       	cpc	r27, r19
    3f92:	e4 07       	cpc	r30, r20
    3f94:	f5 07       	cpc	r31, r21
    3f96:	20 f0       	brcs	.+8      	; 0x3fa0 <__udivmodsi4_ep>
    3f98:	a2 1b       	sub	r26, r18
    3f9a:	b3 0b       	sbc	r27, r19
    3f9c:	e4 0b       	sbc	r30, r20
    3f9e:	f5 0b       	sbc	r31, r21

00003fa0 <__udivmodsi4_ep>:
    3fa0:	66 1f       	adc	r22, r22
    3fa2:	77 1f       	adc	r23, r23
    3fa4:	88 1f       	adc	r24, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	1a 94       	dec	r1
    3faa:	69 f7       	brne	.-38     	; 0x3f86 <__udivmodsi4_loop>
    3fac:	60 95       	com	r22
    3fae:	70 95       	com	r23
    3fb0:	80 95       	com	r24
    3fb2:	90 95       	com	r25
    3fb4:	9b 01       	movw	r18, r22
    3fb6:	ac 01       	movw	r20, r24
    3fb8:	bd 01       	movw	r22, r26
    3fba:	cf 01       	movw	r24, r30
    3fbc:	08 95       	ret

00003fbe <_exit>:
    3fbe:	f8 94       	cli

00003fc0 <__stop_program>:
    3fc0:	ff cf       	rjmp	.-2      	; 0x3fc0 <__stop_program>
